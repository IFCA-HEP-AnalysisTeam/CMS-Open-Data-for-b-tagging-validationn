import FWCore.ParameterSet.Config as cms

process = cms.Process("PAT")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring( ('root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/000D4260-D23E-E311-A850-02163E008D77.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/00E41BFD-D93E-E311-A91D-0025901D5DEC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/022B6AEB-173F-E311-B17D-0025904A90CA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02484AF2-E63E-E311-A3F6-003048D2BEE6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/024E0F96-B93E-E311-8A3C-02163E008DA1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/027308C4-C73E-E311-8A0C-003048F23FA8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02751E29-D73E-E311-B249-02163E00CD78.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0278353F-F23E-E311-AEED-02163E00C482.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02C290BF-E03E-E311-913B-C860001BD86A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02D19806-DD3E-E311-BC8A-002481E0D1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02E16C94-0B3F-E311-9F2F-02163E00C4FA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/02E91997-EF3E-E311-8520-0025901AF660.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0420D5E4-B23E-E311-9F88-02163E00BF97.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0422E58A-A53E-E311-9A3E-02163E00ADFE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04446C4B-183F-E311-AB6F-02163E008D93.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0444C885-EB3E-E311-AD67-C860001BD834.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0444F8BF-DB3E-E311-9729-003048F02C66.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0471E862-D03E-E311-B57D-02163E00A38A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04A4EED5-053F-E311-A2AF-003048F1B904.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04CD866D-EE3E-E311-B148-003048F23676.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04D9EECE-F03E-E311-910B-02163E0079DA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04DE8625-BC3E-E311-8E8B-003048F1C9AC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/04FC376C-053F-E311-9BAC-02163E0079D5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/06318261-F83E-E311-B60D-003048CF92B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/06E23025-BC3E-E311-BCD0-003048F01100.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/06EA1332-D83E-E311-84BD-02163E00BA2B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0811F6D0-F63E-E311-8119-003048F0E3E2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0821EF2C-F13E-E311-82A6-0025901AF58A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/083338D7-C83E-E311-A6BA-BCAEC518FF52.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/083FB350-E13E-E311-BA07-003048F1B904.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0870B2A1-0F3F-E311-8D3A-0025901D6284.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0875B156-063F-E311-99FE-003048D462BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/087BD0EE-073F-E311-84CD-02163E00ADFE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/08CD351F-DF3E-E311-B4AD-003048F2377E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/08F80CDC-FC3E-E311-9275-003048FEAF14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A00A5BE-D73E-E311-AE52-02163E00A313.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A0408EF-EA3E-E311-8501-003048FEAECC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A046A87-043F-E311-B19F-02163E00CE1C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A07557B-043F-E311-A05E-02163E008D9E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A41D176-F33E-E311-9E3C-02163E00CAC5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A4C2BB0-EB3E-E311-9238-02163E00AD22.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A6E33A9-E63E-E311-8E0E-C860001BD8BC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A73DA1F-FB3E-E311-9D96-02163E00CDF6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A817C2C-E43E-E311-823C-003048F1C1A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A909CE8-E43E-E311-A769-02163E00AE41.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0A9FFC83-DA3E-E311-AD1C-003048FEAF90.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0AC9521D-AD3E-E311-BC7B-003048F1182C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0AD989E0-E33E-E311-AEF9-02163E00CC4F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0C5B7776-D23E-E311-ACB7-002481E0D1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0C9638EB-CA3E-E311-9D83-0025B32441FA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0CADD1C9-C33E-E311-892C-003048F01074.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0CCF68F1-E73E-E311-A1EE-003048FEAFA0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0CD213C3-E03E-E311-88B4-002590494DE8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0E00131B-D73E-E311-9FBF-0025901D6286.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0E38FEF9-103F-E311-81A2-0025901D5C7E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0E53E0E6-EA3E-E311-8ACC-02163E008D96.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0E5E5D99-AB3E-E311-ACE7-003048F236DE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0E721DD8-F23E-E311-96C9-02163E00C09C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0EB3C1F1-C13E-E311-87F6-C860001BD89E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0EBF2796-D83E-E311-A794-5404A63886EC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0EC296FC-E63E-E311-83D0-003048F179C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/0ED83F55-063F-E311-96B0-003048F24354.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10426894-D33E-E311-BEEC-02163E008D96.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/107DEEF2-C73E-E311-8AE2-02163E008D83.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/107E130C-ED3E-E311-BE60-02163E00A1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10AE0E26-023F-E311-8861-02163E00C7E1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10B2D1EE-F43E-E311-B3BC-5404A63886B1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10C529FC-EA3E-E311-B0E1-003048F236DA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10D9B1AE-E23E-E311-92BE-0030486730E6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/10EDF04B-A23E-E311-8D99-003048F02C5A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/122CFC9F-063F-E311-8719-02163E00CACA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/123F921D-B33E-E311-844D-C860001BD868.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/124D4CF9-0E3F-E311-B402-02163E00B1AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/125206EC-C63E-E311-B48E-002590496FE6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/12C0AED0-B23E-E311-A9E7-003048F1C764.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/140CAFBD-033F-E311-B5B9-0030486730BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/140CFF35-CD3E-E311-93CD-02163E008DB1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14444AA8-DC3E-E311-9AEE-0025901AF344.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1463F0BE-C93E-E311-BBB4-003048FEB9C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1475CD2D-113F-E311-A514-00237DDBE8CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/147929CD-DA3E-E311-ACDD-003048F01146.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14792B5E-CA3E-E311-B877-003048F1C9A6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1488213F-D03E-E311-B09B-003048FEAEB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14997B2C-AF3E-E311-B1A0-0025904B2C5A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14A72041-143F-E311-A4C3-002481E0D1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14AE996A-FC3E-E311-8ACE-02163E00C010.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14E46207-D93E-E311-9321-003048CF9AE0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14F5FBD5-F63E-E311-8480-3C4A9279B99C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/14F720D9-EA3E-E311-8540-02163E00BFED.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/16A08478-BF3E-E311-9C70-BCAEC5329720.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18146DB6-D73E-E311-828B-003048F1C570.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/187A3C72-043F-E311-BBE7-003048F1B952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1880FB04-0C3F-E311-A832-003048F02D3A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/189297B5-163F-E311-83D3-003048FE4C1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18ABE119-FF3E-E311-935B-003048F1C41C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18B5A08D-CC3E-E311-86A0-02163E00A109.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18C60B4C-FB3E-E311-AD4A-003048F23848.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18DFFB68-EE3E-E311-AC75-003048F1DB5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18F089E7-1B4E-E311-812F-003048CFB3AE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/18FE9C62-F83E-E311-80A2-003048FEB9C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A0A9D6C-EF3E-E311-B855-02163E00ACFF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A18B43E-D03E-E311-BF21-003048CF9E54.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A2C8D87-173F-E311-9F16-02163E00C7A8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A446867-173F-E311-B273-003048F1E1B6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A494C32-183F-E311-8B0F-02163E00B521.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A50A58F-C93E-E311-BCE1-02163E008CCD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A5C20B9-BE3E-E311-BAD9-02163E00B484.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A60DD5E-F33E-E311-A5C1-02163E008F6C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A628F3A-183F-E311-850B-0025904B201E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A7181D4-E13E-E311-9C95-02163E00ABCE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1A9D7BE7-9E3E-E311-BEE3-BCAEC5329717.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1ACC1784-F03E-E311-8B92-003048FEAED4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1AE5301C-083F-E311-B588-003048FEB996.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1AF7E7B0-F53E-E311-9B0F-02163E00C09C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1C2B2252-0C3F-E311-A5CA-002481E762BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1C57944B-CF3E-E311-9126-003048F1C40E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1C7A63A9-013F-E311-B7CD-003048F23C0A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1CC225FD-EE3E-E311-A8AB-003048F23978.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1CDD84A6-B73E-E311-8022-C860001BD85A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1CE2AA4B-D83E-E311-9050-003048CF9E34.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1CECDC61-B83E-E311-86CA-02163E00AFCA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1CEFC57C-D93E-E311-B56D-D8D385AE802C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E0065E6-EA3E-E311-87D7-003048F17A72.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E065B16-0F3F-E311-86E7-003048F0E7B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E0EB43E-953E-E311-AC79-003048FE80DE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E32FB84-DE3E-E311-A238-003048CFC622.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E34DA59-003F-E311-9695-003048CEA258.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E40B9D6-C03E-E311-9B5D-02163E00CE00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E5D7A69-D73E-E311-8858-02163E008F00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E865ECE-E73E-E311-864D-02163E008D75.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E8A2277-FE3E-E311-AC4B-02163E008EE7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1E8CCE89-E33E-E311-9145-003048F23C1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/1EDF14C1-E03E-E311-983B-003048F01090.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2021FAF6-EF3E-E311-AC3E-003048F1C1B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/203DCCF4-9A3E-E311-8A54-02163E008F98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/20461927-F93E-E311-885F-02163E00B1D2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2061B2F6-063F-E311-A6A2-0025904B26CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/20735FD3-FC3E-E311-BDB8-003048F1C446.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2089B9D9-B83E-E311-AD23-003048FEAF2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/20EDD0D2-F83E-E311-B4A7-003048FEB8D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/220DDF9D-C13E-E311-A3EA-0025901D5C80.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/22190D05-C13E-E311-ADD4-003048CFC644.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2226ADC4-A93E-E311-A731-0025901D6250.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/223A26B7-F23E-E311-BD02-02163E0079B3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/224FA26F-DB3E-E311-84A7-02163E00A311.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/225EC4F6-E63E-E311-820D-003048F0E5BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/225ED5C2-0E3F-E311-92CF-C860001BD81A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/228E2669-053F-E311-8066-003048F1B952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/22A1F037-EB3E-E311-9297-003048F17C70.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/22C62A6B-F43E-E311-B9AC-02163E008D65.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/22EC14C3-DC3E-E311-B5B6-02163E008D99.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2408230A-0A3F-E311-A636-003048F1C59C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/243A5CF5-123F-E311-B012-02163E00BA28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/244737D6-083F-E311-8D73-02163E008D75.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24982349-EF3E-E311-AA66-5404A63886C0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24A7206A-123F-E311-AD7A-02163E008CD9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24AE7F77-F93E-E311-8EE8-003048CF92B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24B6BF89-0D3F-E311-9404-002590492692.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24C57498-083F-E311-B063-02163E00CBDE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/24D58F82-D53E-E311-8ADE-02163E008D96.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26130FB9-BC3E-E311-B7F9-02163E00CDE5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26150429-C43E-E311-BCEA-003048F17C12.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/262E7DED-EA3E-E311-AF8E-00237DDC5F5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/264D5955-003F-E311-81C8-003048F24342.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2656F506-133F-E311-B961-003048CFB3AC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26952F2C-F73E-E311-AB24-003048F1DBB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26955865-DB3E-E311-BB77-002481E0D20A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26987AA4-9F3E-E311-A195-003048F00978.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26A3BFBD-E03E-E311-B630-003048F1DB7A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26B18129-093F-E311-AEB4-003048FEAF04.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26B83DD2-A73E-E311-A0A1-02163E00CD92.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/26BA1B67-C93E-E311-A703-003048F1C7F4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/28684C19-B93E-E311-A89B-003048F17F02.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/288273D6-053F-E311-AAE2-02163E008D9E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/28E895D1-EB3E-E311-B58B-02163E00BD88.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/28F1AB65-F23E-E311-BEF0-003048FEB8EE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2A0CF57B-BC3E-E311-BEBA-003048FEB8CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2A12DD62-E23E-E311-B40D-02163E00BD6F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2A47C93D-133F-E311-B829-02163E00AE07.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2A49FC6A-FC3E-E311-BC4D-02163E00B056.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2AC8762D-093F-E311-B793-02163E008DA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2ADCDC54-E53E-E311-A3F2-02163E008CE1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2AE829F1-173F-E311-BB12-002590494C38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C0FA556-FA3E-E311-97AC-003048FEAF04.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C0FAA1C-EE3E-E311-B246-02163E00A101.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C56AF7F-0C3F-E311-BC13-02163E00B1C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C974829-F73E-E311-9CA2-BCAEC53296F7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C9C6620-C43E-E311-BF11-00215AEDFF9A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2C9DBE8D-113F-E311-91AD-003048F1BEF4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2CBF9059-B63E-E311-B579-003048CF9B4C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2CC53BD3-C73E-E311-97F3-02163E008CD9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2CCEF0AB-F43E-E311-94E8-02163E00A133.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2CFC68E0-D83E-E311-9FDE-003048F1CA76.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2E9AAB59-E63E-E311-B02A-003048F237F8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2EC9BD1C-193F-E311-B241-003048CFB1A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2EE7A7D9-CC3E-E311-AFAB-0025B3203778.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/2EF2E922-FA3E-E311-876C-02163E00BC48.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/304AB2DA-FC3E-E311-8BD0-002481E0D216.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/305C134F-0B3F-E311-A2CF-02163E00AD67.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/30843AA0-063F-E311-9D8A-C860001BD8BC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3086B376-FB3E-E311-947B-02163E00ADEE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/321CFAA3-033F-E311-BBFB-02163E00B1B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/321EDD2D-BD3E-E311-9970-003048F1E1B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/32478D31-D13E-E311-A54D-00259029DBB4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/32630950-D43E-E311-8995-02163E00A0D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/329B62CE-0A3F-E311-AC56-003048F01100.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/32E02596-DB3E-E311-9616-02163E00C4BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/32F52C3E-DB3E-E311-B78D-02163E00BD06.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/341BFE84-EB3E-E311-AEB3-00237D43EDC6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3427905C-F83E-E311-8385-5404A63886A9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/345C24EE-D93E-E311-AA9C-0025901AF58A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3475F920-C83E-E311-9AF7-BCAEC518FF8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/348C4288-F13E-E311-8696-003048FEB956.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34AFF1E7-BA3E-E311-843A-003048F0040A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34B08415-FE3E-E311-A238-D8D385AE8A82.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34BD63AC-CB3E-E311-BC33-02163E00B54B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34BE0674-BF3E-E311-97BE-0025901D5C86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34CAB5AF-D73E-E311-BC0F-003048F1B95E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34E4CE64-D63E-E311-9CE9-02163E00CDE6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/34E4FD26-E03E-E311-9B30-D8D385AE8A82.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/362267D4-F23E-E311-B9CC-02163E008CE2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/363B0087-153F-E311-A02A-003048F1DDF8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3656B324-043F-E311-9790-003048F1DB8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/36647B88-E33E-E311-82C3-003048F00B2E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/367A631F-F93E-E311-99D7-003048F1C7F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/36970017-013F-E311-9890-02163E00C774.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/369E7E2E-F13E-E311-92F9-003048CF9E98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/36D22EE6-133F-E311-A4C6-003048F003D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/36D8CED5-F13E-E311-9436-003048FEAED4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/380A9634-013F-E311-B52E-02163E00AD03.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/380B9C9E-C23E-E311-AE8C-003048F01184.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3831F3A5-013F-E311-93D4-003048F2456E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/383D68A5-F43E-E311-AE73-BCAEC5329701.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/383F7606-FC3E-E311-9021-00215AEDFD8A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38632B8F-CC3E-E311-B400-02163E00CBD4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38825FB3-CD3E-E311-A83E-003048F1C7DC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38843860-E63E-E311-8AAF-003048F0E322.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/388BEEAC-FA3E-E311-A341-003048FEB98E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38924802-083F-E311-AF84-003048F00970.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/389A4DA1-0B3F-E311-80DB-02163E00B74E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/389ACCAE-ED3E-E311-9D9E-003048CF92E6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38A27AC4-C73E-E311-A1D2-003048F1182C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38CD1681-DA3E-E311-968E-003048F1C590.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38E14699-D83E-E311-B7AE-003048FEB8F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/38EE85A7-D33E-E311-AC83-02163E008D77.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3A7BDCFD-AB3E-E311-B4B5-02163E008F35.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3AD4F51E-EB3E-E311-B159-02163E00AF91.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3AD61E76-C33E-E311-9536-002481E0E14E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3AD757AD-013F-E311-9501-003048CFAFC6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3AFDF927-193F-E311-A250-003048FEAEB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3C0086C5-123F-E311-A991-003048F23858.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3C06BDA3-CF3E-E311-92D8-003048F02974.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3C2FF7A0-E23E-E311-8677-003048C9B992.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3C5299A0-A53E-E311-B652-02163E00A106.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CA50BF5-A43E-E311-B226-0025901DD272.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CC26D35-EA3E-E311-B7B9-02163E00CA9F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CD207CC-DB3E-E311-9BC1-02163E00A1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CD2434E-E63E-E311-8E5E-02163E00B1D1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CD6D9CB-053F-E311-9BF1-003048F17C82.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CF5095A-143F-E311-9855-02163E00CDE9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3CFEBB77-043F-E311-A1A7-02163E00C4BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3E9824F3-D93E-E311-A282-0025901D5E00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3EC5B244-E63E-E311-B890-02163E00BC0A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/3ED0B344-AD3E-E311-95A8-02163E00B55D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4013CF25-BC3E-E311-BA6C-003048F009D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/408D5645-A03E-E311-981A-02163E008DB7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4093ABA6-E83E-E311-8EBA-003048F003EE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/40E86B65-0F3F-E311-AC9E-02163E00CDD1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/40E89154-F53E-E311-8F90-003048F23D68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/42024062-FA3E-E311-A82E-003048CF9ADE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/42160D6D-E13E-E311-AD27-02163E00A182.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4232E086-E73E-E311-A545-02163E00B1C3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4277A70D-BE3E-E311-8592-02163E00C09C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/427F362D-E43E-E311-9A4D-02163E00A187.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/42BF031C-A73E-E311-B453-003048C9C94E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/42C6DCE4-C63E-E311-9EE4-003048F11D4C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/42CBEB41-E23E-E311-B9DB-02163E008CCF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/442DA4A8-FA3E-E311-9007-003048F00BA0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/44711F6B-B03E-E311-A054-003048F1C9C4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/449BC680-F13E-E311-BBA7-0025901AF6AC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/44FB86D3-B53E-E311-89A5-003048FF0128.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/460212EF-E73E-E311-9773-003048CEA05C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4615F278-D93E-E311-9567-0025904B26B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4670F0F9-0D3F-E311-8142-02163E00B551.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4689ADEE-013F-E311-8FB2-003048F1C7BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/46AA9D4D-003F-E311-A483-0025B3244540.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/46ECFC1D-DF3E-E311-BB14-C86000151BEC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48044AB2-ED3E-E311-9674-003048CFAD0A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/481DE787-113F-E311-9070-02163E008F7E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4839083F-F53E-E311-AB3D-003048F1DE44.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48429383-FE3E-E311-B8AA-02163E00C7F1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4852DDAA-FA3E-E311-AB5D-003048CF99C0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/485572A8-E23E-E311-BB6E-0025904B2946.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4859775F-0E3F-E311-BA3F-02163E008D98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/485F0E51-0C3F-E311-BDA5-002590492692.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/486CCA8D-BB3E-E311-A0E2-02163E00A10B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4879C8F9-073F-E311-BA41-003048D462BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/488645A1-173F-E311-A3BC-0025901AF548.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48908563-103F-E311-B390-02163E00C59C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48A94B26-193F-E311-83C0-003048CF98CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48B19C8C-BE3E-E311-A836-003048F1C82C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48BDD4C5-0E3F-E311-BEDB-003048F1CA1C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/48C43D4D-EF3E-E311-89A9-02163E008F97.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A0CC207-F33E-E311-A616-02163E00A12C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A288D64-D73E-E311-A928-003048CF9E34.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A40DEF9-F13E-E311-BF08-02163E008F4B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A421321-A83E-E311-9371-02163E00BF8F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A7144E9-E33E-E311-9187-003048F1749C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A7C0863-E63E-E311-81F0-02163E00CDED.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A8941EB-EA3E-E311-B3CC-003048F1C53A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4A90A4A0-073F-E311-957D-5404A640A63D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4AA996F7-043F-E311-8EE6-02163E00CDE9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4AAE4EAA-D63E-E311-81CA-00237DDC5F5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4ACA82B5-163F-E311-87F5-003048F1C5C0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4AF10750-F33E-E311-9EF2-003048F1E130.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C1E487C-113F-E311-8CE7-002590492692.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C476420-0A3F-E311-BFF7-02163E00C5B4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C5530DA-023F-E311-BB45-003048CFB39E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C555B0F-163F-E311-8D2D-BCAEC518FF89.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C633C6A-033F-E311-9B3C-02163E00CD8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C845969-023F-E311-AFE5-02163E00CE0E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4C8E397B-F23E-E311-9F91-002481E0DE30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4CCD9647-C63E-E311-938F-003048F16B9C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4CDFD17E-0A3F-E311-9E01-02163E008CCC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E14B08B-CA3E-E311-8686-02163E00AFD8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E303B44-103F-E311-81F1-0025904B3072.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E59DB4A-0E3F-E311-B1BB-02163E00BB53.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E672322-C83E-E311-B0C4-BCAEC518FF8F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E894170-F83E-E311-9A18-003048CFBA0E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4E93CBA1-FB3E-E311-9847-003048F0E512.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4ED7AA56-9C3E-E311-9DA4-0025901AB77A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4ED8F1E3-DF3E-E311-8B66-02163E00ADA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4EE2D031-AE3E-E311-9AF2-02163E00C4BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/4EE64461-CA3E-E311-9829-003048FEB9C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5039715B-F43E-E311-9039-003048FEB996.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5046207B-F03E-E311-949D-003048F0E1CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/505CB459-EA3E-E311-B3C2-02163E008D9F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5094DAE0-AF3E-E311-A469-C860001BD930.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52751EBE-CE3E-E311-81A3-003048CFAE10.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/528AC532-E43E-E311-96F3-003048F1B86E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/529C1899-DC3E-E311-B1FA-003048FF0128.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52AC6707-DD3E-E311-84C1-003048F1C4AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52BD9005-FA3E-E311-BE4C-003048F0E1B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52BF05E9-EA3E-E311-9A3C-003048F16B9C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52CF892E-B23E-E311-9B9E-003048CFAE10.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/52F8A325-C83E-E311-949F-0025901D5DB4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/543D2CAC-FE3E-E311-B294-02163E008D8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/54663AF6-EB3E-E311-83DE-02163E008F97.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/54790005-FA3E-E311-BA3C-003048F00AF2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5489CC3C-D23E-E311-BEA4-02163E00BF94.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/548C9ACB-FE3E-E311-B617-003048F0E564.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/54CD3F57-003F-E311-9F46-02163E00A364.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/54DA64B4-163F-E311-8AD4-0025901AF348.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/56114161-FA3E-E311-975F-02163E008DA6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/562DF1C6-6650-E311-ACE2-003048D3763E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/56348D1E-BF3E-E311-B4A2-5404A63886B1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/56463208-CE3E-E311-ADA7-02163E00A45C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/58260081-F03E-E311-9DBB-003048FEB96E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/585594AB-073F-E311-B4DA-C860001BD8BC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/585E248C-FC3E-E311-9026-02163E00CADC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5862AE82-F03E-E311-8124-003048FEB8CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5864944E-DD3E-E311-800F-02163E0079A1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/589749D1-E03E-E311-9E03-002481E0E4E2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/589EEDD6-023F-E311-AA11-003048F1C7BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/58D95513-053F-E311-BE60-003048F122C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/58FF7C4D-FB3E-E311-8CB1-003048FEAF14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5A20667E-043F-E311-8A74-02163E00BF7C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5A4D8D5F-0B3F-E311-9F5E-003048F003D8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5AB7FBF7-EA3E-E311-8DAA-003048F1CA2A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5AC4484E-DB3E-E311-B5DD-02163E00C783.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5AD383ED-E73E-E311-BA86-C860001BD8CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5AEC8ED7-103F-E311-B7B6-BCAEC5364C42.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5C79B01A-E63E-E311-B6F9-02163E008F62.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5C80AB19-FE3E-E311-B34F-003048FEAF38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5C9A21BE-EC3E-E311-8CF3-00259029DBB4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5CA297EC-C23E-E311-9DEF-C860001BD89A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5CE401C3-033F-E311-89A0-003048F23986.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5CF797D2-C83E-E311-9C22-BCAEC518FF8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E1FDC60-D63E-E311-AEDF-003048F1C540.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E42DBAF-C43E-E311-81FB-C86000151BA8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E4C64EB-E13E-E311-A924-02163E008EC1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E6BE4AA-C43E-E311-BA28-C86000151BEC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E892460-0B3F-E311-98B7-003048F1BF0E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5E9DAE36-E23E-E311-AF28-003048F003DC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5EA883CF-0E3F-E311-B46C-003048FEAF30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5EAB42DE-FC3E-E311-8B86-02163E00CDE5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/5EAD9AED-CA3E-E311-A1DB-003048F16F46.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/602672BF-EC3E-E311-82F6-003048CF99C0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6080796F-F43E-E311-A156-003048F009D2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6087BDBC-0B3F-E311-A926-003048CFAFAC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/60A45B74-D53E-E311-A7C9-003048F1C9C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/60E572AB-E63E-E311-B0A5-003048F2384C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/60EDABA6-F53E-E311-AC77-003048F0E7B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/60F4B451-F43E-E311-BA79-003048F1C836.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6202B5B9-173F-E311-93D1-003048F17A86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/62099B1C-BE3E-E311-8FF4-02163E008D93.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/62AF149F-CB3E-E311-8D77-003048CF4C20.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/62CDA7CF-F83E-E311-AB46-02163E00CB41.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/62D74C7E-B93E-E311-ABD4-002481E73676.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64134359-FA3E-E311-80EB-0030489455EC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6414910B-E53E-E311-BE2C-003048F1C9B4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64184599-EF3E-E311-AE3A-D8D385FF6EF8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/642DDF9E-E53E-E311-97B1-02163E00B55D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64655AF5-EA3E-E311-811F-02163E00CD8F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/646807DF-D83E-E311-94E6-003048CF9E56.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/646862B5-0B3F-E311-8CD6-002590494F78.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6469CD0B-BD3E-E311-AEC6-003048F1E1E0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/647B148D-D33E-E311-9F1B-003048F1B58A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64888EA3-EF3E-E311-A7FB-002481E745AC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/649C03DD-BE3E-E311-B37B-0025901D5D90.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64AF3FBF-E73E-E311-8566-003048D462BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64B402AD-FF3E-E311-B15A-002481E94B30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64D29851-C53E-E311-8BCB-0025904B15AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64DB60F5-E63E-E311-8796-003048F01118.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64E9F3F0-BD3E-E311-9626-003048FEFFF8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64F090E4-F33E-E311-A209-02163E00C010.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/64FA8CDC-FF3E-E311-9D1C-02163E00CE1D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/660B20DD-033F-E311-B0AF-003048FEAF50.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66381FE3-E03E-E311-9BF4-02163E00AD2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/663886C2-E03E-E311-BC9A-C860001BD948.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66521A4F-DD3E-E311-B70F-02163E007A07.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66AF6E68-F93E-E311-B648-003048F1B834.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66D5D86C-D33E-E311-98AD-02163E00C7CB.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66DFB663-DB3E-E311-B3AB-003048F01116.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/66EA26E1-003F-E311-A748-003048CF9E56.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/682B4E0E-E23E-E311-B752-02163E00CD7B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/683A3A0A-133F-E311-B086-C860001BD83A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6843B3DE-F83E-E311-B01D-003048F1C496.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/686CDCC2-DB3E-E311-939D-003048FEB8F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/68903A95-093F-E311-91E2-02163E00C34F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/68B3E84A-923E-E311-8FF3-02163E008DB2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/68F4F811-E83E-E311-9C40-02163E008CD7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A0A30CF-D13E-E311-8553-002481E0E14E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A14CD87-D13E-E311-BDFF-003048F1C4BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A16E42C-183F-E311-8735-02163E00C352.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A1D5768-B33E-E311-838F-0025904949BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A23E537-E63E-E311-AF80-02163E00CAE3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6A82208C-DE3E-E311-B684-003048FEAEB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C008869-143F-E311-A367-02163E00BA2E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C309D9C-193F-E311-A0B1-02163E00B4EA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C38F652-CB3E-E311-9B5B-003048F00B34.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C4B23EA-F33E-E311-887C-C860001BD8AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C6CD6EF-EC3E-E311-B49D-02163E00BA46.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6C87C6D1-EB3E-E311-8F12-003048F1BF98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CAB2A91-EF3E-E311-B3BC-BCAEC53296FB.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CB872D6-B43E-E311-9C72-02163E0079A9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CC153E1-F63E-E311-89E6-003048F1BFA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CE2315D-D63E-E311-A3AD-003048F1C1B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CF1BF6F-FE3E-E311-AAAD-003048FEE070.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6CFB87E0-103F-E311-9F31-02163E008D98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6E19F884-093F-E311-9528-02163E0079B7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6E3F4706-E13E-E311-A221-003048CFB3A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6E4E7A4D-CB3E-E311-A74A-003048F11D58.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6E9AC530-EC3E-E311-B34A-02163E00B036.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6E9C420A-0C3F-E311-BE94-003048F2460E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6EBD48C1-0A3F-E311-8535-0025904B2C5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6ECA6DF6-EE3E-E311-A7FD-02163E0079B2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6EF7AE56-0C3F-E311-8839-003048F1C764.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6EF8E0D5-FA3E-E311-BB5C-BCAEC518FF8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/6EFB3862-D23E-E311-97A4-003048F2385A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7017766B-F53E-E311-A467-02163E00AD3B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/703BFA1F-F33E-E311-851B-02163E00CE04.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7046D26B-B03E-E311-8974-003048F11C28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/705729DC-F03E-E311-967B-02163E008F68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/70A563F9-963E-E311-A259-02163E008D67.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/70D47DA4-F23E-E311-9864-02163E00AD35.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7202547C-E73E-E311-AB43-02163E00C7A8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/72461D98-DC3E-E311-9ED5-003048F0108C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/72A37E76-F93E-E311-88A0-003048F1C53A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/72C26BCC-B53E-E311-814D-003048F1BFDE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/72F1BBF8-E63E-E311-A99B-C860001BD8CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/72F6FEF1-FA3E-E311-9FDD-02163E008D68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/741DE576-CB3E-E311-8C13-02163E00A0ED.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/742B380B-EF3E-E311-97B5-02163E008F7F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74394419-123F-E311-BF01-003048F1BFB6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/748576C4-DE3E-E311-BB46-02163E00B51B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/748760A9-0D3F-E311-8886-02163E008DA3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7499286B-DB3E-E311-A256-003048F23774.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74A3F0F7-B33E-E311-A921-0025901AD38A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74B8E58B-E33E-E311-BAC0-003048F0E398.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74D0F10A-B43E-E311-876C-003048FEB996.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74E9F8C7-D13E-E311-87BB-003048F1C9F8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74EA67B4-CF3E-E311-8942-003048CF9808.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/74F085E8-173F-E311-AFC9-002590494FCC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/764850AD-CF3E-E311-B2A3-003048F11B28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/767D4B2B-D13E-E311-A094-003048F0E1CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/76807272-E23E-E311-B0FC-02163E00AE75.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/768C87E4-EA3E-E311-A526-003048CFAFAC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/76AD998D-C83E-E311-9ADC-003048FEB98E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/76B8C552-AE3E-E311-9602-0025901D5748.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/76EE8DE8-DD3E-E311-8F72-003048F1DB7A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/783A6FE8-EF3E-E311-BDEA-003048F1DBB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/78457E6F-EA3E-E311-B276-02163E008ED9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/784D8FD5-FC3E-E311-AC92-003048F1C570.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/78B1FDD4-D03E-E311-84F3-003048D49A40.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/78EC52EA-C63E-E311-B6FD-003048FE80DE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7A13BF14-EE3E-E311-8357-02163E008D80.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7A141B2E-0E3F-E311-A5F1-02163E008D93.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7A554239-FF3E-E311-833E-02163E00BD06.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7A97E514-163F-E311-BE3B-02163E00BCF5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7A9CE654-A83E-E311-A5F6-0025904B1FB8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7AF8A867-DB3E-E311-8DE5-003048F0108C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7C1547EF-133F-E311-8678-0025904B2B20.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7C16DFD4-FE3E-E311-992B-02163E00AD4E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7C1D351E-123F-E311-9474-00237DDBE8CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7CB2C3BA-B13E-E311-82C9-02163E00BA3C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7CD9E426-D53E-E311-B800-02163E0079A1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7CFE6FA9-CF3E-E311-A31A-02163E0079A9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7E0921BA-EC3E-E311-AB81-003048F0E306.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7E43D9E0-D83E-E311-9B5A-003048CFAE3A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7EAFFA74-DF3E-E311-BA3B-002481E0DE30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7EC93FC9-EA3E-E311-9A75-02163E00B542.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7ECC846E-D53E-E311-82D8-0025901D5C86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7EE4CF63-D23E-E311-99CA-003048F00BD8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/7EFCE348-C63E-E311-98B7-003048F0E306.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8007FA24-F93E-E311-9A23-02163E008DA6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/801F03CA-F63E-E311-8489-02163E00CE00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8023FD1B-D43E-E311-A139-02163E008EC1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8045D6BD-B93E-E311-8FD3-003048F0E322.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/806043F0-EA3E-E311-879F-5404A63886EF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/80A5DCEA-D03E-E311-A239-02163E00BD34.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/80B8733F-E63E-E311-99A7-02163E00BC1A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/80DA46B7-003F-E311-B04D-02163E00BF88.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/80EC01C9-123F-E311-8A6A-003048F1E130.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/80F0AFE5-CB3E-E311-AB59-003048F1C4AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/820E94AB-C53E-E311-8071-003048F118C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/824EF07A-093F-E311-B03C-0025904B5B2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/825ACD1B-AD3E-E311-92B9-003048F01138.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/82701E08-E13E-E311-8A28-003048F23D8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/82A1C23B-0A3F-E311-A4DA-02163E00BA30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/82AFD6EE-C13E-E311-9FF8-003048C9AC56.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/843195E3-C63E-E311-A17C-003048F1BEC8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/844A906D-143F-E311-8A25-02163E00C4EF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/84532F70-0A3F-E311-BA8D-003048F02C8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8453B43C-9B3E-E311-ADFE-002590494FCA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/84903352-BA3E-E311-9E28-003048FEAF8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/84CB52FA-C13E-E311-BB0A-02163E00CC63.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/84CC78BB-A73E-E311-B308-02163E00A311.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/84F948AE-A33E-E311-89EC-02163E008F97.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/86332754-CF3E-E311-B364-003048F02976.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/864DAA51-0C3F-E311-9B49-003048F00BD8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8656D108-943E-E311-8B1F-003048F02C8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8671F709-CA3E-E311-B629-003048F11D58.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/867B9481-F13E-E311-ADFE-003048F23980.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/86B0B327-F73E-E311-B8AA-003048F0E7B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88098E3A-183F-E311-A52A-003048CFB1A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88495668-EC3E-E311-BAA7-02163E008F62.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8851605A-ED3E-E311-A174-003048F1CA08.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8860C0DE-EF3E-E311-9379-BCAEC518FF52.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88B73270-F93E-E311-B9EA-485B39897227.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88BE49F8-0C3F-E311-B82F-D8D385AE8868.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88D84375-173F-E311-A05B-003048F01068.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88DE48A6-D63E-E311-A580-003048F024B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88F98DE3-E33E-E311-AE3B-003048F00976.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/88FD8A88-E33E-E311-8C24-003048F02C66.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8A1352F1-F53E-E311-BAB5-003048FEAF04.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8A229220-CD3E-E311-A5A2-002481E0E618.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8A2B6A67-D73E-E311-986F-003048F0E7A6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8A49243D-DE3E-E311-860B-02163E00CCF4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8AED75E8-BA3E-E311-BA93-C860001BD832.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C0C12F7-E43E-E311-9D63-02163E00C02F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C0DABBD-C53E-E311-8C92-003048F11D4C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C4B7104-C13E-E311-B3BC-C860001BD948.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C6DB3EF-073F-E311-8FB6-003048D2BD66.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C75234F-173F-E311-95EE-003048CFB1A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8C88EF9E-0B3F-E311-A753-0025B32445DC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8CB684B2-073F-E311-9F64-02163E00CADE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8CB8566F-FE3E-E311-A68E-003048F1E1B2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8E1E4654-DB3E-E311-966A-02163E00B1BD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8E5EA526-EC3E-E311-9B56-003048FEB98E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8E6DE692-C63E-E311-9AB3-002590494FE0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/8ECCFEAB-D63E-E311-9E88-C860001BD8BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9007FCB9-C03E-E311-B7F8-0025904B2C58.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/900FDFFD-D23E-E311-B685-003048F1C594.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/903A6526-E03E-E311-BF01-003048F2456E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9054108D-FF3E-E311-BA73-02163E00CD59.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9073EFEB-B13E-E311-AEDD-02163E00BB5D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9076AB95-C63E-E311-B03E-003048F1CA20.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/90A24A14-043F-E311-B823-003048F2378E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/90B68748-103F-E311-8A98-003048F024E0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/90EA8656-063F-E311-9174-003048F1B952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/922BEF47-D83E-E311-896C-003048F2464C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9236626D-EE3E-E311-99E0-02163E008D6A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9245A966-BD3E-E311-8F75-003048FEB8CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/925DDF75-BF3E-E311-9FE8-0025901D5CBC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9260AE3C-FE3E-E311-8F74-02163E00C518.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/92995CA7-013F-E311-8A4D-003048CFAF86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/92CFB2F1-0C3F-E311-9AEF-00215AEDFD68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/92E34166-D73E-E311-A66F-0025904B26CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/94019C04-DD3E-E311-A2AD-002481E0D7D8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/940719D2-C83E-E311-8994-0025901AF588.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/943A6F35-EB3E-E311-8935-C860001BD87E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/946B2A3C-DA3E-E311-8AE4-02163E00BD46.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/94790AEE-B73E-E311-9C7C-BCAEC518FF74.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/94854686-F03E-E311-97A0-003048F1E130.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/961CCEFE-063F-E311-8CB6-0025904B2C5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96601038-013F-E311-88C3-003048F24342.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96646A78-DB3E-E311-AD3C-0025B32035DE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/966719C0-CD3E-E311-BD2C-003048C9C952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9668812D-F73E-E311-A751-003048F1B834.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96B32ABB-C03E-E311-AC13-003048F1BFDE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96B6FE74-EE3E-E311-ACE4-02163E00A48E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96C62E44-163F-E311-827D-02163E008ECF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96CF755E-CA3E-E311-8606-02163E008EB9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/96D08063-E63E-E311-BBCB-003048F009CA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9838D1E4-B43E-E311-B5D3-003048CFAD10.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/983E8E3F-143F-E311-AEDB-003048F1BF16.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/985D376B-F33E-E311-93B0-0025B32035DA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9868C5A4-0C3F-E311-BE64-02163E00C564.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/98A38C3C-F53E-E311-8F63-003048F0E7A4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/98B381F1-F43E-E311-92D4-003048F23774.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/98C52826-DF3E-E311-98F7-02163E007967.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9A1C41A4-EF3E-E311-9AE5-02163E00A101.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9A4977EB-173F-E311-915C-002590494D1A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9A6B3B7E-F93E-E311-BFB3-02163E008CD7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9A7B4F2C-CD3E-E311-8A91-0025901D6286.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9A82170C-0A3F-E311-8287-003048F16B9A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9ABD5E6B-053F-E311-8027-003048CF93C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9AC69298-DC3E-E311-ABB3-003048F02C66.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9AD3A1DB-FA3E-E311-A9A3-02163E008F6D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9AFB15AC-C53E-E311-971D-BCAEC5329713.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C0A8738-FD3E-E311-9BC3-003048F1E1B2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C17689D-B93E-E311-B28D-02163E00BA3A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C562803-E13E-E311-B650-003048F23888.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C5FCEC8-F83E-E311-B53A-003048F0E39E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C889FFB-073F-E311-A2AC-003048FEAECC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9C9B2AE8-E13E-E311-85CB-003048F1B918.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9E09F6CF-F03E-E311-99F7-02163E008DB7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9E2237A0-E43E-E311-B3F4-02163E00BF94.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9E4D9560-FF3E-E311-8291-02163E00CAB1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9E589CAB-ED3E-E311-A40A-003048CFAE10.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9E686F9B-D43E-E311-A3F3-003048F11D58.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9EA259BB-173F-E311-9865-003048F01076.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9EA2F332-DE3E-E311-AA12-02163E0079B3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9EB703CB-EE3E-E311-93E1-02163E00BFAB.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9EEDF43D-E63E-E311-861F-02163E00ACFF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/9EFBE03B-FD3E-E311-8777-02163E00A364.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A0250742-E63E-E311-9B9E-02163E00BD28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A0582E9C-133F-E311-8563-C860001BD85C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A0604652-B13E-E311-9841-003048CF6AE0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A061E2C4-053F-E311-88CF-5404A63886C0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A0768636-C23E-E311-B269-003048FE9C68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A219905C-ED3E-E311-8D7F-003048F23A76.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A266F5A6-133F-E311-8EB7-0025904B2012.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A29DF81A-ED3E-E311-81A5-02163E008EE4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A2AE7B1A-D73E-E311-84AB-003048F01082.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A2C00C96-E03E-E311-AB9C-02163E00BCF8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A2F0B936-C23E-E311-B414-02163E008D96.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A4596EA4-BC3E-E311-9699-02163E00BD59.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A47CE3D7-183F-E311-943C-003048F179B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A4D6AD32-C23E-E311-83E8-003048FEB8EA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A4F32322-F93E-E311-9FDF-003048F0E5CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A4F453A3-E23E-E311-8880-C860001BD86A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6016FCF-EB3E-E311-9651-0025901AF58A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6134B62-103F-E311-96CD-02163E00CDD4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A62308F2-EA3E-E311-B080-C860001BD83A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6675CC2-CD3E-E311-9CB3-003048F17A86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6A1AA39-E23E-E311-830B-003048F0297C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6DEE808-C53E-E311-BB58-02163E00A0F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6EBD1A3-E83E-E311-8938-003048F17C14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A6EC0B2E-F13E-E311-9A2B-003048F1E130.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A814EE24-F83E-E311-A1CA-02163E00A104.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A8309627-CD3E-E311-A7BC-02163E008DA9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A8389D47-F83E-E311-9381-02163E00ADD1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A839DADA-E03E-E311-9289-003048FEADBC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A84A46ED-E73E-E311-8345-003048F1DB82.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A86CD9CC-D03E-E311-937E-003048F1749C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A871F0A0-033F-E311-83B3-02163E00CD59.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A89B7182-FE3E-E311-A8D4-003048F1C9BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A89BA550-C53E-E311-A1CB-C860001BD93C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A8E0DFE4-FC3E-E311-ACBB-00237DDC5C38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A8FBBAA2-113F-E311-80C4-02163E008D93.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/A8FBCD1E-CE3E-E311-B93A-02163E008DA7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AA069760-063F-E311-B4DC-003048FEB9FA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AA0CBA15-0A3F-E311-BDAF-003048FEAE14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AA4BF11C-C43E-E311-B09E-003048F239A2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AA513F3F-DA3E-E311-BC19-02163E00CCE8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AAB12955-103F-E311-8D2E-002481E0D20A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AAFC7B0F-B43E-E311-A088-02163E008D87.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC066E69-ED3E-E311-82B9-003048FEB8F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC2742CF-CE3E-E311-9FB5-02163E008F98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC3ED91B-933E-E311-B399-003048FE9C68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC63DB25-DF3E-E311-839A-0025B32440D4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC74CF5F-D73E-E311-8BED-003048F1BF38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC81DFDE-CC3E-E311-8659-02163E00A054.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AC94A9CE-F03E-E311-BF9E-02163E00A48E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ACC9306A-CB3E-E311-B7F5-003048CEFCFA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ACD5DB42-0E3F-E311-BF37-02163E00C565.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ACDB908A-FC3E-E311-96C0-02163E007A1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE1EDA85-D73E-E311-AD7E-02163E00BA18.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE1F1CC8-103F-E311-A7D9-02163E00C565.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE52265C-083F-E311-864B-02163E008EE4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE56CBF5-063F-E311-B401-00237DDC5C38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE6866AD-ED3E-E311-944E-003048FEB8D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE98424A-EF3E-E311-8FB5-003048F02970.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AE99CB79-F93E-E311-9BBC-003048F1C4AA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/AEEFC84E-AE3E-E311-8BB1-003048FEAF84.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B006690A-C13E-E311-AF10-02163E00A0FF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B038A5C8-B23E-E311-81BD-02163E00CABE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B05B9874-E13E-E311-B12F-003048CBA51A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B07BE398-E33E-E311-A106-003048CF655E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B09443A1-CB3E-E311-BDE3-D8D385FF6AE2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B098A931-F93E-E311-8780-0030486730E6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B0CD4B79-FD3E-E311-A658-02163E00C488.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B2546CFB-EA3E-E311-93A3-003048CFAE3A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B27F48EB-023F-E311-85CF-003048F1BFB6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B2BFF66F-DB3E-E311-8401-003048FEB9FA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B2CF14E2-CC3E-E311-89F8-003048F1C564.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B400C728-CE3E-E311-AA52-02163E00A182.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B42D6CAB-E23E-E311-A630-003048F1BFDE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4424409-BB3E-E311-9A06-02163E00C794.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B44C42AD-F53E-E311-81DC-003048FEAE14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B466A27D-F13E-E311-B39E-003048F009D8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4831EDF-143F-E311-95F0-003048FEACE0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B483A9B1-DA3E-E311-A656-02163E00CAB6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B487EF26-163F-E311-B557-02163E00B521.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4BE3C9F-FB3E-E311-BDE1-0025B3203778.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4C0EB15-CA3E-E311-95B4-02163E008F8D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4C566D5-DF3E-E311-8FD9-0025B3203836.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4D303CF-F43E-E311-87F7-002481E94B30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4E5E9E0-D13E-E311-8D49-02163E00BD2E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B4EE2909-CA3E-E311-B2E7-5404A63886EF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B6753B37-013F-E311-8DC0-C860001BD89A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B6C6C18C-FC3E-E311-B03D-C860001BD89A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B6E7271E-DF3E-E311-8284-003048F0E594.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B83E8154-003F-E311-9DB4-485B39897227.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B842A6B4-F43E-E311-A4ED-003048F11C28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8439B7E-DF3E-E311-9D75-003048F009CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8881CC1-E53E-E311-82EF-C860001BD83A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B89F6C7F-F73E-E311-B9C5-0025901D6284.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8AF3641-013F-E311-87EE-0025901AF548.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8BF166C-AA3E-E311-AA3B-002590494FEA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8E99999-DE3E-E311-92DC-02163E008DA6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/B8F27D50-FE3E-E311-B06A-02163E00BF88.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA14DEEE-EA3E-E311-A8FE-003048CFAE10.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA1E17D0-D03E-E311-8F81-002481E0DB94.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA225631-CD3E-E311-87EB-02163E00A0ED.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA25A8BE-033F-E311-A247-003048CF97B2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA2F2B37-B83E-E311-BA3D-003048FEAF2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA3F0778-FE3E-E311-B25F-003048F02974.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA5842EA-BA3E-E311-B244-02163E0079DA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BA9C437C-D93E-E311-9104-003048F17C82.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BAC05623-E23E-E311-99B3-02163E00BA30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BAC4A820-D03E-E311-8009-02163E00BBF1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BACF38BA-E63E-E311-9F59-003048FE4C1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BAF07E8D-DE3E-E311-8BB6-003048FEAF50.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BC75DAF8-CC3E-E311-A8EE-003048F17A86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BC81ED9A-D43E-E311-A509-C86000151BEE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BE1EBC1B-FF3E-E311-A105-003048FEAFA0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BE7B87CB-FE3E-E311-BFDE-003048F1C58E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BE8709D7-143F-E311-A555-002481E0D1F2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BEAE9AEC-DD3E-E311-B55E-003048CF8CD4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BEB940F6-133F-E311-AEDA-003048CFB166.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BECA69D1-033F-E311-9C06-02163E00BA37.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/BEF94D15-EE3E-E311-AA2C-02163E0079B2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C000AC41-143F-E311-A893-02163E00A0C7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C002ACF4-D23E-E311-9F53-D8D385FF6532.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C058E1A0-DC3E-E311-8654-003048F1C58E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C088821D-EE3E-E311-8B4F-02163E00BFFD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C0C808AE-CE3E-E311-B43B-0025901AB77A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C0D69A52-CB3E-E311-B3ED-0025901D6250.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C20EABCB-163F-E311-9437-002481E0D216.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C214A054-063F-E311-A3FD-002590496FE2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C216C39D-E83E-E311-8BFE-02163E00B51B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C21A1065-A33E-E311-AD7D-003048F17496.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C22645AD-0F3F-E311-BFCD-02163E00CD74.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C227226D-033F-E311-82D6-003048F0E1CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C24DC6DC-F63E-E311-A460-02163E00A3C1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C24EDE9E-C63E-E311-A0E6-003048F23FE2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C2AE8822-C03E-E311-82BD-0025901D5CBC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C2B57F94-133F-E311-BB99-02163E00AFF3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C2D81EAA-F53E-E311-944D-0025B3244016.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C2DDA906-FA3E-E311-AF38-003048F0E31A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4027146-E03E-E311-A4F5-02163E00CCF4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4087A89-E33E-E311-8E52-00215AEDFEF2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C43974C5-E03E-E311-83FA-02163E00CBD4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C45F7F72-9E3E-E311-B969-0025904B57A2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4A29F31-D13E-E311-B538-003048F1DB40.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4A683EA-023F-E311-AA64-003048FEB956.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4AEE98C-FC3E-E311-B77E-5404A640A639.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4D43FD3-B23E-E311-AD33-003048F01068.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C4FD27C4-053F-E311-A7E2-0025901AF1D6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C60CEC00-D13E-E311-9249-02163E00BA21.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C61CF8E6-D83E-E311-A385-003048F17C6A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C65A15CB-D03E-E311-AC7F-02163E0079A9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C6684651-C53E-E311-9CC3-003048F01090.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C68DEE43-D83E-E311-8F7A-003048F1C576.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C6CCA088-CA3E-E311-AECB-02163E008CE3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C80F7CA2-D13E-E311-9E91-02163E008EBE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C82D97DA-143F-E311-A730-003048FEB9C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C84A2506-F33E-E311-A133-02163E0079BC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8507A8B-0D3F-E311-9A89-003048FEAE14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C86B76C5-D03E-E311-B00B-02163E00ABDD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C86C8045-F53E-E311-99A5-02163E00ADD1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8906F9F-0F3F-E311-BEAF-BCAEC518FF74.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C892A302-DB3E-E311-B148-02163E00BA2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C89BAB8B-A53E-E311-966E-02163E008D7B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8A526D0-A93E-E311-B637-02163E008D68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8AA33B6-ED3E-E311-8179-003048FEB98E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8CC0661-F83E-E311-AB17-003048F1BF76.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8D6085A-F33E-E311-BF50-3085A9104443.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8DEC794-D83E-E311-9E59-0025901AF6AC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8E8E415-0D3F-E311-9523-0025904B2016.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/C8F65074-B73E-E311-82EE-02163E008EC1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA12929A-DC3E-E311-91BA-02163E007A33.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA19732B-C83E-E311-A2A8-003048F16B9C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA25D4F8-E23E-E311-983F-02163E00B1BD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA29D7B5-A13E-E311-A910-02163E00CD5B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA2A1EA7-033F-E311-BB91-02163E00CADE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA3D4E5F-D63E-E311-B48A-0025901D5C86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA58B22B-E03E-E311-9DF3-02163E00B787.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CA61A322-AE3E-E311-872D-003048FEAF50.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC095364-D63E-E311-A383-003048FEAD24.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC20037B-FD3E-E311-8AC0-003048CF94A6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC28E97E-F73E-E311-B27F-0025B3203710.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC2A201F-CE3E-E311-9955-02163E008D7E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC2B2A29-D73E-E311-9C64-02163E00BA38.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC5BB725-043F-E311-98D8-02163E008DB2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC785741-EA3E-E311-9301-003048F2385A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CC986D67-FC3E-E311-B86D-02163E00B1A8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CCAF87F6-D23E-E311-98C3-003048F1DE4A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CCE01B27-0A3F-E311-98B2-BCAEC5329708.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CCFBD5D2-103F-E311-A4AC-02163E00BC40.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CE4DD5A3-C93E-E311-A2E0-02163E00CDDB.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CE57BC22-C83E-E311-9729-003048F1C7F4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CE5BD8D3-F13E-E311-AB39-003048CFB3B0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CE9B7E14-D53E-E311-99C9-02163E00CD5B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CEA6788E-F63E-E311-A0DE-003048FEAEF0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CEA730A7-E83E-E311-9063-003048F1BF9A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/CEEA70CB-B93E-E311-A219-02163E00C016.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D023179A-E63E-E311-857D-02163E00CDE1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D02BC2A7-DF3E-E311-85D2-003048FE4C1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D08FC579-003F-E311-B3C4-003048FEB956.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D095CA2F-F43E-E311-8126-02163E00C483.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D0D6F3D8-CC3E-E311-B0D7-5404A63886D2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D20BE0B5-123F-E311-A89E-003048F1CA12.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D2DD111F-FB3E-E311-B7DF-02163E00BFCF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D2E14224-DF3E-E311-8CB3-3C4A9279BB16.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D2EF3320-CB3E-E311-A864-02163E00CE1F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D2F2EBD0-C33E-E311-B4DD-02163E00CD19.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D2FAF909-103F-E311-B49F-02163E00B557.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D46F7868-CB3E-E311-A09A-02163E008DB1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D477C7D3-FE3E-E311-8AA6-003048FEC15C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D4F7EA0F-D43E-E311-B384-02163E00A116.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D6289886-BE3E-E311-8ECC-0030486780F8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D64563F6-063F-E311-83A0-0025904B2C5C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D6796742-EC3E-E311-80E7-02163E008EAD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D6AA9670-FE3E-E311-B236-003048F1B952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D6E19434-053F-E311-AAB9-02163E008CD4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D6FA9674-C33E-E311-BC04-003048CEA05C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D8005490-C93E-E311-BD52-02163E008CCD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D8215581-153F-E311-99BD-02163E008F35.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D84096C2-E73E-E311-A17E-C860001BD89A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D84840F1-013F-E311-81E2-0025904B5B2C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D89B28B5-163F-E311-A5E9-003048F2384C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D8D4DC4F-F33E-E311-A954-0025B3203886.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D8F02C2D-E63E-E311-B9EE-02163E00CAA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/D8F5E5F6-EA3E-E311-8210-02163E00CDE1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DA40B0AF-013F-E311-B502-003048F1DBAE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DA54BE76-F03E-E311-B7F9-003048F17F00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DA858291-0D3F-E311-8058-0025904B2016.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DAA89086-B53E-E311-8F66-003048F11D96.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DAB5B98B-FC3E-E311-B7E4-003048F1C7F4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DAF5DB73-D53E-E311-9AEB-0025904B2CAE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DC19DBF9-013F-E311-94C0-02163E008F7F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DC54638C-E33E-E311-A15E-003048F1749C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DC713676-C33E-E311-8A51-003048F0E3E0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DCA94B3D-183F-E311-A582-002590494C44.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DCECA8C6-163F-E311-834D-003048F17C4A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DCF513A0-E23E-E311-8C0E-003048F1C590.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE0F86B6-F23E-E311-96F0-003048F00B94.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE1D3F7B-D53E-E311-A85B-003048FE4C1E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE364DB5-CE3E-E311-B0F2-C860001BD8CE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE37006A-C03E-E311-AB19-003048CFB3A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE7B5203-DC3E-E311-B65C-003048CF92D0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DE7D88F4-073F-E311-8811-C860001BD96A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DEA17A8A-FC3E-E311-B176-003048F1BF98.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DEAD2D08-ED3E-E311-AF97-02163E00B51B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/DED12B3F-DA3E-E311-8B83-02163E00CB4D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E002B627-D53E-E311-9174-003048F23FD2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E0709171-CE3E-E311-B8C4-C860001BD964.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E07AA7DB-F83E-E311-88C2-02163E008DB6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E0909EC0-0B3F-E311-A794-003048FEB956.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E09FB7EE-DD3E-E311-9239-003048F1BFB6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E0AE8EA8-B63E-E311-95DA-00237D43EDC6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E0D4F141-E43E-E311-97FF-02163E00CD8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E2457DCB-103F-E311-B106-02163E00C377.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E245A886-023F-E311-9ADF-003048F2367C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E25E494C-AB3E-E311-8FF2-003048FEAE14.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E2DD1D4E-E73E-E311-8497-02163E00B74A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E40395C9-E53E-E311-AB76-C860001BD958.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E414793C-E23E-E311-B80F-003048FEC0E4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E4A2E7CD-FE3E-E311-8DCB-003048F0E39C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E4D5F434-D53E-E311-A8B0-003048F1C9C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E4FD485E-F33E-E311-845B-003048F1C774.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E60AA82B-E03E-E311-B133-02163E0079BC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E60E5AB9-CE3E-E311-B4F8-003048CBAED4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E613BCD8-FC3E-E311-8C4A-02163E008CD2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E64762BB-AE3E-E311-8932-003048F00BA0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E663A37B-043F-E311-B8CC-02163E008DB7.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6681798-F63E-E311-B8B5-02163E00C48A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6913BED-CC3E-E311-B5EB-003048CF677C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E69C6FAD-AA3E-E311-B473-003048F16F90.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6B4C236-153F-E311-88D0-02163E008D7F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6D287F3-013F-E311-81C6-02163E00CE28.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6EA48AE-FF3E-E311-8C04-003048F1B952.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6ECEA0A-F53E-E311-8D70-02163E00C482.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E6F1EBEA-F53E-E311-B03A-0025901AF660.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E82553AD-F53E-E311-B84E-02163E00A104.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E82F8ED2-EA3E-E311-A2CC-02163E00CD88.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E8BADA48-103F-E311-B2BA-00237DDBE8CC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E8E49B74-E53E-E311-8326-02163E00CACA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/E8E88007-DD3E-E311-9867-003048F1BFAA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EA1AEF07-AE3E-E311-9A0B-003048F1C834.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EA71DB7C-AF3E-E311-ACA9-003048FEAF30.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EA9A0E71-093F-E311-9365-003048FEB9F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EAA3A785-D03E-E311-BD6F-02163E00BB5D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EAB0B9F9-FB3E-E311-B821-C860001BD8B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EAEB41AE-ED3E-E311-84D1-003048CFAE00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EAFD419A-173F-E311-82B7-02163E00CD76.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC0873C3-EC3E-E311-A9CD-5404A63886C3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC09EC74-D53E-E311-A6D5-02163E00AF8E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC1728E4-023F-E311-B0E3-0030489455EC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC17670B-CA3E-E311-B68F-5404A63886AF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC1C70D3-DF3E-E311-BF2F-003048CF9B4C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC3DE824-093F-E311-A7AE-003048F11C58.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC6F9734-E63E-E311-A168-02163E00B51B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EC87F0E6-EA3E-E311-9A61-02163E00CAD2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ECC21F0B-D53E-E311-96DE-02163E00CE1F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ECDCF65D-FA3E-E311-BE0D-02163E00CDA0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ECE062EE-F43E-E311-BEED-003048CFC644.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/ECF06B6F-D33E-E311-B157-02163E00AC0B.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EE04DBC4-163F-E311-8874-02163E00A0ED.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EE4AFD6B-EE3E-E311-9FE4-003048FEB8F6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EE5CD312-0A3F-E311-B139-003048F236DA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EE6E4525-B53E-E311-BEF5-003048F17C24.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EE7F4B07-073F-E311-B5E8-02163E008D69.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/EEE51BC9-F03E-E311-9C90-0025901D5E00.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F013DF90-C23E-E311-B26D-003048F1DB84.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F03B7239-183F-E311-BEFB-02163E00BB60.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F03DA03C-0D3F-E311-90E9-0025904B2CB2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F04C72AA-EB3E-E311-B95A-02163E00B1BD.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F05664A4-0E3F-E311-8638-02163E00A4E3.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F05929B7-F73E-E311-9D88-02163E00AE25.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F07F5517-FF3E-E311-91E6-003048F17C16.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F0BAC61C-0C3F-E311-B597-003048F010A0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F0C9E6C3-DB3E-E311-BF77-003048CF93C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F215B077-ED3E-E311-B7AA-0025901D5D78.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F21DE90C-DB3E-E311-964E-02163E00AFE5.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F2351C2F-EB3E-E311-A9D8-003048F1C9BA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F246DC97-FC3E-E311-BE5F-3C4A9279BB16.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F24B5CE3-EA3E-E311-BC6B-003048FEB966.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F2847D9B-0F3F-E311-BA00-02163E00B76D.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F285BFDA-F63E-E311-96D9-02163E008DA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F4211E4C-D43E-E311-BB30-003048F01138.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F43D4585-D53E-E311-A60A-003048F024B8.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F458BD7A-F73E-E311-9754-5404A63886A9.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F45CD461-EB3E-E311-8E2B-02163E00BA36.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F493043B-E23E-E311-A7EE-003048CFCE86.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F4B09609-DD3E-E311-ABDF-003048F1CA2A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F4CD2CE9-EA3E-E311-95D9-003048F00BB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F4FEC017-ED3E-E311-8619-02163E00CC85.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F6047905-DB3E-E311-AA92-02163E00C7B1.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F62B2CB0-E23E-E311-945E-003048F23D56.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F6418ABB-033F-E311-8CFF-D8D385FF5C6A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F65BF8AB-123F-E311-9FAA-02163E00A181.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F65CF629-AF3E-E311-BC07-003048F1183A.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F6C39A3C-D23E-E311-9AB0-02163E00CD8C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F84A3938-F53E-E311-BAF1-003048F1C590.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F887AEA3-DC3E-E311-A2F6-BCAEC518FF62.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F8AD7BE3-EF3E-E311-86F4-5404A6388699.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F8CB92B5-AC3E-E311-AD7A-003048F1C46C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/F8EE3139-F83E-E311-A6C6-02163E00C010.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA0510DB-C83E-E311-B47C-02163E00CCBC.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA547F55-EF3E-E311-BC06-02163E008CD2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA62F1D5-A83E-E311-8027-002590494E40.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA747598-C33E-E311-8E32-02163E00B1AF.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA759C6A-D33E-E311-8910-02163E00B76C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FA9C92B5-F23E-E311-81CC-0025901E3FB0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FAAB0C66-E63E-E311-BE0B-02163E00A133.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FAADB66B-DF3E-E311-A0D0-003048F0E5C2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FAB5A6EB-E43E-E311-BDB5-02163E00BD6F.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FADB7E74-F93E-E311-BEC2-003048CF9ADE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FAFEF106-0D3F-E311-9E27-02163E008D81.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC2B8C68-AB3E-E311-AE90-02163E00CD88.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC303700-DC3E-E311-B208-003048F2385E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC39CF99-D33E-E311-9E44-003048F1C9C6.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC5280A3-E13E-E311-B8E6-003048F0E1BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC62CBD6-D03E-E311-94A1-02163E00ADA4.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FC7AD5D0-C83E-E311-8302-0025B32441FA.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FCB56395-EF3E-E311-A6C2-C86000151B9C.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FCF82001-D93E-E311-808D-02163E00CDF0.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE32C1B1-B03E-E311-9F97-02163E008D67.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE67AFE7-CA3E-E311-9BB4-003048F2377E.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE6C2EA1-E23E-E311-A1C3-C860001BD832.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE776BAE-C43E-E311-A5FB-02163E00CD19.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE7E53B5-FB3E-E311-A9C8-02163E0079BE.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FE886AEE-DD3E-E311-96A4-003048F23D68.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FEA0DB33-E73E-E311-AE51-02163E00CAD2.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FEAC91A6-073F-E311-85AA-003048F16F46.root', 
        'root://eospublic.cern.ch//eos/opendata/cms/Run2011A/Jet/AOD/12Oct2013-v1/20000/FECC2527-EC3E-E311-9549-02163E0079A1.root' ) ),
    lumisToProcess = cms.untracked.VLuminosityBlockRange( ("160431:19-160431:218", "160577:254-160577:306", "160578:6-160578:53", "160578:274-160578:400", "160871:68-160871:208", 
        "160872:1-160872:9", "160872:25-160872:35", "160872:38-160872:55", "160873:1-160873:147", "160874:1-160874:51", 
        "160874:97-160874:113", "160939:1-160939:123", "160940:1-160940:79", "160942:1-160942:12", "160943:1-160943:54", 
        "160955:1-160955:130", "160955:133-160955:138", "160955:140-160955:151", "160955:153-160955:154", "160955:156-160955:172", 
        "160955:175-160955:201", "160955:204-160955:206", "160956:2-160956:65", "160957:1-160957:953", "160998:2-160998:252", 
        "161008:2-161008:77", "161016:2-161016:300", "161103:2-161103:100", "161106:2-161106:26", "161107:2-161107:29", 
        "161113:2-161113:24", "161116:2-161116:11", "161117:2-161117:24", "161119:1", "161119:7-161119:58", 
        "161119:69-161119:108", "161119:115-161119:141", "161119:145-161119:173", "161119:179-161119:210", "161156:1-161156:14", 
        "161176:1-161176:31", "161217:37-161217:753", "161222:1-161222:97", "161223:1-161223:375", "161224:1-161224:2", 
        "161233:33", "161310:39-161310:116", "161311:1-161311:554", "161311:559-161311:649", "161312:1-161312:826", 
        "161312:835-161312:1027", "162762:1-162762:102", "162765:1-162765:40", "162803:60-162803:139", "162808:1-162808:51", 
        "162811:1-162811:340", "162822:73-162822:307", "162825:1-162825:184", "162826:1-162826:24", "162828:1-162828:85", 
        "162909:54-162909:290", "163046:1-163046:133", "163046:135-163046:238", "163069:73-163069:452", "163069:468-163069:633", 
        "163071:1-163071:161", "163078:1-163078:23", "163232:110-163232:149", "163233:1-163233:283", "163234:1-163234:66", 
        "163235:1-163235:461", "163237:1-163237:213", "163238:9-163238:15", "163252:60-163252:137", "163255:1-163255:359", 
        "163255:412-163255:844", "163255:846", "163255:848-163255:977", "163261:1-163261:3", "163261:10-163261:126", 
        "163270:1-163270:76", "163270:79-163270:96", "163270:99-163270:475", "163270:479-163270:527", "163270:529-163270:685", 
        "163270:695-163270:928", "163286:112-163286:401", "163289:1-163289:388", "163296:59-163296:230", "163296:232-163296:585", 
        "163297:1-163297:219", "163300:1-163300:616", "163301:1-163301:192", "163302:1-163302:190", "163332:43-163332:118", 
        "163332:224-163332:264", "163332:266-163332:599", "163332:601-163332:639", "163332:641-163332:801", "163333:1-163333:106", 
        "163334:1-163334:35", "163334:37", "163334:156-163334:556", "163337:1-163337:18", "163337:27-163337:201", 
        "163337:203-163337:426", "163337:434-163337:461", "163338:1-163338:164", "163339:1-163339:172", "163340:1-163340:488", 
        "163358:39-163358:63", "163369:1-163369:94", "163370:1-163370:147", "163371:1-163371:107", "163371:148-163371:356", 
        "163372:1-163372:52", "163374:1-163374:599", "163374:603-163374:863", "163375:1-163375:10", "163376:1-163376:20", 
        "163376:22-163376:246", "163378:1-163378:81", "163378:89-163378:179", "163378:181-163378:272", "163378:306-163378:615", 
        "163385:52-163385:240", "163385:244-163385:405", "163387:1-163387:256", "163402:37-163402:250", "163402:271-163402:560", 
        "163402:581-163402:582", "163402:586-163402:801", "163475:30-163475:295", "163476:1-163476:94", "163476:98-163476:212", 
        "163478:1-163478:70", "163479:1-163479:175", "163480:1-163480:92", "163480:96-163480:188", "163480:190-163480:191", 
        "163481:1-163481:72", "163481:74-163481:77", "163481:79", "163482:1-163482:27", "163482:48", 
        "163483:1-163483:57", "163582:1-163582:22", "163583:1-163583:10", "163583:12-163583:63", "163583:65-163583:92", 
        "163583:96-163583:155", "163583:157-163583:173", "163583:175-163583:205", "163584:1-163584:56", "163585:1-163585:32", 
        "163586:1-163586:75", "163587:1-163587:52", "163588:1-163588:8", "163588:10-163588:446", "163589:1-163589:49", 
        "163589:51-163589:160", "163596:1-163596:29", "163630:76-163630:164", "163630:176-163630:185", "163655:15-163655:23", 
        "163657:1-163657:140", "163658:1-163658:3", "163659:1-163659:374", "163659:376-163659:650", "163659:652-163659:705", 
        "163660:1-163660:74", "163661:1-163661:17", "163662:1-163662:154", "163663:1-163663:106", "163663:109-163663:246", 
        "163664:1-163664:119", "163664:121-163664:178", "163668:1-163668:53", "163668:57-163668:136", "163668:140-163668:213", 
        "163738:34-163738:311", "163757:1-163757:40", "163758:1-163758:17", "163758:19-163758:220", "163758:222-163758:224", 
        "163758:236-163758:276", "163758:283-163758:374", "163758:376-163758:466", "163758:468-163758:591", "163759:1-163759:60", 
        "163759:62-163759:72", "163759:74-163759:456", "163759:458-163759:461", "163759:463-163759:482", "163759:504-163759:510", 
        "163760:1-163760:162", "163760:165-163760:340", "163761:1-163761:203", "163763:1-163763:79", "163765:1-163765:321", 
        "163795:10-163795:34", "163795:36", "163795:38-163795:43", "163796:1-163796:182", "163817:50-163817:140", 
        "163817:154-163817:205", "163817:216-163817:295", "163817:305-163817:346", "163817:358-163817:457", "163817:561-163817:603", 
        "163817:618-163817:966", "163869:79-163869:123", "165088:107-165088:266", "165098:124-165098:187", "165098:190-165098:193", 
        "165098:195-165098:248", "165098:250-165098:254", "165098:256-165098:331", "165098:333-165098:367", "165098:369-165098:415", 
        "165099:1-165099:105", "165102:1-165102:185", "165103:1-165103:440", "165120:82-165120:97", "165121:1-165121:466", 
        "165205:80-165205:248", "165208:1-165208:101", "165364:45-165364:111", "165364:114-165364:147", "165364:160-165364:807", 
        "165364:809-165364:1220", "165364:1260-165364:1301", "165402:1-165402:28", "165415:58-165415:85", "165415:88-165415:640", 
        "165415:643-165415:707", "165415:712-165415:777", "165415:780-165415:1356", "165415:1360-165415:1383", "165467:39-165467:708", 
        "165472:1-165472:184", "165472:186-165472:882", "165486:37-165486:102", "165487:1-165487:151", "165506:54-165506:170", 
        "165514:72-165514:244", "165514:246-165514:270", "165514:283-165514:560", "165514:562-165514:567", "165525:1-165525:31", 
        "165537:1-165537:20", "165537:22-165537:295", "165548:1-165548:363", "165548:365-165548:381", "165548:384-165548:589", 
        "165558:1-165558:62", "165567:54-165567:109", "165567:114-165567:309", "165567:315-165567:631", "165570:1-165570:2", 
        "165570:5-165570:83", "165570:88-165570:207", "165570:209-165570:351", "165570:355-165570:942", "165570:944-165570:946", 
        "165617:26-165617:52", "165617:54-165617:143", "165617:145-165617:288", "165620:14-165620:19", "165633:56-165633:62", 
        "165633:64", "165633:66-165633:129", "165633:133-165633:317", "165633:319-165633:500", "165970:67-165970:263", 
        "165970:266-165970:329", "165970:331-165970:335", "165993:71-165993:873", "165993:879-165993:1660", "165993:1665-165993:1697", 
        "166011:1-166011:81", "166011:83", "166033:35-166033:53", "166033:59-166033:330", "166033:336-166033:355", 
        "166033:360-166033:444", "166033:450-166033:606", "166033:613-166033:707", "166033:713-166033:1233", "166034:1-166034:109", 
        "166034:115-166034:228", "166034:234-166034:307", "166049:53-166049:86", "166049:88-166049:236", "166049:242-166049:674", 
        "166149:1-166149:2", "166150:1-166150:99", "166150:101-166150:116", "166161:38-166161:120", "166161:122-166161:123", 
        "166161:126", "166163:1-166163:12", "166163:14-166163:33", "166164:1-166164:32", "166164:34-166164:40", 
        "166346:48-166346:210", "166346:212-166346:215", "166374:46-166374:64", "166374:66-166374:188", "166380:1-166380:367", 
        "166380:373-166380:711", "166380:715-166380:1400", "166380:1406-166380:1809", "166408:67-166408:283", "166408:291-166408:947", 
        "166408:953-166408:1236", "166429:33-166429:89", "166438:32-166438:85", "166438:87-166438:856", "166438:858-166438:866", 
        "166462:78-166462:102", "166462:108-166462:317", "166462:323-166462:526", "166486:54-166486:75", "166486:80-166486:95", 
        "166486:97-166486:174", "166502:43-166502:78", "166502:83-166502:109", "166512:42-166512:430", "166512:432-166512:487", 
        "166512:491-166512:605", "166512:611-166512:1279", "166512:1281-166512:1818", "166512:1821-166512:1862", "166512:1868", 
        "166512:1870-166512:1871", "166512:1873-166512:1874", "166514:1-166514:455", "166514:460-166514:464", "166530:43-166530:63", 
        "166554:46-166554:218", "166554:224-166554:287", "166554:290-166554:317", "166554:320-166554:595", "166554:597-166554:730", 
        "166554:732-166554:734", "166554:736", "166563:1-166563:276", "166563:492-166563:748", "166565:1-166565:147", 
        "166565:153-166565:312", "166565:316-166565:467", "166565:469-166565:898", "166699:55-166699:234", "166699:240-166699:415", 
        "166699:421-166699:477", "166699:483-166699:677", "166699:681-166699:912", "166701:1-166701:13", "166701:16-166701:319", 
        "166701:324-166701:506", "166701:513-166701:551", "166701:557-166701:672", "166701:681-166701:705", "166701:712-166701:724", 
        "166701:731-166701:757", "166701:764-166701:777", "166701:783-166701:792", "166763:46-166763:168", "166763:174-166763:650", 
        "166781:41-166781:111", "166781:115", "166781:117-166781:233", "166781:236-166781:253", "166781:255-166781:382", 
        "166782:1-166782:569", "166784:1-166784:114", "166784:119-166784:276", "166784:281-166784:365", "166787:1-166787:55", 
        "166787:60-166787:127", "166787:132-166787:364", "166839:43-166839:173", "166839:178-166839:297", "166839:299-166839:302", 
        "166841:1-166841:845", "166841:851-166841:876", "166841:882-166841:977", "166841:984", "166841:988-166841:992", 
        "166841:998-166841:1015", "166842:1-166842:170", "166859:62-166859:418", "166859:421", "166859:423", 
        "166860:1-166860:21", "166861:1-166861:6", "166861:8-166861:13", "166864:1-166864:29", "166864:31-166864:77", 
        "166864:79-166864:99", "166864:102-166864:119", "166864:125-166864:247", "166864:249-166864:307", "166864:311-166864:365", 
        "166864:367-166864:374", "166864:378-166864:454", "166864:478-166864:537", "166888:56-166888:90", "166888:93-166888:154", 
        "166888:156-166888:394", "166888:398-166888:470", "166889:1-166889:73", "166889:79-166889:228", "166890:1-166890:441", 
        "166894:1-166894:190", "166895:1-166895:66", "166895:72-166895:597", "166895:599-166895:603", "166911:58-166911:76", 
        "166911:81-166911:104", "166922:1-166922:39", "166922:41-166922:105", "166922:110-166922:340", "166922:345-166922:418", 
        "166922:423-166922:747", "166922:752-166922:769", "166922:773", "166923:1-166923:382", "166923:389-166923:470", 
        "166946:41-166946:72", "166946:75-166946:201", "166950:1", "166950:8-166950:31", "166950:36-166950:210", 
        "166950:216-166950:877", "166950:883-166950:950", "166950:956-166950:1012", "166950:1018-166950:1321", "166950:1327-166950:1345", 
        "166950:1347-166950:1438", "166960:1-166960:137", "166960:143-166960:166", "166966:1-166966:238", "166967:1-166967:220", 
        "167039:20-167039:92", "167039:98-167039:228", "167041:1-167041:336", "167041:339-167041:391", "167041:396-167041:462", 
        "167041:467-167041:663", "167043:1-167043:125", "167043:130-167043:235", "167078:40-167078:174", "167098:62-167098:90", 
        "167098:92-167098:162", "167098:167-167098:406", "167098:448-167098:461", "167102:1-167102:42", "167102:48-167102:233", 
        "167102:235-167102:317", "167102:323-167102:430", "167103:1-167103:94", "167151:1-167151:42", "167281:18-167281:140", 
        "167281:146-167281:315", "167281:317-167281:593", "167282:1-167282:441", "167284:1-167284:315", "167284:320-167284:346", 
        "167284:356-167284:395", "167284:399-167284:474", "167284:476-167284:1157", "167284:1160-167284:1628", "167284:1633-167284:1644", 
        "167551:56-167551:190", "167551:196-167551:471", "167673:210-167673:236", "167673:239-167673:305", "167673:309-167673:418", 
        "167673:423-167673:447", "167674:1-167674:345", "167675:1-167675:129", "167675:133-167675:299", "167675:301-167675:617", 
        "167675:690-167675:707", "167675:710-167675:712", "167675:715-167675:716", "167675:719", "167675:721-167675:725", 
        "167675:740-167675:741", "167675:748-167675:758", "167675:762-167675:770", "167675:774-167675:787", "167675:793-167675:797", 
        "167675:811-167675:1062", "167676:1-167676:278", "167676:289-167676:450", "167740:79-167740:126", "167740:132-167740:168", 
        "167740:170-167740:173", "167746:56-167746:384", "167754:62-167754:103", "167784:51-167784:67", "167786:1", 
        "167786:11-167786:75", "167786:81-167786:176", "167807:60-167807:159", "167807:178-167807:204", "167807:210-167807:482", 
        "167807:484-167807:558", "167807:560-167807:872", "167807:878-167807:1441", "167807:1444-167807:1842", "167830:1-167830:437", 
        "167830:442-167830:587", "167830:590-167830:828", "167830:834-167830:1242", "167898:108-167898:619", "167898:621-167898:995", 
        "167898:1001-167898:1010", "167898:1013-167898:1053", "167898:1057-167898:1295", "167898:1298-167898:1762", "167913:1-167913:126", 
        "167913:128-167913:432", "170722:110-170722:287", "170759:49-170759:224", "170759:228-170759:251", "170759:257-170759:377", 
        "170826:50-170826:122", "170826:139-170826:243", "170826:248-170826:308", "170842:1-170842:27", "170842:32-170842:96", 
        "170842:102-170842:331", "170854:1-170854:336", "170854:341-170854:414", "170854:420-170854:470", "170854:475-170854:578", 
        "170876:1-170876:110", "170876:115-170876:295", "170876:301-170876:516", "170876:518", "170896:1-170896:212", 
        "170899:1-170899:84", "170901:1-170901:153", "170901:159-170901:200", "171050:47-171050:74", "171050:80-171050:337", 
        "171050:342-171050:369", "171050:371-171050:379", "171050:384-171050:423", "171050:427-171050:467", "171050:471-171050:648", 
        "171091:1-171091:135", "171098:1-171098:8", "171102:1-171102:19", "171106:1-171106:27", "171106:32-171106:288", 
        "171117:1-171117:54", "171117:56-171117:78", "171117:80-171117:84", "171156:42-171156:106", "171156:111-171156:686", 
        "171156:688-171156:692", "171178:1-171178:92", "171178:97-171178:205", "171178:210-171178:551", "171178:556-171178:557", 
        "171178:563-171178:787", "171178:792-171178:1043", "171219:48-171219:151", "171219:153-171219:162", "171274:88-171274:137", 
        "171274:140-171274:143", "171282:1-171282:12", "171282:14-171282:99", "171282:104-171282:134", "171282:140-171282:171", 
        "171315:53-171315:225", "171369:42-171369:130", "171369:136-171369:137", "171369:144-171369:161", "171446:58-171446:394", 
        "171446:401-171446:450", "171446:456-171446:645", "171446:650-171446:749", "171446:755-171446:864", "171484:61-171484:202", 
        "171484:207-171484:370", "171484:377-171484:432", "171578:47-171578:150", "171578:156-171578:174", "171578:179-171578:314", 
        "171578:320-171578:347", "171578:353-171578:480", "171578:487-171578:572", "171578:578-171578:816", "171578:821-171578:974", 
        "171812:59-171812:296", "171812:301-171812:438", "171876:1-171876:362", "171876:368-171876:391", "171876:397-171876:533", 
        "171880:19-171880:202", "171895:34", "171897:1-171897:23", "171897:205-171897:437", "171897:442-171897:511", 
        "171897:517-171897:542", "171921:51-171921:141", "171926:1-171926:49", "171926:51-171926:155", "171926:161-171926:172", 
        "171926:177-171926:264", "172014:1-172014:64", "172014:66-172014:143", "172014:149-172014:243", "172024:1-172024:46", 
        "172033:1-172033:65", "172033:71-172033:277", "172033:282-172033:375", "172033:380-172033:473", "172033:478-172033:749", 
        "172163:36-172163:109", "172163:115-172163:469", "172208:61-172208:199", "172252:32-172252:54", "172254:1-172254:35", 
        "172255:1-172255:40", "172268:56-172268:169", "172286:52-172286:177", "172286:184-172286:216", "172389:34-172389:144", 
        "172389:150-172389:428", "172389:434-172389:460", "172399:57-172399:226", "172400:1-172400:495", "172400:500-172400:690", 
        "172400:696-172400:704", "172401:1-172401:2", "172401:5-172401:148", "172411:85-172411:349", "172478:1-172478:110", 
        "172619:1-172619:77", "172620:1-172620:495", "172630:36-172630:64", "172630:68-172630:134", "172630:139-172630:160", 
        "172635:1-172635:18", "172635:24-172635:268", "172778:48-172778:97", "172791:65-172791:413", "172791:418-172791:569", 
        "172791:571-172791:715", "172791:721-172791:1295", "172791:1300-172791:1536", "172791:1542-172791:1645", "172791:1649-172791:1658", 
        "172798:1-172798:31", "172799:1-172799:367", "172801:1-172801:679", "172801:681-172801:750", "172801:753-172801:766", 
        "172801:768-172801:815", "172801:819-172801:837", "172801:839-172801:861", "172801:863-172801:909", "172801:911-172801:1139", 
        "172802:1-172802:629", "172802:634-172802:784", "172819:57-172819:87", "172819:92-172819:254", "172822:1-172822:75", 
        "172822:77-172822:127", "172822:133-172822:353", "172822:358-172822:662", "172822:667-172822:832", "172822:837-172822:1096", 
        "172822:1102-172822:1112", "172822:1118-172822:2121", "172822:2127-172822:2333", "172824:1-172824:54", "172847:62-172847:131", 
        "172865:36-172865:151", "172865:157-172865:382", "172868:1-172868:29", "172868:34-172868:708", "172868:714-172868:909", 
        "172868:912-172868:1829", "172868:1835-172868:1970", "172949:55-172949:127", "172949:133-172949:159", "172949:161-172949:263", 
        "172949:269-172949:274", "172949:276-172949:892", "172949:898-172949:928", "172949:933-172949:1287", "172951:1-172951:52", 
        "172952:1-172952:195", "172952:197-172952:670", "172952:675-172952:797", "172952:799-172952:1164", "172952:1169-172952:1562", 
        "172992:505-172992:511", "172992:516-172992:713", "172992:752-172992:874", "172992:880-172992:946", "172999:1-172999:71", 
        "172999:77-172999:294", "173198:49-173198:322", "173198:324-173198:356", "173198:362-173198:485", "173198:488-173198:768", 
        "173198:770-173198:823", "173236:128-173236:231", "173240:1-173240:124", "173241:1-173241:85", "173241:92-173241:381", 
        "173241:388-173241:759", "173243:1-173243:89", "173380:75-173380:204", "173380:209", "173380:217", 
        "173381:1-173381:134", "173381:139-173381:221", "173381:226", "173381:231-173381:294", "173389:18-173389:106", 
        "173389:111-173389:169", "173389:174-173389:224", "173389:230-173389:262", "173389:276-173389:653", "173406:37-173406:286", 
        "173430:72-173430:163", "173438:32-173438:56", "173439:1-173439:274", "173439:280-173439:313", "173439:319-173439:467", 
        "173439:472-173439:756", "173657:59-173657:93", "173658:1-173658:110", "173659:1-173659:61", "173659:66-173659:317", 
        "173660:1-173660:81", "173660:86-173660:164", "173660:169-173660:357", "173660:359-173660:362", "173661:1-173661:56", 
        "173661:62-173661:63", "173661:65-173661:125", "173663:1-173663:71", "173663:73-173663:120", "173664:5-173664:16", 
        "173692:50-173692:143", "173692:149-173692:468", "173692:474-173692:1123", "173692:1129-173692:1162", "173692:1168-173692:1321", 
        "173692:1326-173692:1361", "173692:1366-173692:1383", "173692:1389-173692:1431", "173692:1436-173692:1818", "173692:1824-173692:2361", 
        "173692:2366-173692:2710", "173692:2715-173692:2754", "175832:43-175832:139", "175833:1-175833:3", "175835:1-175835:120", 
        "175835:122-175835:165", "175837:1-175837:167", "175858:1-175858:21", "175860:1-175860:82", "175863:1-175863:75", 
        "175865:1-175865:58", "175866:1-175866:353", "175866:356-175866:511", "175872:60-175872:90", "175873:1-175873:32", 
        "175874:1-175874:33", "175874:36-175874:108", "175877:1-175877:69", "175881:1-175881:160", "175886:1-175886:280", 
        "175887:1-175887:18", "175887:21-175887:138", "175888:1-175888:424", "175906:79-175906:191", "175910:1-175910:12", 
        "175921:64-175921:428", "175973:126-175973:183", "175973:186-175973:268", "175974:1-175974:124", "175975:1-175975:90", 
        "175975:93-175975:101", "175975:104-175975:390", "175976:1-175976:33", "175976:36-175976:51", "175976:54-175976:102", 
        "175990:56-175990:164", "176023:44-176023:129", "176161:6-176161:7", "176161:13-176161:14", "176161:16-176161:23", 
        "176163:1-176163:4", "176163:7-176163:63", "176165:1-176165:29", "176167:1-176167:5", "176169:1-176169:140", 
        "176201:52", "176201:54-176201:55", "176201:58", "176201:61-176201:63", "176201:67-176201:263", 
        "176201:265-176201:570", "176201:573-176201:656", "176202:1-176202:179", "176202:182-176202:264", "176206:1-176206:101", 
        "176207:1-176207:230", "176286:55-176286:224", "176286:226-176286:247", "176286:250-176286:252", "176286:254-176286:486", 
        "176289:1-176289:43", "176289:46-176289:75", "176304:69", "176304:73", "176304:77", 
        "176304:79-176304:132", "176304:135-176304:422", "176304:425-176304:516", "176308:1-176308:45", "176308:48-176308:130", 
        "176308:133-176308:293", "176309:1-176309:84", "176309:87-176309:122", "176309:125-176309:354", "176309:356-176309:467", 
        "176309:470-176309:512", "176309:514-176309:627", "176309:630-176309:1177", "176309:1180-176309:1641", "176467:1-176467:85", 
        "176467:88-176467:164", "176468:1-176468:124", "176468:126-176468:210", "176469:1-176469:5", "176545:5", 
        "176547:1-176547:151", "176547:154-176547:172", "176547:175-176547:184", "176548:1-176548:72", "176548:75-176548:387", 
        "176548:390-176548:487", "176548:489-176548:494", "176548:496-176548:575", "176548:577-176548:1024", "176697:50-176697:66", 
        "176697:68-176697:344", "176701:1-176701:145", "176702:1-176702:4", "176702:6-176702:42", "176702:45-176702:103", 
        "176702:105-176702:284", "176702:287-176702:291", "176702:294-176702:351", "176702:353-176702:599", "176702:622-176702:684", 
        "176702:686-176702:723", "176702:726-176702:794", "176702:796-176702:799", "176702:801-176702:839", "176765:84-176765:141", 
        "176771:57-176771:60", "176771:62-176771:156", "176795:38-176795:105", "176796:1-176796:24", "176796:31-176796:100", 
        "176797:1-176797:26", "176797:33-176797:89", "176797:95-176797:131", "176797:136-176797:196", "176797:203-176797:237", 
        "176797:244-176797:252", "176799:1-176799:27", "176799:30-176799:35", "176799:38-176799:238", "176801:1-176801:92", 
        "176801:95-176801:173", "176801:176-176801:177", "176801:179-176801:249", "176805:1-176805:97", "176807:1-176807:74", 
        "176807:76-176807:255", "176807:257-176807:461", "176841:105-176841:157", "176841:159-176841:182", "176841:184-176841:235", 
        "176841:238-176841:241", "176844:1-176844:110", "176848:1-176848:25", "176850:1-176850:29", "176850:32-176850:301", 
        "176860:1-176860:78", "176860:81-176860:271", "176860:273-176860:335", "176860:338-176860:450", "176868:1-176868:495", 
        "176885:67-176885:152", "176885:164-176885:235", "176886:1-176886:335", "176886:337-176886:416", "176886:418-176886:425", 
        "176886:427-176886:429", "176886:431-176886:499", "176886:502-176886:503", "176886:505", "176886:507", 
        "176886:509-176886:514", "176886:516-176886:678", "176889:1-176889:81", "176889:83-176889:102", "176928:1-176928:99", 
        "176928:102-176928:121", "176929:1-176929:59", "176929:62-176929:198", "176929:201-176929:218", "176929:221-176929:320", 
        "176933:1-176933:71", "176933:73-176933:358", "176933:361-176933:415", "176933:418-176933:438", "176959:17-176959:39", 
        "176982:1-176982:10", "177053:54-177053:72", "177053:74-177053:87", "177053:90-177053:208", "177053:211-177053:217", 
        "177053:219-177053:258", "177053:260-177053:380", "177053:385-177053:427", "177053:429-177053:570", "177053:573-177053:709", 
        "177053:712-177053:740", "177074:52-177074:120", "177074:123-177074:468", "177074:470-177074:554", "177074:556-177074:735", 
        "177074:737-177074:769", "177088:57-177088:83", "177088:85-177088:95", "177095:49-177095:111", "177095:113-177095:204", 
        "177096:1-177096:14", "177096:17-177096:190", "177131:49-177131:139", "177138:55-177138:57", "177138:59-177138:114", 
        "177139:1-177139:206", "177139:208-177139:249", "177139:252-177139:335", "177139:337-177139:375", "177139:378-177139:627", 
        "177140:1-177140:106", "177140:108-177140:492", "177140:495-177140:557", "177141:1-177141:57", "177141:59-177141:154", 
        "177141:157-177141:288", "177141:290-177141:492", "177141:494-177141:628", "177183:4-177183:74", "177183:76-177183:199", 
        "177183:202-177183:219", "177184:1-177184:12", "177184:15-177184:41", "177201:60-177201:65", "177201:68-177201:73", 
        "177201:75-177201:212", "177201:215-177201:334", "177201:337-177201:516", "177201:519-177201:603", "177201:606-177201:621", 
        "177201:623-177201:799", "177222:50-177222:342", "177317:1-177317:60", "177318:1-177318:236", "177318:238-177318:257", 
        "177318:259-177318:369", "177318:372-177318:404", "177319:1-177319:54", "177319:56-177319:224", "177319:227-177319:286", 
        "177319:289-177319:351", "177319:354-177319:368", "177449:56-177449:80", "177449:83-177449:234", "177449:236-177449:392", 
        "177449:394-177449:434", "177452:1-177452:156", "177452:158-177452:169", "177718:53-177718:62", "177718:64-177718:482", 
        "177718:485-177718:656", "177718:659-177718:697", "177718:699-177718:701", "177718:703", "177718:706-177718:1572", 
        "177718:1575-177718:1635", "177719:1-177719:194", "177719:197-177719:694", "177719:696-177719:704", "177730:49-177730:88", 
        "177730:91-177730:234", "177730:237-177730:448", "177730:451-177730:701", "177730:704-177730:773", "177730:776-177730:931", 
        "177730:933-177730:1470", "177730:1473-177730:1763", "177730:1766-177730:1956", "177730:1959-177730:2266", "177730:2268-177730:2303", 
        "177776:73-177776:108", "177782:72-177782:75", "177782:78-177782:226", "177783:1-177783:94", "177783:97-177783:176", 
        "177783:178-177783:234", "177783:237-177783:363", "177788:1-177788:46", "177789:1-177789:38", "177789:41-177789:82", 
        "177789:84-177789:86", "177790:1-177790:189", "177790:191-177790:715", "177791:1-177791:27", "177791:30-177791:109", 
        "177791:137-177791:198", "177875:71-177875:214", "177875:217-177875:367", "177875:370-177875:448", "177875:451-177875:589", 
        "177878:1-177878:138", "177878:143-177878:492", "177878:495-177878:837", "177878:839-177878:849", "178098:16-178098:120", 
        "178098:122-178098:142", "178098:144-178098:152", "178098:155-178098:179", "178098:181-178098:249", "178098:251-178098:549", 
        "178098:551-178098:576", "178098:579-178098:619", "178098:622-178098:677", "178098:679-178098:707", "178099:1-178099:192", 
        "178100:1-178100:40", "178100:43-178100:163", "178100:166-178100:511", "178100:514-178100:529", "178100:532-178100:1114", 
        "178100:1117-178100:1613", "178101:1-178101:61", "178101:64-178101:75", "178102:1-178102:13", "178110:51-178110:133", 
        "178110:135-178110:197", "178110:199-178110:246", "178110:252-178110:396", "178110:401-178110:468", "178116:1-178116:120", 
        "178116:122-178116:615", "178151:47-178151:122", "178160:51-178160:456", "178160:458-178160:534", "178162:1-178162:4", 
        "178162:7-178162:55", "178162:58-178162:146", "178162:149-178162:175", "178365:43-178365:96", "178365:98-178365:238", 
        "178365:241-178365:380", "178365:382-178365:558", "178365:560-178365:660", "178365:663-178365:1050", "178365:1053-178365:1059", 
        "178367:22-178367:135", "178367:138-178367:161", "178367:163-178367:264", "178367:266-178367:316", "178367:318-178367:366", 
        "178367:369-178367:392", "178367:395-178367:548", "178367:560-178367:711", "178367:713-178367:737", "178380:1-178380:81", 
        "178380:84-178380:195", "178420:53-178420:61", "178420:63-178420:70", "178421:1-178421:3", "178421:47-178421:77", 
        "178421:79-178421:135", "178421:137-178421:149", "178421:151-178421:265", "178421:268-178421:293", "178421:295-178421:320", 
        "178421:323-178421:512", "178421:514-178421:586", "178421:588-178421:742", "178421:744-178421:756", "178421:759-178421:915", 
        "178421:917-178421:1207", "178424:1-178424:536", "178424:538-178424:594", "178424:597-178424:837", "178479:61-178479:64", 
        "178479:66-178479:129", "178479:132-178479:245", "178479:247-178479:354", "178479:356-178479:576", "178479:578-178479:985", 
        "178479:988-178479:1004", "178703:43-178703:183", "178708:1-178708:374", "178712:1-178712:42", "178712:44-178712:197", 
        "178712:199-178712:333", "178712:336-178712:394", "178724:3-178724:261", "178731:1-178731:208", "178738:1-178738:143", 
        "178738:145-178738:252", "178786:53-178786:67", "178786:70-178786:117", "178786:120", "178786:123-178786:135", 
        "178786:138-178786:202", "178786:205-178786:218", "178786:220-178786:227", "178803:49-178803:115", "178803:117-178803:316", 
        "178803:319-178803:457", "178840:48-178840:119", "178840:122-178840:336", "178840:339-178840:341", "178840:343-178840:566", 
        "178840:569-178840:597", "178854:1-178854:134", "178866:1-178866:424", "178871:1-178871:64", "178871:67-178871:71", 
        "178871:73-178871:156", "178871:159-178871:380", "178871:382-178871:466", "178871:468-178871:1181", "178871:1184-178871:1273", 
        "178920:53-178920:291", "178970:52-178970:242", "178970:244-178970:581", "178985:1-178985:81", "179411:1-179411:112", 
        "179434:21-179434:289", "179434:291-179434:388", "179434:390-179434:607", "179434:609-179434:748", "179452:1-179452:108", 
        "179452:110-179452:121", "179452:124-179452:158", "179452:160-179452:276", "179452:278-179452:289", "179452:292-179452:515", 
        "179452:518-179452:830", "179452:833-179452:849", "179452:851-179452:1116", "179452:1118-179452:1233", "179476:1-179476:16", 
        "179476:19-179476:207", "179497:86-179497:116", "179497:118-179497:131", "179497:134-179497:149", "179497:151-179497:274", 
        "179497:277-179497:280", "179497:283-179497:402", "179497:405-179497:433", "179547:75-179547:156", "179547:158-179547:162", 
        "179547:164-179547:262", "179547:265-179547:338", "179558:1-179558:52", "179558:55-179558:64", "179558:66-179558:73", 
        "179558:75-179558:134", "179563:1-179563:440", "179563:443-179563:631", "179563:633-179563:704", "179563:707-179563:722", 
        "179563:724-179563:912", "179563:915-179563:968", "179563:970-179563:1085", "179563:1087-179563:1138", "179563:1141-179563:1186", 
        "179889:51-179889:68", "179889:70-179889:139", "179889:142-179889:448", "179889:450-179889:463", "179889:466-179889:497", 
        "179889:500-179889:534", "179959:69-179959:86", "179977:44-179977:51", "179977:53-179977:114", "179977:116-179977:136", 
        "180072:49-180072:102", "180076:1-180076:182", "180076:184-180076:356", "180093:1-180093:260", "180093:263-180093:292", 
        "180093:295-180093:346", "180241:55-180241:74", "180241:78", "180241:80-180241:252", "180241:255-180241:328", 
        "180241:331-180241:351", "180241:353-180241:416", "180250:3", "180250:6-180250:82", "180250:84-180250:259", 
        "180250:262-180250:426", "180250:429-180250:539", "180252:1-180252:40", "180252:42-180252:49", "180252:52-180252:79" ) )
)
process.AK5PFCandMETcorr = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("AK5PFCandsNotInJet")
)


process.AK5PFCandsNotInJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak5PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.AK5PFJetMETcorr = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak5PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('AK5PFL1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('AK5PFCombinedCorrector')
)


process.AK5PFType1CorMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("AK5PFJetMETcorr","type1")),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType2Corrections = cms.bool(False),
    type0Rsoft = cms.double(0.6),
    applyType0Corrections = cms.bool(False)
)


process.AK5PFType1p2CorMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("AK5PFJetMETcorr","type2"), cms.InputTag("AK5PFJetMETcorr","offset"), cms.InputTag("AK5PFCandMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("AK5PFJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.AK7PFCandMETcorr = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("AK7PFCandsNotInJet")
)


process.AK7PFCandsNotInJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak7PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.AK7PFJetMETcorr = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak7PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('AK7PFL1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('AK7PFCombinedCorrector')
)


process.AK7PFType1CorMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("AK7PFJetMETcorr","type1")),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType2Corrections = cms.bool(False),
    type0Rsoft = cms.double(0.6),
    applyType0Corrections = cms.bool(False)
)


process.AK7PFType1p2CorMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("AK7PFJetMETcorr","type2"), cms.InputTag("AK7PFJetMETcorr","offset"), cms.InputTag("AK7PFCandMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("AK7PFJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.BeamHaloSummary = cms.EDProducer("BeamHaloSummaryProducer",
    l_HcalPhiWedgeConfidence = cms.double(0.7),
    t_EcalSuperClusterSize = cms.int32(3),
    l_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalPhiWedgeConfidence = cms.double(0.7),
    t_EcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalPhiWedgeConfidence = cms.double(0.9),
    l_HcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalShowerShapesRoundness = cms.double(0.23),
    l_HcalPhiWedgeConstituents = cms.int32(6),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    l_EcalShowerShapesRoundness = cms.double(0.41),
    l_EcalSuperClusterSize = cms.int32(3),
    t_HcalPhiWedgeEnergy = cms.double(25.0),
    t_HcalPhiWedgeConfidence = cms.double(0.9),
    t_EcalShowerShapesAngle = cms.double(0.51),
    t_EcalPhiWedgeConstituents = cms.int32(8),
    l_EcalPhiWedgeEnergy = cms.double(10.0),
    GlobalHaloDataLabel = cms.InputTag("GlobalHaloData"),
    l_HcalPhiWedgeToF = cms.double(-100.0),
    t_HcalPhiWedgeToF = cms.double(-100.0),
    t_HcalPhiWedgeConstituents = cms.int32(8),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    t_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalPhiWedgeConstituents = cms.int32(6),
    t_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalShowerShapesAngle = cms.double(0.51),
    CSCHaloDataLabel = cms.InputTag("CSCHaloData")
)


process.CSCHaloData = cms.EDProducer("CSCHaloDataProducer",
    ExpectedBX = cms.int32(6),
    RecHitTime0 = cms.double(0.0),
    MinOuterMomentumTheta = cms.double(0.1),
    SALabel = cms.InputTag("standAloneMuons"),
    MatchingDPhiThreshold = cms.double(0.18),
    MaxOuterMomentumTheta = cms.double(3.0),
    DphiParam = cms.double(1.0),
    RecHitTimeWindow = cms.double(25.0),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite'),
        RPCLayers = cms.bool(True)
    ),
    DetaParam = cms.double(0.1),
    InnerRMinParam = cms.double(0.0),
    MaxFreeInverseBeta = cms.double(0.0),
    MaxDtMuonSegment = cms.double(-10.0),
    MuonLabel = cms.InputTag("muons"),
    MatchParameters = cms.PSet(
        DTsegments = cms.InputTag("dt4DSegments"),
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        TightMatchDT = cms.bool(False),
        TightMatchCSC = cms.bool(True)
    ),
    MaxSegmentPhiDiff = cms.double(0.35),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    InnerRMaxParam = cms.double(99999.0),
    MaxSegmentRDiff = cms.double(10.0),
    L1MuGMTReadoutLabel = cms.InputTag("gtDigis"),
    MaxSegmentTheta = cms.double(0.7),
    HLTResultLabel = cms.InputTag("TriggerResults","","HLT"),
    HLTBitLabel = cms.VInputTag(cms.InputTag("HLT_CSCBeamHalo"), cms.InputTag("HLT_CSCBeamHaloOverlapRing1"), cms.InputTag("HLT_CSCBeamHaloOverlapRing2"), cms.InputTag("HLT_CSCBeamHaloRing2or3")),
    NormChi2Param = cms.double(8.0),
    ALCTDigiLabel = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    OuterRMaxParam = cms.double(99999.0),
    MatchingDEtaThreshold = cms.double(0.4),
    OuterRMinParam = cms.double(0.0),
    MatchingDWireThreshold = cms.int32(5),
    CosmicMuonLabel = cms.InputTag("muonsFromCosmics"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits")
)


process.CastorTowerReco = cms.EDProducer("CastorTowerProducer",
    mintime = cms.untracked.double(-99999.0),
    towercut = cms.untracked.double(0.65),
    maxtime = cms.untracked.double(99999.0),
    inputprocess = cms.untracked.string('castorreco')
)


process.CkfElectronCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfElectronTrajectoryBuilder')
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    EnableDTMeasurement = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000),
    EnableCSCMeasurement = cms.bool(True)
)


process.EcalHaloData = cms.EDProducer("EcalHaloDataProducer",
    ESRecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    ESRecHitEnergyThresholdParam = cms.double(0.3),
    AngleCutParam = cms.double(0.51),
    EBRecHitEnergyThresholdParam = cms.double(0.3),
    RoundnessCutParam = cms.double(0.41),
    EERecHitEnergyThresholdParam = cms.double(0.3),
    NHitsEcalThresholdParam = cms.int32(4),
    SuperClusterLabel = cms.InputTag("correctedHybridSuperClusters"),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    PhotonLabel = cms.InputTag("photons"),
    SumEcalEnergyThresholdParam = cms.double(10.0),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.GlobalHaloData = cms.EDProducer("GlobalHaloDataProducer",
    EcalMaxMatchingRadiusParam = cms.double(330.0),
    EcalMinMatchingRadiusParam = cms.double(110.0),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    CSCSegmentLabel = cms.InputTag("CSCSegments"),
    metLabel = cms.InputTag("met"),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    calotowerLabel = cms.InputTag("towerMaker"),
    CaloTowerEtThresholdParam = cms.double(0.3),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCHaloDataLabel = cms.InputTag("CSCHaloData")
)


process.GsfGlobalElectronTest = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("CkfElectronCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('gsf'),
    Propagator = cms.string('fwdElectronPropagator')
)


process.HcalHaloData = cms.EDProducer("HcalHaloDataProducer",
    SumHcalEnergyThresholdParam = cms.double(18),
    NHitsHcalThresholdParam = cms.int32(4),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    HORecHitLabel = cms.InputTag("horeco"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    HERecHitEnergyThresholdParam = cms.double(0.5),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HFRecHitLabel = cms.InputTag("hfreco"),
    HBRecHitEnergyThresholdParam = cms.double(0.5)
)


process.JPTAntiKt5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.JPTAntiKt5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    jets = cms.InputTag("TCTauJetPlusTrackZSPCorJetAntiKt5"),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator")
)


process.JPTAntiKt5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("TCTauJetPlusTrackZSPCorJetAntiKt5"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.JPTCaloRecoTauProducer = cms.EDProducer("CaloRecoTauProducer",
    LeadTrack_minPt = cms.double(0.5),
    MatchingConeSize_min = cms.double(0.0),
    ECALSignalConeSizeFormula = cms.string('0.15'),
    TrackerIsolConeMetric = cms.string('DR'),
    TrackerSignalConeMetric = cms.string('DR'),
    EBRecHitsSource = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    IsolationTrack_minPt = cms.double(1.0),
    ECALSignalConeSize_min = cms.double(0.0),
    ECALRecHit_minEt = cms.double(0.5),
    MatchingConeMetric = cms.string('DR'),
    TrackerSignalConeSizeFormula = cms.string('0.07'),
    MatchingConeSizeFormula = cms.string('0.10'),
    TrackerIsolConeSize_min = cms.double(0.0),
    TrackerIsolConeSize_max = cms.double(0.6),
    TrackerSignalConeSize_max = cms.double(0.6),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    ESRecHitsSource = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    TrackerSignalConeSize_min = cms.double(0.0),
    JetPtMin = cms.double(0.0),
    AreaMetric_recoElements_maxabsEta = cms.double(2.5),
    ECALIsolConeMetric = cms.string('DR'),
    ECALIsolConeSizeFormula = cms.string('0.50'),
    ECALIsolConeSize_max = cms.double(0.6),
    EERecHitsSource = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    IsolationTrack_minHits = cms.uint32(0),
    ECALSignalConeMetric = cms.string('DR'),
    TrackLeadTrack_maxDZ = cms.double(1.0),
    Track_minPt = cms.double(0.5),
    TrackerIsolConeSizeFormula = cms.string('0.50'),
    ECALSignalConeSize_max = cms.double(0.6),
    ECALIsolConeSize_min = cms.double(0.0),
    UseTrackLeadTrackDZconstraint = cms.bool(True),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    CaloRecoTauTagInfoProducer = cms.InputTag("caloRecoTauTagInfoProducer"),
    MatchingConeSize_max = cms.double(0.6)
)


process.JPTeidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.JetPlusTrackZSPCorJetAntiKt5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(2),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.JetPlusTrackZSPCorJetIcone5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(0),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("iterativeCone5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetIcone5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.JetPlusTrackZSPCorJetSiscone5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("sisCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(1),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("sisCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetSiscone5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.MuonSeed = cms.EDProducer("MuonSeedProducer",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    minimumSeedPt = cms.double(5.0),
    minCSCHitsPerSegment = cms.int32(4),
    maxDeltaPhiDT = cms.double(0.3),
    defaultSeedPt = cms.double(25.0),
    EnableCSCMeasurement = cms.bool(True),
    maxDeltaPhiOverlap = cms.double(0.25),
    minDTHitsPerSegment = cms.int32(2),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    maxEtaResolutionCSC = cms.double(0.06),
    maxPhiResolutionCSC = cms.double(0.03),
    maxDeltaEtaOverlap = cms.double(0.08),
    EnableDTMeasurement = cms.bool(True),
    DTSegmentLabel = cms.InputTag("dt4DSegments"),
    SeedPtSystematics = cms.double(0.1),
    maximumSeedPt = cms.double(3000.0),
    maxEtaResolutionDT = cms.double(0.02),
    maxDeltaEtaCSC = cms.double(0.2),
    maxDeltaPhiCSC = cms.double(0.5),
    maxDeltaEtaDT = cms.double(0.3),
    DebugMuonSeed = cms.bool(False),
    maxPhiResolutionDT = cms.double(0.03)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    DoHcalTowerIsolationCut = cms.bool(True),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMSolidTrkEE = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    DoSolidConeNTrkCut = cms.bool(False),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    DoHadOverEMCut = cms.bool(True),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    photonLabel = cms.string(''),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    DoHollowConeNTrkCut = cms.bool(False),
    doCutBased = cms.bool(True),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonR9CutEB = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonHadOverEMEE = cms.double(0.05),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    DoEcalRecHitIsolationCut = cms.bool(True),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHadOverEMEB = cms.double(0.05),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    DoR9Cut = cms.bool(False),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHadOverEMEB = cms.double(0.05),
    DoEtaWidthCut = cms.bool(True),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonR9CutEB = cms.double(0.0),
    DoEcalIsoRelativeCut = cms.bool(True),
    photonProducer = cms.string('photons'),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999)
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SETTrajBuilderParameters = cms.PSet(
        SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0),
        SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0),
        SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0),
        OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0),
        SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0),
        SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0),
        SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0),
        SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0),
        OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0),
        DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638),
        DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219),
        DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269),
        OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0),
        CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065),
        CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835),
        CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802),
        CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0),
        SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0),
        SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0),
        OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0),
        SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0),
        SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0),
        SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0),
        DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012),
        DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984),
        SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0),
        SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0),
        CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395),
        CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916),
        SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0),
        SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0),
        DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346),
        CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139),
        OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0),
        CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142),
        CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        scaleDT = cms.bool(True),
        Apply_prePruning = cms.bool(True),
        UseSegmentsInTrajectory = cms.bool(False),
        FilterParameters = cms.PSet(
            OutsideChamberErrorScale = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MinLocalSegmentAngle = cms.double(0.09),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            maxActiveChambers = cms.int32(100),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        )
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot")
)


process.TCTauJetPlusTrackZSPCorJetAntiKt5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_resptowers.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(2),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(False),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.TauDecayModeCutMutliplexerPrototype = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.TrackProducer = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ak5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL1FastL2L3')
)


process.ak5CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL1FastL2L3Residual')
)


process.ak5CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL1L2L3')
)


process.ak5CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL1L2L3Residual')
)


process.ak5CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL2L3')
)


process.ak5CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak5CaloJets"),
    correctors = cms.vstring('ak5CaloL2L3Residual')
)


process.ak5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ak5JPTJetsL1FastL2L3 = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL1FastL2L3')
)


process.ak5JPTJetsL1FastL2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL1FastL2L3Residual')
)


process.ak5JPTJetsL1L2L3 = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL1L2L3')
)


process.ak5JPTJetsL1L2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL1L2L3Residual')
)


process.ak5JPTJetsL2L3 = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL2L3')
)


process.ak5JPTJetsL2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt5"),
    correctors = cms.vstring('ak5JPTL2L3Residual')
)


process.ak5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.ak5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorExplicit = cms.EDProducer("JetTracksAssociatorExplicit",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak5PFJets")
)


process.ak5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ak5PFJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.ak5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5PFJetsFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL1FastL2L3')
)


process.ak5PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL1FastL2L3Residual')
)


process.ak5PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL1L2L3')
)


process.ak5PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL1L2L3Residual')
)


process.ak5PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL2L3')
)


process.ak5PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak5PFJets"),
    correctors = cms.vstring('ak5PFL2L3Residual')
)


process.ak5PFJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.ak5PFJetsLegacyTaNCPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.ak5PFJetsMassDropFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    useMassDropTagger = cms.bool(True),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    muCut = cms.double(0.667),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(3),
    yCut = cms.double(0.08),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsPruned = cms.EDProducer("FastjetJetProducer",
    nFilt = cms.int32(2),
    zcut = cms.double(0.1),
    rcut_factor = cms.double(0.5),
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsRecoTauPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.ak5PFJetsTrimmed = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    trimPtFracMin = cms.double(0.03),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5TrackJetsL2L3 = cms.EDProducer("TrackJetCorrectionProducer",
    src = cms.InputTag("ak5TrackJets"),
    correctors = cms.vstring('ak5TrackL2L3')
)


process.ak7BasicJets = cms.EDProducer("FastjetJetProducer",
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("CastorTowerReco"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    rParam = cms.double(0.7),
    doPUOffsetCorr = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    jetPtMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    GhostArea = cms.double(0.01),
    inputEMin = cms.double(0.0)
)


process.ak7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL1FastL2L3')
)


process.ak7CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL1FastL2L3Residual')
)


process.ak7CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL1L2L3')
)


process.ak7CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL1L2L3Residual')
)


process.ak7CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL2L3')
)


process.ak7CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("ak7CaloJets"),
    correctors = cms.vstring('ak7CaloL2L3Residual')
)


process.ak7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ak7CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak7BasicJets")
)


process.ak7JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak7CaloJets"),
    jet2TracksAtCALO = cms.InputTag("ak7JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak7JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.7)
)


process.ak7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak7CaloJets")
)


process.ak7JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak7CaloJets")
)


process.ak7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL1FastL2L3')
)


process.ak7PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL1FastL2L3Residual')
)


process.ak7PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL1L2L3')
)


process.ak7PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL1L2L3Residual')
)


process.ak7PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL2L3')
)


process.ak7PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("ak7PFJets"),
    correctors = cms.vstring('ak7PFL2L3Residual')
)


process.ak7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.allConversions = cms.EDProducer("ConversionProducer",
    bypassPreselGsf = cms.bool(True),
    AllowD0 = cms.bool(True),
    dEtaTrackBC = cms.double(0.2),
    convertedPhotonCollection = cms.string(''),
    AllowRightBC = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    scEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    MaxChi2Right = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    vtxChi2 = cms.double(0.0005),
    maxTrackRho = cms.double(120.0),
    d0 = cms.double(0.0),
    dPhiTrackBC = cms.double(1.0),
    bypassPreselEcal = cms.bool(False),
    dPhicutForSCmatching = cms.double(0.05),
    AllowOppCharge = cms.bool(True),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    deltaEta = cms.double(0.4),
    maxDelta = cms.double(0.01),
    HalfwayEta = cms.double(0.1),
    AllowDeltaPhi = cms.bool(False),
    maxTrackZ = cms.double(300.0),
    maxNumOfTrackInPU = cms.int32(999999),
    AllowSingleLeg = cms.bool(False),
    MinApproachHigh = cms.double(1.0),
    EnergyTotalBC = cms.double(0.3),
    dEtacutForSCmatching = cms.double(0.03),
    DeltaPhi = cms.double(0.2),
    scBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    dz = cms.double(5.0),
    maxNbrOfIterations = cms.int32(40),
    AllowDeltaCot = cms.bool(True),
    EnergyBC = cms.double(0.3),
    MinHitsLeft = cms.int32(4),
    DeltaCotTheta = cms.double(0.1),
    minChiSqImprovement = cms.double(50.0),
    src = cms.InputTag("gsfGeneralInOutOutInConversionTrackMerger"),
    AllowVertex = cms.bool(True),
    UsePvtx = cms.bool(True),
    bypassPreselEcalEcal = cms.bool(True),
    minSCEt = cms.double(10.0),
    AllowTrackBC = cms.bool(False),
    rCut = cms.double(2.0),
    MinApproachLow = cms.double(-0.25),
    maxReducedChiSq = cms.double(225.0),
    MaxChi2Left = cms.double(10.0),
    AlgorithmName = cms.string('mixed'),
    MinHitsRight = cms.int32(2),
    AllowMinApproach = cms.bool(True)
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackWindow = cms.double(0.04),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    scaleDT = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True)
)


process.bToCharmDecayVertexMerged = cms.EDProducer("BtoCharmDecayVertexMerger",
    minvecSumIMifsmallDRUnique = cms.untracked.double(5.5),
    minDRUnique = cms.untracked.double(0.4),
    minCosPAtomerge = cms.untracked.double(0.99),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    maxPtreltomerge = cms.untracked.double(7777.0),
    secondaryVertices = cms.InputTag("inclusiveSecondaryVerticesFiltered")
)


process.beamhaloTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("beamhaloTrackerSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('BeamHaloPropagatorAlong'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('BeamHaloPropagatorOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilderBH')
)


process.beamhaloTrackerSeeds = cms.EDProducer("CtfSpecialSeedGenerator",
    ErrorRescaling = cms.double(50.0),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('BeamHaloPairGenerator'),
        maxTheta = cms.double(0.1),
        NavigationDirection = cms.string('outsideIn'),
        LayerPSet = cms.PSet(
            TEC4 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC5 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC6 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC = cms.PSet(
                minRing = cms.int32(5),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(7)
            ),
            TEC1 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC2 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC3 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            FPix = cms.PSet(
                hitErrorRZ = cms.double(0.0036),
                hitErrorRPhi = cms.double(0.0051),
                TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
                HitProducer = cms.string('siPixelRecHits'),
                useErrorsFromParam = cms.bool(True)
            ),
            TID = cms.PSet(
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
            ),
            layerList = cms.vstring('FPix1_pos+FPix2_pos', 
                'FPix1_neg+FPix2_neg', 
                'TID2_pos+TID3_pos', 
                'TID2_neg+TID3_neg', 
                'TEC1_neg+TEC2_neg', 
                'TEC1_pos+TEC2_pos', 
                'TEC2_neg+TEC3_neg', 
                'TEC2_pos+TEC3_pos', 
                'TEC3_neg+TEC4_neg', 
                'TEC3_pos+TEC4_pos', 
                'TEC4_neg+TEC5_neg', 
                'TEC4_pos+TEC5_pos', 
                'TEC5_neg+TEC6_neg', 
                'TEC5_pos+TEC6_pos', 
                'TEC7_neg+TEC8_neg', 
                'TEC7_pos+TEC8_pos', 
                'TEC8_neg+TEC9_neg', 
                'TEC8_pos+TEC9_pos')
        ),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('BeamHaloPairGenerator'),
            maxTheta = cms.double(0.1),
            NavigationDirection = cms.string('outsideIn'),
            LayerPSet = cms.PSet(
                TEC4 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC5 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC6 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC = cms.PSet(
                    minRing = cms.int32(5),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(False),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(7)
                ),
                TEC1 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC2 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC3 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                FPix = cms.PSet(
                    hitErrorRZ = cms.double(0.0036),
                    hitErrorRPhi = cms.double(0.0051),
                    TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
                    HitProducer = cms.string('siPixelRecHits'),
                    useErrorsFromParam = cms.bool(True)
                ),
                TID = cms.PSet(
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(False),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
                ),
                layerList = cms.vstring('FPix1_pos+FPix2_pos', 
                    'FPix1_neg+FPix2_neg', 
                    'TID2_pos+TID3_pos', 
                    'TID2_neg+TID3_neg', 
                    'TEC1_neg+TEC2_neg', 
                    'TEC1_pos+TEC2_pos', 
                    'TEC2_neg+TEC3_neg', 
                    'TEC2_pos+TEC3_pos', 
                    'TEC3_neg+TEC4_neg', 
                    'TEC3_pos+TEC4_pos', 
                    'TEC4_neg+TEC5_neg', 
                    'TEC4_pos+TEC5_pos', 
                    'TEC5_neg+TEC6_neg', 
                    'TEC5_pos+TEC6_pos', 
                    'TEC7_neg+TEC8_neg', 
                    'TEC7_pos+TEC8_pos', 
                    'TEC8_neg+TEC9_neg', 
                    'TEC8_pos+TEC9_pos')
            ),
            PropagationDirection = cms.string('oppositeToMomentum')
        )),
    Charges = cms.vint32(-1, 1),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    MaxNumberOfCosmicClusters = cms.uint32(10000),
    UseScintillatorsConstraint = cms.bool(False),
    SetMomentum = cms.bool(True),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originHalfLength = cms.double(21.2),
            originZPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            ptMin = cms.double(0.9),
            originXPos = cms.double(0.0),
            originRadius = cms.double(0.2)
        ),
        ComponentName = cms.string('GlobalRegionProducer')
    ),
    SeedsFromNegativeY = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    SeedsFromPositiveY = cms.bool(False),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    SeedMomentum = cms.double(15.0),
    maxSeeds = cms.int32(10000),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    requireBOFF = cms.bool(False)
)


process.beamhaloTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("beamhaloTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherBH'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('beamhaloTracks'),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('beamhalo'),
    Propagator = cms.string('BeamHaloPropagatorAlong')
)


process.ca4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca4CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ca4JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ca4CaloJets")
)


process.ca4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ca6JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ca6CaloJets")
)


process.ca6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.6),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caloJetMETcorr = cms.EDProducer("CaloJetMETcorrInputProducer",
    src = cms.InputTag("ak5CaloJets"),
    type1JetPtThreshold = cms.double(20.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    srcMET = cms.InputTag("corMetGlobalMuons"),
    jetCorrLabel = cms.string('ak5CaloL2L3')
)


process.caloRecoTauDiscriminationAgainstElectron = cms.EDProducer("CaloRecoTauDiscriminationAgainstElectron",
    CaloTauProducer = cms.InputTag("caloRecoTauProducer"),
    leadTrack_HCAL3x3hitsEtSumOverPt_minvalue = cms.double(0.1),
    maxleadTrackHCAL3x3hottesthitDEta = cms.double(0.1),
    ApplyCut_maxleadTrackHCAL3x3hottesthitDEta = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_leadTrackavoidsECALcrack = cms.bool(True)
)


process.caloRecoTauDiscriminationAgainstMuon = cms.EDProducer("CaloRecoTauDiscriminationAgainstMuon",
    CaloTauProducer = cms.InputTag("caloRecoTauProducer"),
    muonSource = cms.InputTag("muons"),
    segmCompCoefficient = cms.double(0.5),
    muonCompCut = cms.double(0.0),
    dRmatch = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    caloCompCoefficient = cms.double(0.5)
)


process.caloRecoTauDiscriminationByECALIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("CaloRecoTauDiscriminationByLeadingTrackPtCut",
    MinPtLeadingTrack = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("CaloRecoTauDiscriminationByLeadingTrackPtCut",
    MinPtLeadingTrack = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByTrackIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauProducer = cms.EDProducer("TCRecoTauProducer",
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)


process.caloRecoTauTagInfoProducer = cms.EDProducer("CaloRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    tkminPixelHitsn = cms.int32(0),
    ECALBasicClusterpropagTrack_matchingDRConeSize = cms.double(0.015),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkminPt = cms.double(0.5),
    BarrelBasicClustersSource = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    UsePVconstraint = cms.bool(True),
    tkmaxChi2 = cms.double(100.0),
    EndcapBasicClustersSource = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    ECALBasicClusterminE = cms.double(1.0),
    smearedPVsigmaZ = cms.double(0.005),
    tkQuality = cms.string('highPurity'),
    tkPVmaxDZ = cms.double(1.0),
    UseTrackQuality = cms.bool(True),
    ECALBasicClustersAroundCaloJet_DRConeSize = cms.double(0.5),
    tkmaxipt = cms.double(0.1),
    CaloJetTracksAssociatorProducer = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtVertex")
)


process.caloType1CorrectedMet = cms.EDProducer("CorrectedCaloMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorr","type1")),
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True)
)


process.caloType1p2CorrectedMet = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("caloJetMETcorr","type2"), cms.InputTag("muonCaloMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorr","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        C = cms.double(0.1),
        B = cms.double(1.3)
    )
)


process.calomuons = cms.EDProducer("CaloMuonProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputMuons = cms.InputTag("muons1stStep"),
    inputTracks = cms.InputTag("generalTracks"),
    minCaloCompatibility = cms.double(0.6),
    inputCollection = cms.InputTag("muons1stStep"),
    minPt = cms.double(1.0)
)


process.calotowermaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Weight = cms.double(1.0),
    HBThreshold = cms.double(0.7),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESWeight = cms.double(1.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    EBThreshold = cms.double(0.07),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    UseRejectedHitsOnly = cms.bool(False),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.calotoweroptmaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HBThreshold = cms.double(0.5),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.7),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.5),
    EBThreshold = cms.double(0.07),
    UseRejectedHitsOnly = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.calotoweroptmakerWithHO = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Weight = cms.double(1.0),
    HBThreshold = cms.double(0.5),
    EBThreshold = cms.double(0.07),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.7),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.5),
    UseRejectedHitsOnly = cms.bool(False),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.castorreco = cms.EDProducer("CastorSimpleReconstructor",
    firstSample = cms.int32(4),
    correctionPhaseNS = cms.double(0.0),
    doSaturationCorr = cms.bool(True),
    digiLabel = cms.InputTag("castorDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    Subdetector = cms.string('CASTOR'),
    maxADCvalue = cms.int32(127),
    setSaturationFlag = cms.bool(True),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.ckfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("conversionTrackCandidates","inOutTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    ComponentName = cms.string('ckfInOutTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection')
)


process.ckfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("conversionTrackCandidates","outInTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    Fitter = cms.string('KFFitterForOutIn'),
    ComponentName = cms.string('ckfOutInTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('outInEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection')
)


process.ckfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.ckfTrackCandidatesCombinedSeeds = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalCombinedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.ckfTrackCandidatesNoOverlaps = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilder')
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("combinatorialcosmicseedfinderP5"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.ckfTrackCandidatesPixelLess = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalPixelLessSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.cleanPatElectrons = cms.EDProducer("PATElectronCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatElectrons"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJets = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJets"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTaus"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJetsAK5PFCorr = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJetsAK5PFCorr"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTaus"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJetsAK7PFCorr = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJetsAK7PFCorr"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTaus"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatMuons = cms.EDProducer("PATMuonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatMuons"),
    checkOverlaps = cms.PSet(

    ),
    preselection = cms.string('')
)


process.cleanPatPhotons = cms.EDProducer("PATPhotonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatPhotons"),
    checkOverlaps = cms.PSet(
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            requireNoOverlaps = cms.bool(False),
            algorithm = cms.string('bySuperClusterSeed')
        )
    ),
    preselection = cms.string('')
)


process.cleanPatTaus = cms.EDProducer("PATTauCleaner",
    finalCut = cms.string('pt > 20. & abs(eta) < 2.3'),
    src = cms.InputTag("selectedPatTaus"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('tauID("decayModeFinding") > 0.5 & tauID("byLooseCombinedIsolationDeltaBetaCorr") > 0.5 & tauID("againstMuonMedium") > 0.5 & tauID("againstElectronMedium") > 0.5')
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    dynamicPhiRoad = cms.bool(False),
    HybridBarrelSeedThr = cms.double(1.0),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    eThreshB = cms.double(0.1),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    useEtForXi = cms.bool(True),
    step = cms.int32(17),
    eseed = cms.double(0.35),
    xi = cms.double(0.0),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    superclusterCollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    excludeFlagged = cms.bool(True),
    ecalhitproducer = cms.string('ecalRecHit')
)


process.clusterSummaryProducer = cms.EDProducer("ClusterSummaryProducer",
    verbose = cms.bool(False),
    doPixels = cms.bool(True),
    stripModule = cms.string('TOB,TIB,TID,TEC,TRACKER'),
    doStrips = cms.bool(True),
    stripVariables = cms.string('cHits,cSize,cCharge'),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    pixelModule = cms.string('BPIX,FPIX,PIXEL'),
    pixelVariables = cms.string('pHits,pSize,pCharge')
)


process.combinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyHPSPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        name = cms.string('sipt'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin'),
            DataType = cms.string('AOD'),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            EcalStripSumE_deltaEta = cms.double(0.03)
        ), 
        cms.PSet(
            dRcone = cms.double(0.12),
            name = cms.string('tau_en_recovery'),
            plugin = cms.string('RecoTauEnergyRecoveryPlugin2')
        ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        name = cms.string('combinatoric'),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(1),
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6)
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(1),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                nCharged = cms.uint32(3),
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6)
            )),
        isolationConeSize = cms.double(0.5),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.combinatoricRecoTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinatoricRecoTausDiscriminationByTanc = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    remapOutput = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dbLabel = cms.string('hpstanc')
)


process.combinatoricRecoTausHPSSelector = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.combinatoricRecoTausTancTransform = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("combinatoricRecoTausDiscriminationByTanc"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinedInclusiveSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedInclusiveSecondaryVertexPositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexPositive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexNegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexNegative'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.combinedSecondaryVertexPositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexPositive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexSoftLeptonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexSoftLepton'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfosV2"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexV1NegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1Negative'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.combinedSecondaryVertexV1PositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1Positive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexV2BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfosV2"))
)


process.combinedSecondaryVertexV2NegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2Negative'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfosV2"))
)


process.combinedSecondaryVertexV2PositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV2Positive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfosV2"))
)


process.convClusters = cms.EDProducer("TrackClusterRemover",
    trajectories = cms.InputTag("tobTecStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("tobTecStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("tobTecStepSelector","tobTecStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(30.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.convStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("convStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(1),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(3.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(5.0, 8.0),
        applyAdaptedPVCuts = cms.bool(False),
        dz_par1 = cms.vdouble(5.0, 8.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('convStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        d0_par2 = cms.vdouble(5.0, 8.0),
        d0_par1 = cms.vdouble(5.0, 8.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.5),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('convStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('convStepLoose'),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.0),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(5.0, 8.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('convStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            preFilterName = cms.string('convStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.convStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("convTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('convStepFitterSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter8'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.convTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("photonConvTrajSeedFromSingleLeg","convSeedCandidates"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('convCkfTrajectoryBuilder')
)


process.conversionStepConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('conversionStepTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.conversionStepTracks = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(False),
    MinPT = cms.double(0.05),
    makeReKeyedSeeds = cms.untracked.bool(False),
    copyExtras = cms.untracked.bool(True),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("convStepSelector","convStep")),
    allowFirstHitShare = cms.bool(True),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(1)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("convStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.conversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    useHitsSplitting = cms.bool(False),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    ValidHitBonus = cms.double(5.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    vetoClusteredHits = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    ecalIsoCut_offset = cms.double(999999999),
    hcalTowers = cms.InputTag("towerMaker"),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    isoEMin = cms.double(0.08),
    maxNumOfSeedsInOut = cms.int32(50),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    maxNumOfSeedsOutIn = cms.int32(50),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    useNumXstals = cms.bool(True),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    ecalIsoCut_slope = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoEtMin = cms.double(0.0),
    fractionShared = cms.double(0.5),
    minSCEt = cms.double(20.0),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    maxHOverE = cms.double(0.15),
    hOverEConeSize = cms.double(0.15),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isoInnerConeR = cms.double(3.5),
    isoConeR = cms.double(0.4),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    allowSharedFirstHit = cms.bool(True)
)


process.conversions = cms.EDProducer("ConvertedPhotonProducer",
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromConversions'),
    deltaCotCut = cms.double(0.05),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    maxReducedChiSq = cms.double(225.0),
    hcalTowers = cms.InputTag("towerMaker"),
    recoverOneTrackCase = cms.bool(True),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    risolveConversionAmbiguity = cms.bool(True),
    inOutTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    outInTrackCollection = cms.string(''),
    cleanedConvertedPhotonCollection = cms.string(''),
    minSCEt = cms.double(20.0),
    maxNbrOfIterations = cms.int32(40),
    maxHOverE = cms.double(0.15),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromConversions'),
    hOverEConeSize = cms.double(0.15),
    minApproachDisCut = cms.double(0.0),
    maxNumOfCandidates = cms.int32(3),
    minChiSqImprovement = cms.double(50.0),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    AlgorithmName = cms.string('ecalSeeded')
)


process.corMetGlobalMuons = cms.EDProducer("MuonMET",
    muonMETDepositValueMapInputTag = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metTypeInputTag = cms.InputTag("CaloMET"),
    muonsInputTag = cms.InputTag("muons"),
    uncorMETInputTag = cms.InputTag("met")
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(True),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    applyCrackCorrection = cms.bool(True),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    hyb_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(1.1),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181),
        brLinearHighThr = cms.double(8.0),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(False),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.9),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93),
        brLinearHighThr = cms.double(6.0),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221)
    ),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(2),
            ExcludeRPCFromFit = cms.bool(True),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(0),
            ExcludeRPCFromFit = cms.bool(True),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(False),
        Strict1Leg = cms.bool(False),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(2),
            ExcludeRPCFromFit = cms.bool(True),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(0),
            ExcludeRPCFromFit = cms.bool(True),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(True),
        Strict1Leg = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    skipMatchedMuons = cms.bool(False),
    muonCollectionTag = cms.InputTag("muons1stStep"),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("cosmicsVetoSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('none'),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("cosmicsVetoTracksRaw"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.cosmictrackSelector = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("ctfWithMaterialTracksCosmics"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    UseAverageTime = cms.bool(False),
    CSCStripPeakThreshold = cms.double(10.0),
    readBadChannels = cms.bool(True),
    CSCUseStaticPedestals = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    readBadChambers = cms.bool(True),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCstripWireDeltaTime = cms.int32(8),
    CSCUseCalibrations = cms.bool(True),
    CSCUseTimingCorrections = cms.bool(True),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    UseParabolaFit = cms.bool(False),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    UseFivePoleFit = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCStripClusterChargeCut = cms.double(25.0)
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    inputObjects = cms.InputTag("csc2DRecHits"),
    algo_psets = cms.VPSet(cms.PSet(
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1'),
        algo_name = cms.string('CSCSegAlgoSK'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1),
        algo_psets = cms.VPSet(cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.003),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0)
        ), 
            cms.PSet(
                dPhiFineMax = cms.double(0.025),
                verboseInfo = cms.untracked.bool(True),
                chi2Max = cms.double(99999.0),
                dPhiMax = cms.double(0.025),
                wideSeg = cms.double(3.0),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0)
            ))
    ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoTC'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                dPhiFineMax = cms.double(0.02),
                verboseInfo = cms.untracked.bool(True),
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                dPhiMax = cms.double(0.003),
                chi2ndfProbMin = cms.double(0.0001),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2)
            ), 
                cms.PSet(
                    dPhiFineMax = cms.double(0.013),
                    verboseInfo = cms.untracked.bool(True),
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    dPhiMax = cms.double(0.00198),
                    chi2ndfProbMin = cms.double(0.0001),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoDF'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1),
            algo_psets = cms.VPSet(cms.PSet(
                tanThetaMax = cms.double(1.2),
                maxRatioResidualPrune = cms.double(3.0),
                dPhiFineMax = cms.double(0.025),
                tanPhiMax = cms.double(0.5),
                dXclusBoxMax = cms.double(8.0),
                preClustering = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                minHitsPerSegment = cms.int32(3),
                minHitsForPreClustering = cms.int32(10),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(8.0),
                nHitsPerClusterIsShower = cms.int32(20),
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    tanThetaMax = cms.double(2.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.8),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(10),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(12.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(12.0)
                ), 
                cms.PSet(
                    tanThetaMax = cms.double(1.2),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.5),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(30),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(8.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(8.0)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            algo_name = cms.string('CSCSegAlgoST'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                maxRatioResidualPrune = cms.double(3),
                yweightPenalty = cms.double(1.5),
                maxRecHitsInCluster = cms.int32(20),
                preClusteringUseChaining = cms.bool(True),
                ForceCovariance = cms.bool(False),
                hitDropLimit6Hits = cms.double(0.3333),
                NormChi2Cut2D = cms.double(20.0),
                BPMinImprovement = cms.double(10000.0),
                Covariance = cms.double(0.0),
                tanPhiMax = cms.double(0.5),
                onlyBestSegment = cms.bool(False),
                SeedBig = cms.double(0.0015),
                dRPhiFineMax = cms.double(8.0),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                dXclusBoxMax = cms.double(4.0),
                BrutePruning = cms.bool(True),
                curvePenaltyThreshold = cms.double(0.85),
                CorrectTheErrors = cms.bool(True),
                hitDropLimit4Hits = cms.double(0.6),
                useShowering = cms.bool(False),
                CSCDebug = cms.untracked.bool(False),
                yweightPenaltyThreshold = cms.double(1.0),
                tanThetaMax = cms.double(1.2),
                NormChi2Cut3D = cms.double(10.0),
                minHitsPerSegment = cms.int32(3),
                ForceCovarianceAll = cms.bool(False),
                dPhiFineMax = cms.double(0.025),
                prePrunLimit = cms.double(3.17),
                hitDropLimit5Hits = cms.double(0.8),
                preClustering = cms.bool(True),
                prePrun = cms.bool(True),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                Pruning = cms.bool(True),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    maxRatioResidualPrune = cms.double(3),
                    yweightPenalty = cms.double(1.5),
                    maxRecHitsInCluster = cms.int32(24),
                    preClusteringUseChaining = cms.bool(True),
                    ForceCovariance = cms.bool(False),
                    hitDropLimit6Hits = cms.double(0.3333),
                    NormChi2Cut2D = cms.double(20.0),
                    BPMinImprovement = cms.double(10000.0),
                    Covariance = cms.double(0.0),
                    tanPhiMax = cms.double(0.5),
                    onlyBestSegment = cms.bool(False),
                    SeedBig = cms.double(0.0015),
                    dRPhiFineMax = cms.double(8.0),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    dXclusBoxMax = cms.double(4.0),
                    BrutePruning = cms.bool(True),
                    curvePenaltyThreshold = cms.double(0.85),
                    CorrectTheErrors = cms.bool(True),
                    hitDropLimit4Hits = cms.double(0.6),
                    useShowering = cms.bool(False),
                    CSCDebug = cms.untracked.bool(False),
                    yweightPenaltyThreshold = cms.double(1.0),
                    tanThetaMax = cms.double(1.2),
                    NormChi2Cut3D = cms.double(10.0),
                    minHitsPerSegment = cms.int32(3),
                    ForceCovarianceAll = cms.bool(False),
                    dPhiFineMax = cms.double(0.025),
                    prePrunLimit = cms.double(3.17),
                    hitDropLimit5Hits = cms.double(0.8),
                    preClustering = cms.bool(True),
                    prePrun = cms.bool(True),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    Pruning = cms.bool(True),
                    dYclusBoxMax = cms.double(8.0)
                ))
        )),
    algo_type = cms.int32(4)
)


process.ctfCombinedSeeds = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesCombinedSeeds"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfNoOverlaps = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesNoOverlaps"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfPixelLess = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesPixelLess"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('RKFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfWithMaterialTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesP5"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.dedxDiscrimASmi = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(3),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimBTag = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(1),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimProd = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(0),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimSmi = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(2),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('generic'),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    trajectoryTrackAssociation = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    exponent = cms.double(-2.0)
)


process.dedxMedian = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('median'),
    ShapeTest = cms.bool(False),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxTruncated40 = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('truncated'),
    ShapeTest = cms.bool(True),
    fraction = cms.double(0.4),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxUnbinned = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('unbinnedFit'),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.detachedTripletStep = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(True),
    MinPT = cms.double(0.05),
    copyExtras = cms.untracked.bool(False),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("detachedTripletStepSelector","detachedTripletStepVtx"), cms.InputTag("detachedTripletStepSelector","detachedTripletStepTrk")),
    allowFirstHitShare = cms.bool(True),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1, 1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("detachedTripletStepTracks"), cms.InputTag("detachedTripletStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.detachedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("pixelPairStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("pixelPairStepSelector","pixelPairStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.detachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('detachedTripletStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.3),
            originHalfLength = cms.double(15.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.detachedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("detachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(1.2, 3.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('detachedTripletStepVtxLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        d0_par2 = cms.vdouble(1.3, 3.0),
        d0_par1 = cms.vdouble(1.2, 3.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('loose'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.6, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(1.6, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrkLoose'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(1.6, 4.0),
            d0_par1 = cms.vdouble(1.6, 4.0),
            preFilterName = cms.string(''),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.9, 3.0),
            dz_par2 = cms.vdouble(1.0, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepVtxTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            d0_par2 = cms.vdouble(1.0, 3.0),
            d0_par1 = cms.vdouble(0.95, 3.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.5),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrkTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            d0_par2 = cms.vdouble(1.1, 4.0),
            d0_par1 = cms.vdouble(1.1, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.9, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.8, 3.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepVtx'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.9, 3.0),
            d0_par1 = cms.vdouble(0.85, 3.0),
            preFilterName = cms.string('detachedTripletStepVtxTight'),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.4),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(1.0, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrk'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(1.0, 4.0),
            d0_par1 = cms.vdouble(1.0, 4.0),
            preFilterName = cms.string('detachedTripletStepTrkTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.detachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("detachedTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('detachedTripletStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.detachedTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("detachedTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter3'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.doubleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('doubleVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(False),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(True),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt2DCosmicSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits")
)


process.dt2DSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits")
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(False),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(1),
            perform_delta_rejecting = cms.bool(False),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(True),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(2),
            perform_delta_rejecting = cms.bool(True),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        perform_delta_rejecting = cms.bool(True),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    debug = cms.untracked.bool(False),
    perform_delta_rejecting = cms.bool(False),
    hit_afterT0_resolution = cms.double(0.03),
    recHits4DLabel = cms.InputTag("dt4DSegments"),
    performT0_vdriftSegCorrection = cms.bool(True)
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    outColl = cms.string(''),
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    eeFEToBeRecovered = cms.string('eeFE')
)


process.ecalDrivenElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    endcapSuperClusters = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    SeedConfiguration = cms.PSet(
        PhiMax2B = cms.double(0.002),
        hOverEPtMin = cms.double(0.0),
        PhiMax2F = cms.double(0.003),
        searchInTIDTEC = cms.bool(True),
        PhiMin2F = cms.double(-0.003),
        deltaZ1WithVertex = cms.double(25.0),
        HighPtThreshold = cms.double(35.0),
        r2MinF = cms.double(-0.15),
        maxHBarrel = cms.double(0.0),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi1High = cms.double(0.08),
        ePhiMin1 = cms.double(-0.125),
        hcalTowers = cms.InputTag("towerMaker"),
        LowPtThreshold = cms.double(5.0),
        maxHOverEBarrel = cms.double(0.15),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        measurementTrackerName = cms.string(''),
        SizeWindowENeg = cms.double(0.675),
        nSigmasDeltaZ1 = cms.double(5.0),
        rMaxI = cms.double(0.2),
        maxHEndcaps = cms.double(0.0),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        pPhiMin1 = cms.double(-0.075),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        pPhiMax1 = cms.double(0.125),
        SCEtCut = cms.double(4.0),
        z2MaxB = cms.double(0.09),
        fromTrackerSeeds = cms.bool(True),
        hcalRecHits = cms.InputTag("hbhereco"),
        z2MinB = cms.double(-0.09),
        rMinI = cms.double(-0.2),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        useRecoVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        DeltaPhi2F = cms.double(0.012),
        applyHOverECut = cms.bool(True),
        hOverEHFMinE = cms.double(0.8),
        DeltaPhi2B = cms.double(0.008),
        PhiMin2B = cms.double(-0.002)
    ),
    barrelSuperClusters = cms.InputTag("correctedHybridSuperClusters")
)


process.ecalDrivenGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    useGsfPfRecTracks = cms.bool(True)
)


process.ecalDrivenGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ctfTracksTag = cms.InputTag("generalTracks"),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(False),
    minMVAPflow = cms.double(-0.4),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag(""),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.4),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.4),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.ecalGlobalUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    outOfTimeThresholdGain61pEB = cms.double(5),
    eePulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    amplitudeThresholdEE = cms.double(10),
    EBtimeFitParameters = cms.vdouble(-2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
        91.01147, -50.35761, 11.05621),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEtimeNconst = cms.double(31.8),
    EBtimeConstantTerm = cms.double(0.6),
    outOfTimeThresholdGain61pEE = cms.double(10),
    doEBtimeCorrection = cms.bool(False),
    EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
    EBtimeNconst = cms.double(28.5),
    kPoorRecoFlagEB = cms.bool(True),
    ebPulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    EBtimeFitLimits_Lower = cms.double(0.2),
    kPoorRecoFlagEE = cms.bool(False),
    chi2ThreshEB_ = cms.double(36.0),
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EEtimeFitParameters = cms.vdouble(-2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
        140.7432, -75.41106, 16.20277),
    algo = cms.string('EcalUncalibRecHitWorkerGlobal'),
    EEchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    EEtimeCorrShiftBins = cms.vdouble(-0.896, -0.896, -0.896, -0.896, -0.563, 
        -0.392, -0.287, -0.203, -0.135, -0.1, 
        -0.068, -0.05, -0.06, -0.052, -0.055, 
        -0.05, -0.052, -0.056, -0.055, -0.056, 
        -0.048, -0.037, -0.038, -0.037, -0.025, 
        -0.026, -0.024, -0.013, -0.003, 0.005, 
        0.02, 0.026, 0.008, 0.007, -0.006, 
        0.024, 0.045, 0.062, 0.085, 0.088, 
        0.111, 0.139, 0.156, 0.176, 0.21, 
        0.242, 0.267, 0.301, 0.318, 0.278, 
        0.287, 0.218, 0.305, 0.245, 0.184, 
        -0.159, -0.095, 0.037),
    outOfTimeThresholdGain12mEE = cms.double(10),
    outOfTimeThresholdGain12mEB = cms.double(5),
    EEtimeFitLimits_Upper = cms.double(1.4),
    EEtimeFitLimits_Lower = cms.double(0.2),
    ebSpikeThreshold = cms.double(1.042),
    EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
    EEtimeCorrAmplitudeBins = cms.vdouble(15.7, 17.6, 19.7, 22.1, 24.8, 
        27.9, 31.3, 35.1, 39.4, 44.2, 
        49.6, 55.6, 62.4, 70, 78.6, 
        88.1, 98.9, 111, 124.5, 139.7, 
        156.7, 175.9, 197.3, 221.4, 248.4, 
        278.7, 312.7, 350.9, 393.7, 441.7, 
        495.6, 556.1, 624, 700.1, 785.5, 
        881.4, 988.9, 1109.6, 1245, 1396.9, 
        1567.3, 1758.6, 1973.1, 2213.9, 2484, 
        2787.1, 3127.2, 3508.8, 3936.9, 4417.3, 
        4956.3, 5561.1, 6239.6, 7001, 7522.8, 
        8440.7, 9470.6, 10626),
    doEEtimeCorrection = cms.bool(False),
    amplitudeThresholdEB = cms.double(10),
    outOfTimeThresholdGain12pEE = cms.double(10),
    outOfTimeThresholdGain12pEB = cms.double(5),
    EBtimeCorrAmplitudeBins = cms.vdouble(7.9, 8.9, 10, 11.2, 12.5, 
        14.1, 15.8, 17.7, 19.9, 22.3, 
        25, 28.1, 31.5, 35.3, 39.7, 
        44.5, 49.9, 56, 62.8, 70.5, 
        79.1, 88.8, 99.6, 111.7, 125.4, 
        140.7, 157.9, 177.1, 198.7, 223, 
        250.2, 280.7, 315, 353.4, 396.5, 
        444.9, 499.2, 560.1, 628.4, 705.1, 
        791.1, 887.7, 996, 1117.5, 1253.9, 
        1406.8, 1578.5, 1771.1, 1987.2, 2229.7, 
        2501.8, 2807, 3149.5, 3533.8, 3895.9, 
        3896, 4311.8, 4837.9, 5428.2, 6090.6, 
        6833.7, 7667.5, 8603.1, 9652.9, 10830, 
        12152, 13635, 15298, 17165, 19260, 
        21610),
    EBtimeCorrShiftBins = cms.vdouble(-1.77, -1.77, -1.77, -1.77, -1.666, 
        -1.43, -1.233, -1.012, -0.866, -0.736, 
        -0.64, -0.561, -0.505, -0.452, -0.405, 
        -0.363, -0.335, -0.305, -0.279, -0.26, 
        -0.239, -0.22, -0.204, -0.191, -0.186, 
        -0.177, -0.158, -0.137, -0.126, -0.115, 
        -0.104, -0.096, -0.085, -0.064, -0.056, 
        -0.036, -0.02, -0.006, -0.02, -0.009, 
        -0.02, 0.005, 0.053, 0.076, 0.093, 
        0.137, 0.143, 0.171, 0.222, 0.229, 
        0.271, 0.298, 0.312, 0.307, 0.254, 
        -0.997, -0.859, -0.819, -0.775, -0.589, 
        -0.428, -0.288, -0.434, -0.277, -0.21, 
        -0.179, -0.134, 0.362, 0.152, -0.282, 
        -0.382),
    outOfTimeThresholdGain61mEB = cms.double(5),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    outOfTimeThresholdGain61mEE = cms.double(10),
    EEtimeConstantTerm = cms.double(1.0),
    EBchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    chi2ThreshEE_ = cms.double(95.0),
    EBtimeFitLimits_Upper = cms.double(1.4)
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker'),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis")
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    recoverEEVFE = cms.bool(False),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    laserCorrection = cms.bool(True),
    EBLaserMIN = cms.double(0.5),
    killDeadChannels = cms.bool(True),
    dbStatusToBeExcludedEB = cms.vint32(142),
    EEuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEE"),
    dbStatusToBeExcludedEE = cms.vint32(142),
    EELaserMIN = cms.double(0.5),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    cleaningConfig = cms.PSet(
        e6e2thresh = cms.double(0.04),
        tightenCrack_e6e2_double = cms.double(3),
        tightenCrack_e4e1_single = cms.double(3),
        cThreshold_barrel = cms.double(4),
        e4e1Threshold_barrel = cms.double(0.08),
        tightenCrack_e1_single = cms.double(2),
        e4e1_b_barrel = cms.double(-0.024),
        e4e1_a_barrel = cms.double(0.04),
        cThreshold_double = cms.double(10),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        cThreshold_endcap = cms.double(15),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e4e1Threshold_endcap = cms.double(0.3),
        tightenCrack_e1_double = cms.double(2)
    ),
    logWarningEtThreshold_EE_FE = cms.double(50),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    recoverEBFE = cms.bool(True),
    algo = cms.string('EcalRecHitWorkerSimple'),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    singleChannelRecoveryThreshold = cms.double(8),
    ChannelStatusToBeExcluded = cms.vint32(3, 4, 8, 9, 10, 
        11, 12, 13, 14),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    recoverEEFE = cms.bool(True),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EBLaserMAX = cms.double(2),
    flagsMapDBReco = cms.vint32(0, 0, 0, 0, 4, 
        -1, -1, -1, 4, 4, 
        7, 7, 7, 8, 9),
    EBuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEB"),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    EELaserMAX = cms.double(3),
    logWarningEtThreshold_EB_FE = cms.double(50),
    recoverEEIsolatedChannels = cms.bool(False)
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    doEndcap = cms.bool(True),
    tpOutputCollection = cms.string(''),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    skipModule = cms.bool(False),
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True)
)


process.egammaCTFFinalFitWithMaterial = cms.EDProducer("TrackProducer",
    src = cms.InputTag("siStripElectrons"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('egammaCTFWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('PropagatorWithMaterial')
)


process.eidCutBasedExt = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustHighEnergy = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('highenergy'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.elPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoValueCharged03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        tryBoth = cms.bool(True),
        intStrip = cms.double(0.0),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("reducedEcalRecHitsEE"),
        recHitFlagsToBeExcluded = cms.vstring('kFaultyHardware', 
            'kPoorCalib', 
            'kTowerRecovered', 
            'kDead'),
        intRadius = cms.double(0.0),
        severityLevelCut = cms.int32(4),
        energyMin = cms.double(0.095),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        vetoClustered = cms.bool(False),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("reducedEcalRecHitsEB")
    )
)


process.eleIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.eleIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("generalTracks")
    )
)


process.eleIsoFromDepsEcalFromHitsByCrystal = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('NumCrystalVeto(3.0)', 
            'NumCrystalEtaPhiVeto(1.5,9999.0)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.095)', 
            'EcalEndcaps:AbsThreshold(0.110)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(0.7)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.electronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("electronMergedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForElectrons')
)


process.electronEcalRecHitIsolationLcone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    useNumCrystals = cms.bool(True),
    etMinBarrel = cms.double(0.0),
    intRadiusEndcap = cms.double(3.0),
    tryBoth = cms.bool(True),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    eMinEndcap = cms.double(0.0),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    etMinEndcap = cms.double(0.11),
    eMinBarrel = cms.double(0.095),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    jurassicWidth = cms.double(1.5),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    extRadius = cms.double(0.4),
    useIsolEt = cms.bool(True),
    vetoClustered = cms.bool(False),
    intRadiusBarrel = cms.double(3.0),
    subtract = cms.bool(False),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronEcalRecHitIsolationScone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    useNumCrystals = cms.bool(True),
    etMinBarrel = cms.double(0.0),
    intRadiusEndcap = cms.double(3.0),
    tryBoth = cms.bool(True),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    eMinEndcap = cms.double(0.0),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    etMinEndcap = cms.double(0.11),
    eMinBarrel = cms.double(0.095),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    jurassicWidth = cms.double(1.5),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    extRadius = cms.double(0.3),
    useIsolEt = cms.bool(True),
    vetoClustered = cms.bool(False),
    intRadiusBarrel = cms.double(3.0),
    subtract = cms.bool(False),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronGsfTracks = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("electronCkfTrackCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('gsf'),
    Propagator = cms.string('fwdGsfElectronPropagator')
)


process.electronHcalDepth1TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth1TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth2TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(2),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth2TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(2),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalTowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(-1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalTowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(-1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("gsfElectrons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(11),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.electronMergedSeeds = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeeds"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.electronTrackIsolationLcone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    absolut = cms.bool(True),
    trackProducer = cms.InputTag("generalTracks"),
    stripBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    electronProducer = cms.InputTag("gsfElectrons"),
    maxVtxDistXY = cms.double(9999.0),
    extRadius = cms.double(0.4),
    ptMin = cms.double(0.7),
    maxVtxDist = cms.double(0.2),
    stripEndcap = cms.double(0.015),
    intRadiusBarrel = cms.double(0.015),
    BeamspotProducer = cms.InputTag("offlineBeamSpot")
)


process.electronTrackIsolationScone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    absolut = cms.bool(True),
    trackProducer = cms.InputTag("generalTracks"),
    stripBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    electronProducer = cms.InputTag("gsfElectrons"),
    maxVtxDistXY = cms.double(9999.0),
    extRadius = cms.double(0.3),
    ptMin = cms.double(0.7),
    maxVtxDist = cms.double(0.2),
    stripEndcap = cms.double(0.015),
    intRadiusBarrel = cms.double(0.015),
    BeamspotProducer = cms.InputTag("offlineBeamSpot")
)


process.fixedConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("fixedConePFTauDecayModeProducer")
)


process.fixedConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer")
)


process.fixedConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.fixedConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.fixedConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.fixedConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauProducer = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.fixedConeRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.fixedGridRhoAll = cms.EDProducer("FixedGridRhoProducer",
    EtaRegion = cms.string('All'),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAll = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    pfCandidatesTag = cms.InputTag("particleFlow"),
    maxRapidity = cms.double(5.0)
)


process.gamIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        tryBoth = cms.bool(True),
        intStrip = cms.double(0.0),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("reducedEcalRecHitsEE"),
        recHitFlagsToBeExcluded = cms.vstring('kFaultyHardware', 
            'kPoorCalib', 
            'kTowerRecovered', 
            'kDead'),
        intRadius = cms.double(0.0),
        severityLevelCut = cms.int32(4),
        energyMin = cms.double(0.095),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        vetoClustered = cms.bool(False),
        detector = cms.string('Ecal'),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("reducedEcalRecHitsEB")
    )
)


process.gamIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.gamIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("generalTracks")
    )
)


process.gamIsoFromDepsEcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalBarrel:0.045', 
            'EcalBarrel:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.095)', 
            'EcalEndcaps:0.070', 
            'EcalEndcaps:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalEndcaps:AbsThreshold(0.110)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.generalConversionStepConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('conversionStepConversionTrackProducer'),
    TrackProducer1 = cms.string('generalConversionTrackProducer')
)


process.generalConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('generalTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.generalInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    TrackProducer2 = cms.string('generalConversionStepConversionTrackMerger'),
    TrackProducer1 = cms.string('inOutOutInConversionTrackMerger')
)


process.generalTracks = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(False),
    MinPT = cms.double(0.05),
    makeReKeyedSeeds = cms.untracked.bool(False),
    copyExtras = cms.untracked.bool(True),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("initialStepSelector","initialStep"), cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"), cms.InputTag("pixelPairStepSelector","pixelPairStep"), cms.InputTag("detachedTripletStep"), cms.InputTag("mixedTripletStep"), 
        cms.InputTag("pixelLessStepSelector","pixelLessStep"), cms.InputTag("tobTecStepSelector","tobTecStep")),
    allowFirstHitShare = cms.bool(True),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("initialStepTracks"), cms.InputTag("lowPtTripletStepTracks"), cms.InputTag("pixelPairStepTracks"), cms.InputTag("detachedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks"), 
        cms.InputTag("pixelLessStepTracks"), cms.InputTag("tobTecStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.generalV0Candidates = cms.EDProducer("V0Producer",
    kShortNormalizedMassCut = cms.double(0.0),
    vtxChi2Cut = cms.double(7.0),
    lambdaNormalizedMassCut = cms.double(0.0),
    selectKshorts = cms.bool(True),
    tkDCACut = cms.double(1.0),
    tkChi2Cut = cms.double(5.0),
    tkNhitsCut = cms.int32(6),
    trackRecoAlgorithm = cms.InputTag("generalTracks"),
    vtxSignificance2DCut = cms.double(15.0),
    selectLambdas = cms.bool(True),
    trackQualities = cms.vstring('loose'),
    vtxSignificance3DCut = cms.double(0.0),
    lambdaMassCut = cms.double(0.05),
    rVtxCut = cms.double(0.0),
    vertexFitter = cms.InputTag("KalmanVertexFitter"),
    impactParameterSigCut = cms.double(2.0),
    collinearityCut = cms.double(0.02),
    lVtxCut = cms.double(0.0),
    kShortMassCut = cms.double(0.07),
    useSmoothing = cms.bool(True),
    innerHitPosCut = cms.double(4.0),
    mPiPiCut = cms.double(0.6)
)


process.ghostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('ghostTrack'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("ghostTrackVertexTagInfos"))
)


process.ghostTrackVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(1),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.gk5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.gk5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("gk5CaloJets")
)


process.gk5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.gk7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("gk7CaloJets")
)


process.gk7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    BaseLabel = cms.string('GLB'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    InputCollection = cms.InputTag("globalMuons"),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        DYTthrs = cms.vint32(10, 5),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(30.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    InputLinksCollection = cms.InputTag("globalMuons")
)


process.globalCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("globalSeedsFromTripletsWithVertices"), cms.InputTag("globalSeedsFromPairsWithVertices"))
)


process.globalCosmicMuons = cms.EDProducer("GlobalCosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons")
)


process.globalCosmicMuons1Leg = cms.EDProducer("GlobalCosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons1Leg")
)


process.globalMixedSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('MixedLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DYTthrs = cms.vint32(30, 15),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            Eta_fixed = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks"),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx")
)


process.globalPixelLessSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(40)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(5000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelLessLayerPairs4PixelLessTracking')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.globalPixelSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('PixelLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DYTthrs = cms.vint32(30, 15),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            Eta_fixed = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks"),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx")
)


process.globalSeedsFromPairsWithVertices = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.2),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.2),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(0.9),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('MixedLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.globalSeedsFromTriplets = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.gsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('electronGsfTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.gsfElectronCores = cms.EDProducer("GsfElectronCoreProducer",
    ecalDrivenGsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    pflowGsfElectronCoresTag = cms.InputTag("pfElectronTranslator","pf"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    pfSuperClusterTrackMap = cms.InputTag("pfElectronTranslator","pf"),
    ctfTracks = cms.InputTag("generalTracks"),
    useGsfPfRecTracks = cms.bool(True),
    pfSuperClusters = cms.InputTag("pfElectronTranslator","pf")
)


process.gsfElectrons = cms.EDProducer("GsfElectronProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ctfTracksTag = cms.InputTag("generalTracks"),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(True),
    minMVAPflow = cms.double(-0.1),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag("pfElectronTranslator","pf"),
    pflowGsfElectronsTag = cms.InputTag("pfElectronTranslator","pf"),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.1),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag("ecalDrivenGsfElectrons"),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.1),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(True),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.1),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("gsfElectronCores"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.gsfGeneralConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('gsfConversionTrackProducer'),
    TrackProducer1 = cms.string('generalConversionTrackProducer')
)


process.gsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('gsfConversionTrackProducer'),
    TrackProducer1 = cms.string('generalInOutOutInConversionTrackMerger')
)


process.hbheprereco = cms.EDProducer("HcalHitReconstructor",
    setTimingShapedCutsFlags = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    correctionPhaseNS = cms.double(6.0),
    timingshapedcutsParameters = cms.PSet(
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0),
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0)
    ),
    digiLabel = cms.InputTag("hcalDigis"),
    pulseShapeParameters = cms.PSet(
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5ChargeThreshold = cms.double(70),
        MinimumTS4TS5Threshold = cms.double(100),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TrianglePeakTS = cms.uint32(4),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        UseDualFit = cms.bool(True),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        TriangleIgnoreSlow = cms.bool(False),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        MinimumChargeThreshold = cms.double(20),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000)
    ),
    setHSCPFlags = cms.bool(True),
    firstAuxTS = cms.int32(4),
    setSaturationFlags = cms.bool(True),
    useLeakCorrection = cms.bool(False),
    flagParameters = cms.PSet(
        nominalPedestal = cms.double(3.0),
        hitMultiplicityThreshold = cms.int32(17),
        hitEnergyMinimum = cms.double(1.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    setTimingTrustFlags = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    Subdetector = cms.string('HBHE'),
    hscpParameters = cms.PSet(
        slopeMax = cms.double(-0.6),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        TimingEnergyThreshold = cms.double(30.0),
        slopeMin = cms.double(-1.5),
        outerMin = cms.double(0.0),
        outerMax = cms.double(0.1),
        fracLeaderMin = cms.double(0.4),
        r2Min = cms.double(0.1),
        r2Max = cms.double(0.5),
        fracLeaderMax = cms.double(0.7)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hbhereco = cms.EDProducer("HBHEIsolatedNoiseReflagger",
    eeInput = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    LooseRBXHits1 = cms.int32(14),
    TightHPDHits2 = cms.int32(3),
    TightHPDHits1 = cms.int32(5),
    LooseEcalIsol = cms.double(0.08),
    ebInput = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    MinValidTrackPtBarrel = cms.double(0.9),
    LooseDiHitEne = cms.double(50.0),
    HBThreshold = cms.double(0.7),
    UseEcalRecoveredHits = cms.bool(False),
    TightTrackIsol = cms.double(0.05),
    LooseHPDHits1 = cms.int32(6),
    TightRBXHits2 = cms.int32(10),
    TightRBXHits1 = cms.int32(12),
    LooseRBXHits2 = cms.int32(10),
    TightEcalIsol = cms.double(0.04),
    LooseHcalIsol = cms.double(0.08),
    TightHcalIsol = cms.double(0.04),
    EBThreshold = cms.double(0.07),
    hbheInput = cms.InputTag("hbheprereco"),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    TightHPDEne2 = cms.double(25.0),
    TightMonoHitEne = cms.double(15.0),
    TightHPDEne1 = cms.double(10.0),
    LooseHPDHits2 = cms.int32(3),
    LooseHPDEne2 = cms.double(80.0),
    MinValidTrackNHits = cms.int32(5),
    LooseRBXEne1 = cms.double(10.0),
    MinValidTrackPt = cms.double(0.3),
    LooseHPDEne1 = cms.double(10.0),
    HEDThreshold = cms.double(0.8),
    trackExtrapolationInput = cms.InputTag("trackExtrapolator"),
    LooseMonoHitEne = cms.double(35.0),
    TightRBXEne2 = cms.double(50.0),
    LooseRBXEne2 = cms.double(300.0),
    TightRBXEne1 = cms.double(10.0),
    LooseTrackIsol = cms.double(0.1),
    UseHcalRecoveredHits = cms.bool(True),
    TightDiHitEne = cms.double(15.0),
    debug = cms.untracked.bool(False),
    EcalAcceptSeverityLevel = cms.uint32(3)
)


process.hbherecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HBHE'),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    lMinRatio = cms.double(-999.0),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    TS4TS5EnergyThreshold = cms.double(50),
    tMinRBXHits = cms.int32(50),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    tMinZeros = cms.int32(8),
    minEEMF = cms.double(50.0),
    tMaxLowEHitTime = cms.double(9999.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    minERatio = cms.double(50.0),
    lMinHPDNoOtherHits = cms.int32(10),
    hlMaxHPDEMF = cms.double(-9999.0),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    tMaxRatio = cms.double(999.0),
    tMinHighEHitTime = cms.double(-7.0),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    lMaxRatio = cms.double(999.0),
    minEZeros = cms.double(10.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(-999.0),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    pMaxHPDEMF = cms.double(0.02),
    tMinLowEHitTime = cms.double(-9999.0),
    tMaxHighEHitTime = cms.double(6.0),
    pMaxLowEHitTime = cms.double(6.0),
    lMinHPDHits = cms.int32(17),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    pMinE = cms.double(40.0),
    pMinHPDNoOtherHits = cms.int32(7),
    pMaxHighEHitTime = cms.double(5.0),
    fillTracks = cms.bool(True),
    HcalAcceptSeverityLevel = cms.uint32(9),
    digiCollName = cms.string('hcalDigis'),
    minTrackPt = cms.double(1.0),
    fillDigis = cms.bool(True),
    maxTrackEta = cms.double(2.0),
    recHitCollName = cms.string('hbhereco'),
    fillRecHits = cms.bool(True),
    caloTowerCollName = cms.string('towerMaker'),
    maxCaloTowerIEta = cms.int32(20),
    maxProblemRBXs = cms.int32(20),
    trackCollName = cms.string('generalTracks'),
    fillCaloTowers = cms.bool(True),
    HcalRecHitFlagsToBeExcluded = cms.vint32(11, 12, 13, 14, 15)
)


process.hfEMClusters = cms.EDProducer("HFEMClusterProducer",
    hits = cms.InputTag("hfreco"),
    usePMTFlag = cms.bool(True),
    minTowerEnergy = cms.double(4.0),
    maximumRenergy = cms.double(50),
    maximumSL = cms.double(98),
    usePulseFlag = cms.bool(True),
    forcePulseFlagMC = cms.bool(False),
    correctionType = cms.int32(0),
    seedThresholdET = cms.double(5.0)
)


process.hfRecoEcalCandidate = cms.EDProducer("HFRecoEcalCandidateProducer",
    hfclusters = cms.InputTag("hfEMClusters"),
    e9e25Cut = cms.double(0.94),
    eSeLCut = cms.vdouble(-1, 99),
    eCOREe9Cut = cms.vdouble(-1, 99),
    e1e9Cut = cms.vdouble(-1, 99),
    Correct = cms.bool(True),
    intercept2DCut = cms.double(0.3)
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    digiTimeFromDB = cms.bool(True),
    S9S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        isS8S1 = cms.bool(False)
    ),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(1),
    correctionPhaseNS = cms.double(13.0),
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    digiLabel = cms.InputTag("hcalDigis"),
    setHSCPFlags = cms.bool(False),
    firstAuxTS = cms.int32(1),
    digistat = cms.PSet(
        HFdigiflagCoef = cms.vdouble(0.93, -0.38275, -0.012667),
        HFdigiflagExpectedPeak = cms.int32(2),
        HFdigiflagSamplesToAdd = cms.int32(3),
        HFdigiflagFirstSample = cms.int32(1),
        HFdigiflagMinEthreshold = cms.double(40)
    ),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel2 = cms.int32(4),
        hfTimingTrustLevel1 = cms.int32(1)
    ),
    PETstat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_R_29 = cms.vdouble(0.8),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_R = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        long_R_29 = cms.vdouble(0.8),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98)
    ),
    setSaturationFlags = cms.bool(True),
    useLeakCorrection = cms.bool(False),
    setTimingTrustFlags = cms.bool(True),
    S8S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        isS8S1 = cms.bool(True)
    ),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    Subdetector = cms.string('HF'),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    firstSample = cms.int32(2)
)


process.hfrecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    Subdetector = cms.string('HF'),
    correctForTimeslew = cms.bool(False),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(False),
    firstSample = cms.int32(4)
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    samplesToAdd = cms.int32(4),
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    tsFromDB = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    useLeakCorrection = cms.bool(False),
    setHSCPFlags = cms.bool(True),
    firstAuxTS = cms.int32(4),
    Subdetector = cms.string('HO'),
    setTimingTrustFlags = cms.bool(False),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.horecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HO'),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hpsPFTauDiscriminationByDeadECALElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    minStatus = cms.uint32(12),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByDecayModeFinding = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByIsolationMVA2raw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso_v2.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVAraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    )
)


process.hpsPFTauDiscriminationByLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.795),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByLooseIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.85),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(-1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByMVA2LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.0639254)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.0220708)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.102071)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0233814)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.0391565)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.142564)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.00982555)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0596019)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.0381238)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.100381)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.011729)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.0203646)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.177502)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.0103449)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.257798)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.0966083)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0466023)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.0467638)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.0863876)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233436)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.0306715)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.992195)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.308324)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0370998)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.864643)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.0832094)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.791665)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.675537)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.87047)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233711)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.141383)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.122568)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.138286)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.100279)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.116113)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.191557)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0921955)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0936173)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.119732)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.1042)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0)
)


process.hpsPFTauDiscriminationByMVA3LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.1816889)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.1538533)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.5605197)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.66321647)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.86337829)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.94084531)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.98025548)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.80039471)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.49787951)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.74751109)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.94486511)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.63645148)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.9575507)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.9549247)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.83487612)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5577119)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.7271899)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.90410149)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.94858187)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.95044029)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.97195327)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99229473)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.92997772)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.3049897)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.92191792)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.96017671)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.98126549)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.80912107)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98326528)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.97490251)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.94708711)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.78914332)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.91818088)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.96754968)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.98437631)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.96684271)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.99065852)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.96952927)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.1180589)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.9714281)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.98451769)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.99372888)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.84681427)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98940611)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98308349)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.97482169)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3VTightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.89307231)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.96239871)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.98247749)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.99013329)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.9768821)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.9958095)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.98120493)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.60025311)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.98320472)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.9897899)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.9964357)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.88230568)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.99132508)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98467928)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.98235631)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVAElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    minMVA1prongBL = cms.double(0.054),
    minMVA1prongEC = cms.double(0.06),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        electronMedium = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    minMVA1prongStripsWgsfBL = cms.double(0.06),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMediumChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.2739'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.884),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByMediumIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByMediumMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('medium'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByTightChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.921),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByTightIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.94),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('tight'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByVLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.3)
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.hpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt > 2.5'),
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("hpsSelectionDiscriminator"),
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.hpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsTancTaus = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsTancTausSansRefs")
)


process.hpsTancTausDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8),
    maxEnEcal = cms.double(3.0)
)


process.hpsTancTausDiscriminationByDecayModeSelection = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsTancTausDiscriminationByFlightPath = cms.EDProducer("PFRecoTauDiscriminationByFlight",
    refitPV = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    vertexSource = cms.InputTag("offlinePrimaryVertices"),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.hpsTancTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.hpsTancTausDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsTancTausDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTanc = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("hpsTancTausDiscriminationByTancRaw"),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.95),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.hpsTancTausDiscriminationByTancMedium = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.97),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancRaw = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    dbLabel = cms.string('hpstanc')
)


process.hpsTancTausDiscriminationByTancTight = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.985),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancVLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsTancTausDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('deltaR(eta, phi, jetRef().eta, jetRef().phi) < 0.1'),
            name = cms.string('MatchingCone'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausDiscriminationByLeadingPionPtCut"),
            name = cms.string('lead pion'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausHPSSelector"),
            name = cms.string('HPS selection'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.htMet = cms.EDProducer("METProducer",
    src = cms.InputTag("midPointCone5CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMET'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetAK5 = cms.EDProducer("METProducer",
    src = cms.InputTag("ak5CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETAK5'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetAK7 = cms.EDProducer("METProducer",
    src = cms.InputTag("ak7CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETAK7'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetIC5 = cms.EDProducer("METProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETIC5'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetKT4 = cms.EDProducer("METProducer",
    src = cms.InputTag("kt4CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETKT4'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetKT6 = cms.EDProducer("METProducer",
    src = cms.InputTag("kt6CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETKT6'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetSC5 = cms.EDProducer("METProducer",
    src = cms.InputTag("sisCone5CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETSC5'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.htMetSC7 = cms.EDProducer("METProducer",
    src = cms.InputTag("sisCone7CaloJets"),
    METType = cms.string('MET'),
    alias = cms.string('HTMETSC7'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(20.0),
    InputType = cms.string('CaloJetCollection')
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    scCollection = cms.string(''),
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters"),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters')
)


process.ic5CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL1FastL2L3')
)


process.ic5CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL1FastL2L3Residual')
)


process.ic5CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL1L2L3')
)


process.ic5CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL1L2L3Residual')
)


process.ic5CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL2L3')
)


process.ic5CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5CaloJets"),
    correctors = cms.vstring('ic5CaloL2L3Residual')
)


process.ic5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL1FastL2L3')
)


process.ic5PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL1FastL2L3Residual')
)


process.ic5PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL1L2L3')
)


process.ic5PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL1L2L3Residual')
)


process.ic5PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL2L3')
)


process.ic5PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("iterativeCone5PFJets"),
    correctors = cms.vstring('ic5PFL2L3Residual')
)


process.ic7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("iterativeCone7CaloJets")
)


process.impactParameterMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('impactParameterMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.impactParameterTagInfos = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeGhostTrack = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.inOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('ckfInOutTracksFromConversions'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.inOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('outInConversionTrackProducer'),
    TrackProducer1 = cms.string('inOutConversionTrackProducer')
)


process.inclusiveSecondaryVertexFinderFilteredTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.5),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.79),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(2.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("bToCharmDecayVertexMerged")
)


process.inclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.79),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(2.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("inclusiveSecondaryVertices")
)


process.initialStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("initialStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.initialStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.6)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.initialStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("initialStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('initialStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('initialStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('initialStepLoose'),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('initialStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('initialStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.initialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("initialStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('initialStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.initialStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("initialStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter0'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.interestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEcalDetIdEBU = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridBarrelBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEleIsoDetId = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.04)
)


process.interestingEleIsoDetIdEB = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.095)
)


process.interestingEleIsoDetIdEE = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0.11),
    energyCut = cms.double(0.0)
)


process.interestingGamIsoDetId = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.04)
)


process.interestingGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.095)
)


process.interestingGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0.11),
    energyCut = cms.double(0.0)
)


process.interestingTrackEcalDetIds = cms.EDProducer("InterestingTrackEcalDetIdProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    TrackCollection = cms.InputTag("generalTracks"),
    MinTrackPt = cms.double(50.0)
)


process.isoDeposits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag(""),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag(""),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.iterativeCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.iterativeCone5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("iterativeCone5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.iterativeCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.iterativeCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.iterativeCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.jetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetTracksAssociatorAtVertexAK5PFCorr = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ak5PFJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexAK7PFCorr = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ak7PFJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.kt4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt4CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL1FastL2L3')
)


process.kt4CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL1FastL2L3Residual')
)


process.kt4CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL1L2L3')
)


process.kt4CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL1L2L3Residual')
)


process.kt4CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL2L3')
)


process.kt4CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt4CaloJets"),
    correctors = cms.vstring('kt4CaloL2L3Residual')
)


process.kt4CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt4JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("kt4CaloJets"),
    jet2TracksAtCALO = cms.InputTag("kt4JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("kt4JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.kt4JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("kt4CaloJets")
)


process.kt4JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("kt4CaloJets")
)


process.kt4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt4PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL1FastL2L3')
)


process.kt4PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL1FastL2L3Residual')
)


process.kt4PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL1L2L3')
)


process.kt4PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL1L2L3Residual')
)


process.kt4PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL2L3')
)


process.kt4PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt4PFJets"),
    correctors = cms.vstring('kt4PFL2L3Residual')
)


process.kt4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsCentral = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsCentralPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(3.1),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL1FastL2L3')
)


process.kt6CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL1FastL2L3Residual')
)


process.kt6CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL1L2L3')
)


process.kt6CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL1L2L3Residual')
)


process.kt6CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL2L3')
)


process.kt6CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    src = cms.InputTag("kt6CaloJets"),
    correctors = cms.vstring('kt6CaloL2L3Residual')
)


process.kt6CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt6JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralChargedPileUp = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfPileUpAllChargedParticles"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralNeutral = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfAllNeutralHadronsAndPhotons"),
    inputEtMin = cms.double(0.5),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralNeutralTight = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(3.1),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfAllNeutralHadronsAndPhotons"),
    inputEtMin = cms.double(1.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForRhoComputationVoronoi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL1FastL2L3')
)


process.kt6PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL1FastL2L3Residual')
)


process.kt6PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL1L2L3')
)


process.kt6PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL1L2L3Residual')
)


process.kt6PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL2L3')
)


process.kt6PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    src = cms.InputTag("kt6PFJets"),
    correctors = cms.vstring('kt6PFL2L3Residual')
)


process.kt6TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.6),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.logErrorHarvester = cms.EDProducer("LogErrorHarvester")


process.lowPtTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("initialStepTracks"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("initialStepSelector","initialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.lowPtTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('lowPtTripletStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.2)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.lowPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("lowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('lowPtTripletStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('lowPtTripletStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('lowPtTripletStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('lowPtTripletStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.lowPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("lowPtTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('lowPtTripletStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.lowPtTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("lowPtTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter1'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.lumiProducer = cms.EDProducer("LumiProducer",
    lumiversion = cms.untracked.string('0001'),
    ncacheEntries = cms.untracked.uint32(5),
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD')
)


process.mergedStandAloneMuonSeeds = cms.EDProducer("MuonSeedMerger",
    SeedCollections = cms.VInputTag(cms.InputTag("ancientMuonSeed"), cms.InputTag("MuonSeed"))
)


process.met = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMET'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.3),
    InputType = cms.string('CandidateCollection')
)


process.metHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.3),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("towerMakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metNoHF = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETNoHF'),
    noHF = cms.bool(True),
    globalThreshold = cms.double(0.3),
    InputType = cms.string('CandidateCollection')
)


process.metNoHFHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETNoHFHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(True),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.3),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("towerMakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metOpt = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("calotoweroptmaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETOpt'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('CandidateCollection')
)


process.metOptHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETOptHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("calotoweroptmakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metOptNoHF = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("calotoweroptmaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETOptNoHF'),
    noHF = cms.bool(True),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('CandidateCollection')
)


process.metOptNoHFHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETOptNoHFHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(True),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("calotoweroptmakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metsignificance = cms.EDProducer("METProducer",
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMETSignif'),
    InputType = cms.string('CandidateCollection'),
    HO_PhiResPar = cms.vdouble(0.02511),
    HF_PhiResPar = cms.vdouble(0.05022),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    EE_PhiResPar = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    alias = cms.string('RawCaloMETSignif'),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.5),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005)
)


process.mixedTripletStep = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(True),
    MinPT = cms.double(0.05),
    copyExtras = cms.untracked.bool(False),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("mixedTripletStepSelector","mixedTripletStepVtx"), cms.InputTag("mixedTripletStepSelector","mixedTripletStepTrk")),
    allowFirstHitShare = cms.bool(True),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1, 1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("mixedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.mixedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("detachedTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("detachedTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("detachedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.mixedTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("mixedTripletStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.mixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("mixedTripletStepSeedsA"), cms.InputTag("mixedTripletStepSeedsB"))
)


process.mixedTripletStepSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('mixedTripletStepSeedLayersA')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.4),
            originHalfLength = cms.double(10.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.mixedTripletStepSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('mixedTripletStepSeedLayersB')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.6),
            originHalfLength = cms.double(10.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.mixedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("mixedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(2),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(1.2),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(1.2, 3.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('mixedTripletStepVtxLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        d0_par2 = cms.vdouble(1.3, 3.0),
        d0_par1 = cms.vdouble(1.2, 3.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('loose'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.6),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.2, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(1.2, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrkLoose'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(1.2, 4.0),
            d0_par1 = cms.vdouble(1.2, 4.0),
            preFilterName = cms.string(''),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.6),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepVtxTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            d0_par2 = cms.vdouble(1.2, 3.0),
            d0_par1 = cms.vdouble(1.1, 3.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.4),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrkTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            d0_par2 = cms.vdouble(1.1, 4.0),
            d0_par1 = cms.vdouble(1.1, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.4),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(1.1, 3.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepVtx'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(1.2, 3.0),
            d0_par1 = cms.vdouble(1.1, 3.0),
            preFilterName = cms.string('mixedTripletStepVtxTight'),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.3),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.9, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrk'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.9, 4.0),
            d0_par1 = cms.vdouble(0.9, 4.0),
            preFilterName = cms.string('mixedTripletStepTrkTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.mixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("mixedTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    numHitsForSeedCleaner = cms.int32(50),
    TrajectoryBuilder = cms.string('mixedTripletStepTrajectoryBuilder')
)


process.mixedTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("mixedTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter4'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.muIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("muons1stStep"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","ecal"), cms.InputTag("muons1stStep","hcal"), cms.InputTag("muons1stStep","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","tracker"))
)


process.muPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muParamGlobalIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalEcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(1.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(0.0)
    )
)


process.muParamGlobalIsoDepositCalHcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(0.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(1.0)
    )
)


process.muParamGlobalIsoDepositCtfTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositGsTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositJets = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    )
)


process.muParamGlobalIsoDepositTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClustersCleaned = cms.EDProducer("Multi5x5ClusterProducer",
    reassignSeedCrysToClusterItSeeds = cms.bool(True),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    doEndcap = cms.bool(True),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    barrelShapeAssociation = cms.string('multi5x5BarrelShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    endcapHitProducer = cms.string('ecalRecHit'),
    clustershapecollectionEB = cms.string('multi5x5BarrelShape'),
    IslandBarrelSeedThr = cms.double(0.5),
    barrelHitProducer = cms.string('ecalRecHit'),
    endcapShapeAssociation = cms.string('multi5x5EndcapShapeAssoc'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    clustershapecollectionEE = cms.string('multi5x5EndcapShape'),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5BasicClustersUncleaned = cms.EDProducer("Multi5x5ClusterProducer",
    reassignSeedCrysToClusterItSeeds = cms.bool(True),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    doEndcap = cms.bool(True),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    barrelShapeAssociation = cms.string('multi5x5BarrelShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring(),
    endcapHitProducer = cms.string('ecalRecHit'),
    clustershapecollectionEB = cms.string('multi5x5BarrelShape'),
    IslandBarrelSeedThr = cms.double(0.5),
    barrelHitProducer = cms.string('ecalRecHit'),
    endcapShapeAssociation = cms.string('multi5x5EndcapShapeAssoc'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    clustershapecollectionEE = cms.string('multi5x5EndcapShape'),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    preshStripEnergyCut = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshPi0Nstrip = cms.int32(5),
    endcapSClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO')
)


process.multi5x5SuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapBasicClusters'),
    scCollection = cms.string('multi5x5EndcapSuperClusters'),
    bcCollection = cms.string('multi5x5EndcapBasicClusters'),
    uncleanScCollection = cms.InputTag("multi5x5SuperClustersUncleaned","multi5x5EndcapSuperClusters"),
    cleanBcCollection = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    cleanScCollection = cms.InputTag("multi5x5SuperClustersCleaned","multi5x5EndcapSuperClusters"),
    uncleanBcCollection = cms.InputTag("multi5x5BasicClustersUncleaned","multi5x5EndcapBasicClusters"),
    scCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapSuperClusters')
)


process.multi5x5SuperClustersCleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClustersCleaned'),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersCleaned'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapPhiSearchRoad = cms.double(0.6),
    barrelClusterProducer = cms.string('multi5x5BasicClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            cryMin = cms.int32(2),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    )
)


process.multi5x5SuperClustersUncleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClustersCleaned'),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersUncleaned'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapPhiSearchRoad = cms.double(0.6),
    barrelClusterProducer = cms.string('multi5x5BasicClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            cryMin = cms.int32(2),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    ),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshStripEnergyCut = cms.double(0.0),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    preshNclust = cms.int32(4),
    preshClusterEnergyCut = cms.double(0.0),
    preshSeededNstrip = cms.int32(15)
)


process.muonCaloMETcorr = cms.EDProducer("MuonMETcorrInputProducer",
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    src = cms.InputTag("muons")
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("muons1stStep")
)


process.muonMETValueMapProducer = cms.EDProducer("MuonMETValueMapProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    minPt = cms.double(10.0),
    maxNormChi2 = cms.double(10.0),
    minnValidStaHits = cms.int32(1),
    useHO = cms.bool(False),
    minnHits = cms.int32(11),
    useTrackAssociatorPositions = cms.bool(True),
    useRecHits = cms.bool(False),
    maxEta = cms.double(2.5),
    maxd0 = cms.double(0.2),
    towerEtThreshold = cms.double(0.3),
    isAlsoTkMu = cms.bool(True),
    muonInputTag = cms.InputTag("muons")
)


process.muonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("muons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.muonSelectionTypeValueMapProducer = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('All')
)


process.muonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    trackCollection = cms.InputTag("generalTracks"),
    ShowerInformationFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
    ),
    muonCollection = cms.InputTag("muons1stStep")
)


process.muonTCMETValueMapProducer = cms.EDProducer("MuonTCMETValueMapProducer",
    vertexRho = cms.double(2.0),
    chi2_muon = cms.double(10),
    muonMinValidStaHits = cms.int32(1),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    useCaloMuons = cms.bool(False),
    eta_max = cms.double(2.65),
    global_muon = cms.bool(True),
    d0cutb = cms.double(0.5),
    d0cuta = cms.double(0.015),
    vertexMaxDZ = cms.double(0.2),
    chi2_max = cms.double(5),
    chi2_max_tight = cms.double(5.0),
    eta_muon = cms.double(2.5),
    track_algos = cms.vint32(),
    tracker_muon = cms.bool(True),
    track_quality = cms.vint32(2),
    nLayers = cms.int32(0),
    muonInputTag = cms.InputTag("muons"),
    pt_max = cms.double(100.0),
    rf_type = cms.int32(1),
    ptErr_max_tight = cms.double(0.2),
    muon_dptrel = cms.double(1),
    deltaR_muon = cms.double(0.05),
    nhits_muon = cms.double(11),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    usePvtxd0 = cms.bool(False),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    d0_max = cms.double(0.3),
    maxpt_eta25 = cms.double(0.0),
    nhits_min = cms.double(6),
    trackAlgo_max = cms.int32(8),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    d0_muon = cms.double(0.2),
    nhits_min_tight = cms.double(9),
    pt_muon = cms.double(10)
)


process.muons = cms.EDProducer("MuonProducer",
    EcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    ShowerInfoMap = cms.InputTag("muonShowerInformation"),
    FillTimingInfo = cms.bool(True),
    FillSelectorMaps = cms.bool(True),
    TrackIsoDeposits = cms.InputTag("muIsoDepositTk"),
    InputMuons = cms.InputTag("muons1stStep"),
    FillDetectorBasedIsolation = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmp"),
    JetIsoDeposits = cms.InputTag("muIsoDepositJets"),
    PFIsolation = cms.PSet(
        isolationR04 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFIsoValuePU04"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold04"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll04"),
            photon = cms.InputTag("muPFIsoValueGamma04"),
            chargedHadron = cms.InputTag("muPFIsoValueCharged04"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral04")
        ),
        isolationR03 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFIsoValuePU03"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold03"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll03"),
            photon = cms.InputTag("muPFIsoValueGamma03"),
            chargedHadron = cms.InputTag("muPFIsoValueCharged03"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral03")
        )
    ),
    FillCosmicsIdMap = cms.bool(True),
    HoIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    HcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    ActivateDebug = cms.untracked.bool(False),
    FillPFIsolation = cms.bool(True),
    CosmicIdMap = cms.InputTag("cosmicsVeto"),
    FillPFMomentumAndAssociation = cms.bool(True),
    FillShoweringInfo = cms.bool(True),
    SelectorMaps = cms.VInputTag(cms.InputTag("muidTMLastStationOptimizedLowPtLoose"), cms.InputTag("muidTMLastStationOptimizedLowPtTight"), cms.InputTag("muidTM2DCompatibilityLoose"), cms.InputTag("muidTM2DCompatibilityTight"), cms.InputTag("muidTrackerMuonArbitrated"), 
        cms.InputTag("muidTMLastStationAngLoose"), cms.InputTag("muidGlobalMuonPromptTight"), cms.InputTag("muidGMStaChiCompatibility"), cms.InputTag("muidTMLastStationAngTight"), cms.InputTag("muidGMTkChiCompatibility"), 
        cms.InputTag("muidTMOneStationAngTight"), cms.InputTag("muidTMOneStationAngLoose"), cms.InputTag("muidTMLastStationLoose"), cms.InputTag("muidTMLastStationTight"), cms.InputTag("muidTMOneStationTight"), 
        cms.InputTag("muidTMOneStationLoose"), cms.InputTag("muidAllArbitrated"), cms.InputTag("muidGMTkKinkTight"))
)


process.muons1stStep = cms.EDProducer("MuonIdProducer",
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    trackDepositName = cms.string('tracker'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    minPCaloMuon = cms.double(1.0),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("globalMuons"), cms.InputTag("standAloneMuons","UpdatedAtVtx"), cms.InputTag("tevMuons","firstHit"), cms.InputTag("tevMuons","picky"), 
        cms.InputTag("tevMuons","dyt")),
    fillGlobalTrackQuality = cms.bool(True),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons", "cosmicMuons", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics1Leg = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons1Leg", "cosmicMuons1Leg", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsWithSET = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(True),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("generalTracks", "globalSETMuons", cms.InputTag("standAloneSETMuons","UpdatedAtVtx")),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muontiming = cms.EDProducer("MuonTimingProducer",
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    MuonCollection = cms.InputTag("muons1stStep")
)


process.negativeCombinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeCombinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeOnlyJetBProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeOnlyJetProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeTrackCountingHighEffJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeTrackCountingHighPurJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.newCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("initialStepSeeds"), cms.InputTag("pixelPairStepSeeds"), cms.InputTag("mixedTripletStepSeeds"), cms.InputTag("pixelLessStepSeeds"), cms.InputTag("tripletElectronSeeds"), 
        cms.InputTag("pixelPairElectronSeeds"), cms.InputTag("stripPairElectronSeeds"))
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.offlinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    vertexCollections = cms.VPSet(cms.PSet(
        maxDistanceToBeam = cms.double(1.0),
        useBeamConstraint = cms.bool(False),
        minNdof = cms.double(0.0),
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string('')
    ), 
        cms.PSet(
            maxDistanceToBeam = cms.double(1.0),
            useBeamConstraint = cms.bool(True),
            minNdof = cms.double(2.0),
            algorithm = cms.string('AdaptiveVertexFitter'),
            label = cms.string('WithBS')
        )),
    verbose = cms.untracked.bool(False),
    TkFilterParameters = cms.PSet(
        maxNormalizedChi2 = cms.double(20.0),
        minPt = cms.double(0.0),
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        trackQuality = cms.string('any'),
        minPixelLayersWithHits = cms.int32(2),
        minSiliconLayersWithHits = cms.int32(5)
    ),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    TrackLabel = cms.InputTag("generalTracks"),
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            dzCutOff = cms.double(4.0),
            d0CutOff = cms.double(3.0),
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            vertexSize = cms.double(0.01),
            use_vdt = cms.untracked.bool(True)
        ),
        algorithm = cms.string('DA_vect')
    )
)


process.outInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('ckfOutInTracksFromConversions'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.particleFlow = cms.EDProducer("PFLinker",
    ValueMapMerged = cms.string('all'),
    ProducePFCandidates = cms.bool(True),
    ValueMapElectrons = cms.string('electrons'),
    Photons = cms.InputTag("pfPhotonTranslator","pfphot"),
    FillMuonRefs = cms.bool(True),
    ValueMapPhotons = cms.string('photons'),
    OutputPF = cms.string(''),
    Muons = cms.InputTag("muons","muons1stStep2muonsMap"),
    PFCandidate = cms.VInputTag(cms.InputTag("particleFlowTmp")),
    GsfElectrons = cms.InputTag("gsfElectrons")
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    RecMuons = cms.InputTag("muons1stStep"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(True),
    nuclearInteractionsPurity = cms.uint32(1),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    verbose = cms.untracked.bool(False),
    PFClustersPS = cms.InputTag("particleFlowClusterPS"),
    usePFatHLT = cms.bool(False),
    PFClustersHO = cms.InputTag("particleFlowClusterHO"),
    useIterTracking = cms.bool(True),
    useConvBremPFRecTracks = cms.bool(True),
    useV0 = cms.bool(False),
    RecTracks = cms.InputTag("pfTrack"),
    EGPhotons = cms.InputTag("photons"),
    ConvBremGsfRecTracks = cms.InputTag("pfTrackElec","Secondary"),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    useKDTreeTrackEcalLinker = cms.bool(True),
    useHO = cms.bool(True),
    pf_DPtoverPt_Cut = cms.vdouble(-1.0, -1.0, -1.0, 1.0, 1.0),
    GsfRecTracks = cms.InputTag("pfTrackElec"),
    useNuclear = cms.bool(True),
    useConvBremGsfTracks = cms.bool(False),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PhotonSelectionCuts = cms.vdouble(1, 10, 2.0, 0.001, 4.2, 
        0.003, 2.2, 0.001, 0.05, 10, 
        0.1),
    PFV0 = cms.InputTag("pfV0"),
    debug = cms.untracked.bool(False),
    useEGPhotons = cms.bool(True),
    pf_NHit_Cut = cms.vuint32(3, 3, 3, 3, 3)
)


process.particleFlowClusterECAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(9),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(1.5),
    thresh_DoubleSpike_Barrel = cms.double(10.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(4.0),
    PFRecHits = cms.InputTag("particleFlowRecHitECAL"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.04, -0.024),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.08),
    thresh_Clean_Endcap = cms.double(15.0),
    thresh_Seed_Barrel = cms.double(0.23),
    depthCor_Mode = cms.int32(1),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.3),
    thresh_Pt_Seed_Endcap = cms.double(0.15),
    minS4S1_Clean_Endcap = cms.vdouble(0.02, -0.0125),
    thresh_Seed_Endcap = cms.double(0.6),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(0.04)
)


process.particleFlowClusterHCAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL"),
    cleanRBXandHPDs = cms.bool(True),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(4),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.032, -0.045),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.8),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.032, -0.045),
    thresh_Seed_Endcap = cms.double(1.1),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFEM = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(80.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFEM"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.11, -0.19),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(80.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.11, -0.19),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFHAD = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(120.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFHAD"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.045, -0.08),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(120.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.045, -0.08),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHO"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(4),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.032, -0.045),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.5),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(1.0),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(1.0),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.032, -0.045),
    thresh_Seed_Endcap = cms.double(3.1),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(-1),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(0.2),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitPS"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.0, 0.0),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(6e-05),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.00012),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(6e-05),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.0, 0.0),
    thresh_Seed_Endcap = cms.double(0.00012),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.5),
    avfParameters = cms.PSet(
        sigmacut = cms.double(6.0),
        ratio = cms.double(0.25),
        Tini = cms.double(256.0)
    ),
    minAdaptWeight = cms.double(0.5),
    switchOff2TrackVertex = cms.untracked.bool(True),
    vertexIdentifierParameters = cms.PSet(
        logPrimSec_min = cms.double(0.0),
        pt_kink_min = cms.double(3.0),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        angles = cms.vdouble(15, 15),
        pt_min = cms.double(0.5),
        bIdentifyVertices = cms.bool(True),
        looper_eta_max = cms.double(0.1)
    ),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    transvSize = cms.double(1.0),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        bSelectTracks = cms.bool(True),
        nOuterHits_max = cms.int32(9),
        dxy_min = cms.double(0.2),
        nHits_min = cms.int32(6),
        nChi2_min = cms.double(0.5),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    debug = cms.untracked.bool(False),
    tobCut = cms.double(100),
    longSize = cms.double(5),
    tecCut = cms.double(220)
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.2),
    dcaPInnerHitCut = cms.double(1000.0),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2),
        dxy = cms.double(0.2),
        pt_min_prim = cms.double(0.8)
    ),
    debug = cms.untracked.bool(False),
    trackCollection = cms.InputTag("generalTracks"),
    dcaCut = cms.double(0.5)
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducerECAL",
    crossBarrelEndcapBorder = cms.bool(False),
    verbose = cms.untracked.bool(False),
    ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    thresh_Cleaning_EB = cms.double(2.0),
    timing_Cleaning = cms.bool(True),
    thresh_Barrel = cms.double(0.08),
    thresh_Cleaning_EE = cms.double(2.0),
    topological_Cleaning = cms.bool(True),
    thresh_Endcap = cms.double(0.3)
)


process.particleFlowRecHitHCAL = cms.EDProducer("PFRecHitProducerHCAL",
    ECAL_Compensate = cms.bool(False),
    ECAL_Dead_Code = cms.uint32(10),
    MinLongTiming_Cut = cms.double(-5.0),
    verbose = cms.untracked.bool(False),
    ECAL_Compensation = cms.double(0.5),
    MaxLongTiming_Cut = cms.double(5.0),
    weight_HFhad = cms.double(1.0),
    ApplyPulseDPG = cms.bool(False),
    ECAL_Threshold = cms.double(10.0),
    ApplyTimeDPG = cms.bool(False),
    caloTowers = cms.InputTag("towerMakerPF"),
    hcalRecHitsHBHE = cms.InputTag("hbhereco"),
    LongFibre_Fraction = cms.double(0.1),
    MaxShortTiming_Cut = cms.double(5.0),
    HcalMaxAllowedHFLongShortSev = cms.int32(9),
    thresh_Barrel = cms.double(0.4),
    navigation_HF = cms.bool(True),
    HcalMaxAllowedHFInTimeWindowSev = cms.int32(9),
    HF_Calib_29 = cms.double(1.07),
    LongFibre_Cut = cms.double(120.0),
    EM_Depth = cms.double(22.0),
    weight_HFem = cms.double(1.0),
    LongShortFibre_Cut = cms.double(1000000000.0),
    MinShortTiming_Cut = cms.double(-5.0),
    HCAL_Calib = cms.bool(True),
    thresh_HF = cms.double(0.4),
    HcalMaxAllowedHFDigiTimeSev = cms.int32(9),
    thresh_Endcap = cms.double(0.4),
    HcalMaxAllowedChannelStatusSev = cms.int32(9),
    hcalRecHitsHF = cms.InputTag("hfreco"),
    ShortFibre_Cut = cms.double(60.0),
    ApplyLongShortDPG = cms.bool(True),
    HF_Calib = cms.bool(True),
    HAD_Depth = cms.double(47.0),
    ShortFibre_Fraction = cms.double(0.01),
    HCAL_Calib_29 = cms.double(1.35)
)


process.particleFlowRecHitHO = cms.EDProducer("PFRecHitProducerHO",
    verbose = cms.untracked.bool(False),
    HOMaxAllowedSev = cms.int32(11),
    thresh_Barrel = cms.double(0.4),
    recHitsHO = cms.InputTag("horeco"),
    thresh_Endcap = cms.double(1.0)
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducerPS",
    thresh_Barrel = cms.double(7e-06),
    ecalRecHitsES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    verbose = cms.untracked.bool(False),
    thresh_Endcap = cms.double(7e-06)
)


process.particleFlowSimParticle = cms.EDProducer("PFSimParticleProducer",
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    ),
    MCTruthMatchingInfo = cms.untracked.bool(False),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    Fitter = cms.string('KFFittingSmoother'),
    ecalRecHitsEE = cms.InputTag("caloRecHits","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("caloRecHits","EcalRecHitsEB"),
    process_RecTracks = cms.untracked.bool(False),
    ParticleFilter = cms.PSet(
        EProton = cms.double(5000.0),
        etaMax = cms.double(5.0),
        pTMin = cms.double(0.0),
        EMin = cms.double(0.0)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    famosSimHits = cms.untracked.InputTag("famosSimHits","EcalHitsEB"),
    process_Particles = cms.untracked.bool(True),
    Propagator = cms.string('PropagatorWithMaterial'),
    sim = cms.InputTag("g4SimHits"),
    verbose = cms.untracked.bool(False)
)


process.particleFlowTmp = cms.EDProducer("PFProducer",
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    calibHF_use = cms.bool(False),
    verbose = cms.untracked.bool(False),
    minSignificance = cms.double(2.5),
    pf_nsigma_ECAL = cms.double(0.0),
    usePFConversions = cms.bool(True),
    useCalibrationsFromDB = cms.bool(True),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    pf_convID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    usePFElectrons = cms.bool(True),
    postMuonCleaning = cms.bool(True),
    minSignificanceReduction = cms.double(1.4),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    muon_HO = cms.vdouble(0.9, 0.9),
    postHFCleaning = cms.bool(False),
    factors_45 = cms.vdouble(10.0, 100.0),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHCAL","Cleaned"), cms.InputTag("particleFlowClusterHFHAD","Cleaned"), cms.InputTag("particleFlowClusterHFEM","Cleaned")),
    iCfgCandConnector = cms.PSet(
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0),
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0)
    ),
    useBestMuonTrack = cms.bool(False),
    rejectTracks_Bad = cms.bool(True),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    usePFPhotons = cms.bool(True),
    vertexCollection = cms.InputTag("offlinePrimaryVertices"),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    maxDeltaPhiPt = cms.double(7.0),
    muons = cms.InputTag("muons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    pf_electronID_crackCorrection = cms.bool(False),
    minHFCleaningPt = cms.double(5.0),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    pf_nsigma_HCAL = cms.double(1.0),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    blocks = cms.InputTag("particleFlowBlock"),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    pf_electron_mvaCut = cms.double(-0.1),
    useEGammaElectrons = cms.bool(True),
    useHO = cms.bool(True),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    nsigma_TRACK = cms.double(1.0),
    pf_electron_output_col = cms.string('electrons'),
    dptRel_DispVtx = cms.double(10.0),
    usePFMuonMomAssign = cms.bool(False),
    useVerticesForNeutral = cms.bool(True),
    pf_conv_mvaCut = cms.double(0.0),
    usePhotonReg = cms.bool(False),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    usePFDecays = cms.bool(False),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    rejectTracks_Step45 = cms.bool(True),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    useEGammaSupercluster = cms.bool(True),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    usePFNuclearInteractions = cms.bool(True),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    maxSignificance = cms.double(2.5),
    minDeltaMet = cms.double(0.4),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    algoType = cms.uint32(0),
    pt_Error = cms.double(1.0),
    debug = cms.untracked.bool(False),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    useRegressionFromDB = cms.bool(True),
    usePFSCEleCalib = cms.bool(True)
)


process.patElectrons = cms.EDProducer("PATElectronProducer",
    embedPreshowerClusters = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedRecHits = cms.bool(True),
    embedGsfElectronCore = cms.bool(True),
    electronSource = cms.InputTag("gsfElectrons"),
    resolutions = cms.PSet(

    ),
    pfElectronSource = cms.InputTag("particleFlow"),
    userIsolation = cms.PSet(

    ),
    embedPflowBasicClusters = cms.bool(True),
    embedSuperCluster = cms.bool(True),
    embedSeedCluster = cms.bool(True),
    embedPFCandidate = cms.bool(True),
    pfCandidateMap = cms.InputTag("particleFlow","electrons"),
    addElectronID = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    reducedBarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    embedPflowPreshowerClusters = cms.bool(True),
    embedGsfTrack = cms.bool(True),
    usePV = cms.bool(True),
    useParticleFlow = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    embedPflowSuperCluster = cms.bool(True),
    reducedEndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    electronIDSources = cms.PSet(
        eidTight = cms.InputTag("eidTight"),
        eidLoose = cms.InputTag("eidLoose"),
        eidRobustTight = cms.InputTag("eidRobustTight"),
        eidRobustHighEnergy = cms.InputTag("eidRobustHighEnergy"),
        eidRobustLoose = cms.InputTag("eidRobustLoose")
    ),
    genParticleMatch = cms.InputTag(""),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedGenMatch = cms.bool(False),
    embedBasicClusters = cms.bool(True)
)


process.patHemispheres = cms.EDProducer("PATHemisphereProducer",
    patJets = cms.InputTag("cleanLayer1Jets"),
    maxTauEta = cms.double(-1),
    maxPhotonEta = cms.double(5),
    minMuonEt = cms.double(7),
    patMuons = cms.InputTag("cleanLayer1Muons"),
    seedMethod = cms.int32(3),
    patElectrons = cms.InputTag("cleanLayer1Electrons"),
    patMets = cms.InputTag("layer1METs"),
    maxMuonEta = cms.double(5),
    minTauEt = cms.double(1000000),
    minPhotonEt = cms.double(200000),
    minElectronEt = cms.double(7),
    patPhotons = cms.InputTag("cleanLayer1Photons"),
    combinationMethod = cms.int32(3),
    maxJetEta = cms.double(5),
    maxElectronEta = cms.double(5),
    minJetEt = cms.double(30),
    patTaus = cms.InputTag("cleanLayer1Taus")
)


process.patJetCharge = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    exp = cms.double(1.0)
)


process.patJetChargeAK5PFCorr = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexAK5PFCorr"),
    exp = cms.double(1.0)
)


process.patJetChargeAK7PFCorr = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexAK7PFCorr"),
    exp = cms.double(1.0)
)


process.patJetCorrFactors = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("ak5CaloJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute', 
        'L2L3Residual'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6CaloJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5Calo'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsAK5PFCorr = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("ak5PFJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute', 
        'L2L3Residual'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PF'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsAK7PFCorr = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("ak7PFJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute', 
        'L2L3Residual'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PF'),
    flavorType = cms.string('J')
)


process.patJetFlavourAssociation = cms.EDProducer("JetFlavourClustering",
    ghostRescaling = cms.double(1e-18),
    partons = cms.InputTag("patJetPartons","partons"),
    jetAlgorithm = cms.string('AntiKt'),
    bHadrons = cms.InputTag("patJetPartons","bHadrons"),
    rParam = cms.double(0.5),
    jets = cms.InputTag("ak5PFJets"),
    hadronFlavourHasPriority = cms.bool(True),
    cHadrons = cms.InputTag("patJetPartons","cHadrons")
)


process.patJetFlavourAssociationLegacy = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationLegacy"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationLegacyAK5PFCorr = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationLegacyAK5PFCorr"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationLegacyAK7PFCorr = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationLegacyAK7PFCorr"),
    physicsDefinition = cms.bool(False)
)


process.patJetGenJetMatch = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("ak5CaloJets"),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchAK5PFCorr = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("ak5PFJets"),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchAK7PFCorr = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("ak7PFJets"),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetPartonAssociationLegacy = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("ak5CaloJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartonsLegacy")
)


process.patJetPartonAssociationLegacyAK5PFCorr = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("ak5PFJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartonsLegacy")
)


process.patJetPartonAssociationLegacyAK7PFCorr = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("ak7PFJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartonsLegacy")
)


process.patJetPartonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("ak5CaloJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchAK5PFCorr = cms.EDProducer("MCMatcher",
    src = cms.InputTag("ak5PFJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchAK7PFCorr = cms.EDProducer("MCMatcher",
    src = cms.InputTag("ak7PFJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartons = cms.EDProducer("HadronAndPartonSelector",
    particles = cms.InputTag("genParticles"),
    src = cms.InputTag("generator"),
    partonMode = cms.string('Auto')
)


process.patJetPartonsLegacy = cms.EDProducer("PartonSelector",
    src = cms.InputTag("genParticles"),
    withLeptons = cms.bool(False)
)


process.patJets = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(False),
    embedPFCandidates = cms.bool(True),
    embedGenJetMatch = cms.bool(True),
    addAssociatedTracks = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(False),
    JetPartonMapSource = cms.InputTag(""),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag(""),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag(""),
    addEfficiencies = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("ak5CaloJets"),
    useLegacyJetMCFlavour = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("combinedSecondaryVertexBJetTags"), cms.InputTag("combinedSecondaryVertexMVABJetTags"), cms.InputTag("jetBProbabilityBJetTags"), cms.InputTag("jetProbabilityBJetTags"), cms.InputTag("simpleSecondaryVertexHighEffBJetTags"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTags"), cms.InputTag("trackCountingHighEffBJetTags"), cms.InputTag("trackCountingHighPurBJetTags")),
    trackAssociationSource = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    tagInfoSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactors")),
    addBTagInfo = cms.bool(True),
    embedCaloTowers = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(False),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetCharge"),
    JetFlavourInfoSource = cms.InputTag(""),
    addJetCorrFactors = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(True)
)


process.patJetsAK5PFCorr = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(False),
    JetPartonMapSource = cms.InputTag("AK5PFCorr"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("AK5PFCorr"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("AK5PFCorr"),
    useLegacyJetMCFlavour = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("ak5PFJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("combinedSecondaryVertexBJetTags"), cms.InputTag("combinedSecondaryVertexMVABJetTags"), cms.InputTag("jetBProbabilityBJetTags"), cms.InputTag("jetProbabilityBJetTags"), cms.InputTag("simpleSecondaryVertexHighEffBJetTags"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTags"), cms.InputTag("trackCountingHighEffBJetTags"), cms.InputTag("trackCountingHighPurBJetTags")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexAK5PFCorr"),
    tagInfoSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK5PFCorr")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeAK5PFCorr"),
    JetFlavourInfoSource = cms.InputTag("AK5PFCorr"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(True)
)


process.patJetsAK7PFCorr = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(False),
    JetPartonMapSource = cms.InputTag("AK7PFCorr"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("AK7PFCorr"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("AK7PFCorr"),
    useLegacyJetMCFlavour = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("ak7PFJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("combinedSecondaryVertexBJetTags"), cms.InputTag("combinedSecondaryVertexMVABJetTags"), cms.InputTag("jetBProbabilityBJetTags"), cms.InputTag("jetProbabilityBJetTags"), cms.InputTag("simpleSecondaryVertexHighEffBJetTags"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTags"), cms.InputTag("trackCountingHighEffBJetTags"), cms.InputTag("trackCountingHighPurBJetTags")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexAK7PFCorr"),
    tagInfoSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK7PFCorr")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeAK7PFCorr"),
    JetFlavourInfoSource = cms.InputTag("AK7PFCorr"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak7JetID"),
    addJetID = cms.bool(True)
)


process.patMETs = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("caloType1CorrectedMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag(""),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(True),
    muonSource = cms.InputTag("muons"),
    resolutions = cms.PSet(

    )
)


process.patMETsAK5PF = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("AK5PFType1CorMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag(""),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patMETsAK7PF = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("AK7PFType1CorMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag(""),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patMETsPF = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("pfType1CorrectedMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag(""),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patMHTs = cms.EDProducer("PATMHTProducer",
    verbose = cms.double(0.0),
    muonEtaMax = cms.double(2.5),
    jetTag = cms.untracked.InputTag("allLayer1Jets"),
    eleEtaMax = cms.double(3.0),
    noHF = cms.bool(False),
    muonTag = cms.untracked.InputTag("allLayer1Muons"),
    CaloTowerTag = cms.InputTag("towerMaker"),
    elePhiUncertaintyParameter0 = cms.double(0.01),
    uncertaintyScaleFactor = cms.double(1.0),
    muonPtMin = cms.double(10.0),
    eleEtUncertaintyParameter0 = cms.double(0.01),
    useHO = cms.bool(False),
    jetEtUncertaintyParameter2 = cms.double(0.033),
    jetEtUncertaintyParameter1 = cms.double(1.25),
    jetEMfracMax = cms.double(0.9),
    jetPhiUncertaintyParameter2 = cms.double(0.023),
    jetPhiUncertaintyParameter0 = cms.double(4.75),
    jetPhiUncertaintyParameter1 = cms.double(-0.426),
    tauTag = cms.untracked.InputTag("allLayer1Taus"),
    jetEtUncertaintyParameter0 = cms.double(5.6),
    electronTag = cms.untracked.InputTag("allLayer1Electrons"),
    jetEtaMax = cms.double(5.0),
    elePtMin = cms.double(10.0),
    jetPtMin = cms.double(20.0),
    muonEtUncertaintyParameter0 = cms.double(0.01),
    photonTag = cms.untracked.InputTag("allLayer1Photons"),
    muonPhiUncertaintyParameter0 = cms.double(0.01),
    controlledUncertainty = cms.bool(True),
    towerEtThreshold = cms.double(0.5)
)


process.patMuons = cms.EDProducer("PATMuonProducer",
    embedTpfmsMuon = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedCaloMETMuonCorrs = cms.bool(True),
    caloMETMuonCorrs = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    resolutions = cms.PSet(

    ),
    embedDytMuon = cms.bool(True),
    userIsolation = cms.PSet(

    ),
    embedPFCandidate = cms.bool(True),
    pfMuonSource = cms.InputTag("particleFlow"),
    efficiencies = cms.PSet(

    ),
    embedStandAloneMuon = cms.bool(True),
    useParticleFlow = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(False),
    embedImprovedMuonBestTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    embedTcMETMuonCorrs = cms.bool(True),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    embedMuonBestTrack = cms.bool(True),
    muonSource = cms.InputTag("muons"),
    embedCombinedMuon = cms.bool(True),
    genParticleMatch = cms.InputTag(""),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedGenMatch = cms.bool(False),
    tcMETMuonCorrs = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    embedPickyMuon = cms.bool(True)
)


process.patPhotons = cms.EDProducer("PATPhotonProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    photonIDSources = cms.PSet(
        PhotonCutBasedIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
        PhotonCutBasedIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose")
    ),
    isoDeposits = cms.PSet(

    ),
    efficiencies = cms.PSet(

    ),
    embedSuperCluster = cms.bool(True),
    embedGenMatch = cms.bool(False),
    resolutions = cms.PSet(

    ),
    addPhotonID = cms.bool(True),
    photonSource = cms.InputTag("photons"),
    userIsolation = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("")
)


process.patTaus = cms.EDProducer("PATTauProducer",
    tauIDSources = cms.PSet(
        byIsolationMVAraw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw"),
        byCombinedIsolationDeltaBetaCorrRaw3Hits = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits"),
        againstMuonMedium = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection"),
        againstElectronTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3TightElectronRejection"),
        againstElectronTight = cms.InputTag("hpsPFTauDiscriminationByTightElectronRejection"),
        byLooseIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA2"),
        againstMuonTight = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection"),
        againstElectronMedium = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejection"),
        byTightIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA"),
        againstMuonLoose2 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2"),
        byLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr"),
        againstElectronLooseMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3LooseElectronRejection"),
        byVLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr"),
        againstElectronVTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3VTightElectronRejection"),
        againstElectronMediumMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3MediumElectronRejection"),
        againstMuonLoose = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection"),
        againstMuonTight2 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection2"),
        byMediumCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr"),
        againstMuonMedium2 = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection2"),
        againstElectronLoose = cms.InputTag("hpsPFTauDiscriminationByLooseElectronRejection"),
        byMediumIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA"),
        byMediumCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits"),
        byIsolationMVA2raw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw"),
        byTightIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA2"),
        againstElectronMVA3category = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
        againstElectronDeadECAL = cms.InputTag("hpsPFTauDiscriminationByDeadECALElectronRejection"),
        byTightCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr"),
        againstElectronMVA3raw = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
        byLooseCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits"),
        byMediumIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA2"),
        byLooseIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA"),
        byCombinedIsolationDeltaBetaCorrRaw = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr"),
        byTightCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits"),
        decayModeFinding = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
    ),
    addGenJetMatch = cms.bool(False),
    embedGenJetMatch = cms.bool(False),
    embedLeadTrack = cms.bool(False),
    embedLeadPFCand = cms.bool(False),
    embedSignalPFChargedHadrCands = cms.bool(False),
    addTauJetCorrFactors = cms.bool(False),
    resolutions = cms.PSet(

    ),
    userIsolation = cms.PSet(
        pfAllParticles = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFCandidates"),
            deltaR = cms.double(0.5)
        ),
        pfNeutralHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFNeutralHadrons"),
            deltaR = cms.double(0.5)
        ),
        pfChargedHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFChargedHadrons"),
            deltaR = cms.double(0.5)
        ),
        pfGamma = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFGammas"),
            deltaR = cms.double(0.5)
        )
    ),
    embedIsolationPFGammaCands = cms.bool(False),
    embedSignalPFGammaCands = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag(""),
    embedIsolationPFCands = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedSignalPFCands = cms.bool(False),
    addEfficiencies = cms.bool(False),
    embedSignalTracks = cms.bool(False),
    tauSource = cms.InputTag("hpsPFTauProducer"),
    tauJetCorrFactorsSource = cms.VInputTag(cms.InputTag("patTauJetCorrFactors")),
    embedIsolationPFNeutralHadrCands = cms.bool(False),
    addTauID = cms.bool(True),
    genParticleMatch = cms.InputTag(""),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    embedIsolationPFChargedHadrCands = cms.bool(False),
    embedIsolationTracks = cms.bool(False),
    embedSignalPFNeutralHadrCands = cms.bool(False),
    isoDeposits = cms.PSet(
        pfAllParticles = cms.InputTag("tauIsoDepositPFCandidates"),
        pfNeutralHadron = cms.InputTag("tauIsoDepositPFNeutralHadrons"),
        pfChargedHadron = cms.InputTag("tauIsoDepositPFChargedHadrons"),
        pfGamma = cms.InputTag("tauIsoDepositPFGammas")
    ),
    embedLeadPFChargedHadrCand = cms.bool(False),
    embedGenMatch = cms.bool(False),
    embedLeadPFNeutralCand = cms.bool(False)
)


process.pfCandMETcorr = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfCandsNotInJet")
)


process.pfCandsNotInJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak5PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    conversionCollection = cms.InputTag("allConversions"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    trackColl = cms.InputTag("generalTracks"),
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex")
)


process.pfElectronInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfElectronInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfElectronTranslator = cms.EDProducer("PFElectronTranslator",
    MVACutBlock = cms.PSet(
        MVACut = cms.double(-1.0)
    ),
    PFBasicClusters = cms.string('pf'),
    PFGsfElectronCore = cms.string('pf'),
    PFGsfElectron = cms.string('pf'),
    PFSuperClusters = cms.string('pf'),
    CheckStatusFlag = cms.bool(True),
    GSFTracks = cms.InputTag("electronGsfTracks"),
    ElectronMVA = cms.string('pf'),
    PFCandidateElectron = cms.InputTag("particleFlowTmp","electrons"),
    PFPreshowerClusters = cms.string('pf'),
    PFCandidate = cms.InputTag("pfSelectedElectrons"),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoValueNeutral04PFId"),
        pfChargedHadrons = cms.InputTag("elPFIsoValueCharged04PFId"),
        pfPhotons = cms.InputTag("elPFIsoValueGamma04PFId")
    ),
    ElectronSC = cms.string('pf')
)


process.pfJetMETcorr = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak5PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('ak5PFL1Fastjet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('ak5PFL1FastL2L3')
)


process.pfMet = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("particleFlow"),
    METType = cms.string('PFMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('PFMET'),
    noHF = cms.bool(False),
    jets = cms.InputTag("ak5PFJets"),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('PFCandidateCollection')
)


process.pfNoJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectron"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmp"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUp"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpIso"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNuclear = cms.EDProducer("PFNuclearProducer",
    likelihoodCut = cms.double(0.1),
    nuclearColList = cms.VInputTag(cms.InputTag("firstnuclearInteractionMaker"))
)


process.pfPhotonInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfPhotonInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfPhotonTranslator = cms.EDProducer("PFPhotonTranslator",
    hcalTowers = cms.InputTag("towerMaker"),
    PFBasicClusters = cms.string('pfphot'),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    EGPhotons = cms.string('photons'),
    PFSuperClusters = cms.string('pfphot'),
    PFConversionCollection = cms.string('pfphot'),
    PFPhotonCores = cms.string('pfphot'),
    PFPhotons = cms.string('pfphot'),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    PFPreshowerClusters = cms.string('pfphot'),
    PFCandidate = cms.InputTag("pfSelectedPhotons"),
    hOverEConeSize = cms.double(0.15),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("phPFIsoValueNeutral04PFId"),
        pfChargedHadrons = cms.InputTag("phPFIsoValueCharged04PFId"),
        pfPhotons = cms.InputTag("phPFIsoValueGamma04PFId")
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlowTmp"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(True),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlow"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfRecoTauDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnEcal = cms.double(3.0),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8)
)


process.pfRecoTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.pfRecoTauDiscriminationAgainstElectronDeadECAL = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    minStatus = cms.uint32(12),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("pfTauProducer")
)


process.pfRecoTauDiscriminationAgainstElectronMVA = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongEC = cms.double(0.06),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    minMVA1prongBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz'),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    minMVA1prongStripsWgsfBL = cms.double(0.06)
)


process.pfRecoTauDiscriminationAgainstElectronMVA2 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstElectronMVA3 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.pfRecoTauDiscriminationAgainstMuon2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.pfRecoTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByMVAIsolation = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    )
)


process.pfRecoTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("ak5PFJetTracksAssociatorAtVertex"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTauDecayMode = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducer")
)


process.pfTauDecayModeHighEfficiency = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerHighEfficiency")
)


process.pfTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("pfRecoTauDecayModeProducer")
)


process.pfTauDecayModeInsideOut = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerInsideOut")
)


process.pfTrack = cms.EDProducer("PFTrackProducer",
    TrajInEvents = cms.bool(False),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    GsfTracksInEvents = cms.bool(True),
    UseQuality = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    TrackQuality = cms.string('highPurity'),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks")
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    TrajInEvents = cms.bool(False),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(False),
    MaxConvBremRecoPT = cms.double(49.0),
    ModeMomentum = cms.bool(True),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    Propagator = cms.string('fwdElectronPropagator'),
    useV0 = cms.bool(False),
    pf_convBremFinderID_mvaWeightFile = cms.string('RecoParticleFlow/PFTracking/data/MVAnalysis_BDT.weights_convBremFinder_19Apr_IntToFloat.txt'),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MinDPhiGsfSC = cms.double(0.15),
    applyEGSelection = cms.bool(False),
    useNuclear = cms.bool(False),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    applyGsfTrackCleaning = cms.bool(True),
    MinDEtaGsfSC = cms.double(0.06),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    useConvBremFinder = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    PFV0 = cms.InputTag("pfV0"),
    pf_convBremFinderID_mvaCut = cms.double(0.2),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    MinSCEnergy = cms.double(4.0),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    TTRHBuilder = cms.string('WithTrackAngle'),
    PFRecTrackLabel = cms.InputTag("pfTrack")
)


process.pfType1CorrectedMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(False),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False)
)


process.pfType1p2CorrectedMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("pfJetMETcorr","type2"), cms.InputTag("pfJetMETcorr","offset"), cms.InputTag("pfCandMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.pfchsMETcorr = cms.EDProducer("PFchsMETcorrInputProducer",
    src = cms.InputTag("offlinePrimaryVertices"),
    goodVtxNdof = cms.uint32(4),
    goodVtxZ = cms.double(24)
)


process.phPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(True),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        MissHitSCMatch_Veto = cms.bool(False),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoValueCharged03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.photonConvTrajSeedFromSingleLeg = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromSingleLeg",
    vtxMinDoF = cms.double(4),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(20000),
        cut = cms.string('strip < 150000 && pixel < 20000 && (strip < 20000 + 7* pixel)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(3.0),
            ptMin = cms.double(0.2),
            originHalfLength = cms.double(12.0),
            beamSpot = cms.InputTag("offlineBeamSpot")
        )
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates'),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversion1Leg'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(10000),
        SeedingLayers = cms.string('convLayerPairs'),
        maxHitPairsPerTrackAndGenerator = cms.uint32(10)
    ),
    applyTkVtxConstraint = cms.bool(True),
    maxDZSigmas = cms.double(10.0),
    maxNumSelVtx = cms.uint32(2),
    primaryVerticesTag = cms.InputTag("pixelVertices"),
    newSeedCandidates = cms.string('convSeedCandidates')
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    photonCoreCollection = cms.string(''),
    minSCEt = cms.double(10.0),
    pixelSeedProducer = cms.string('electronMergedSeeds'),
    risolveConversionAmbiguity = cms.bool(True),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    conversionProducer = cms.InputTag("conversions")
)


process.photonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("photons"),
    maxDPtRel = cms.double(1.0),
    mcPdgId = cms.vint32(22),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.2),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.photons = cms.EDProducer("PhotonProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    candidateP4type = cms.string('fromEcalEnergy'),
    usePrimaryVertex = cms.bool(True),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    minSCEtBarrel = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    posCalc_t0_barl = cms.double(7.7),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    posCalc_logweight = cms.bool(True),
    hcalTowers = cms.InputTag("towerMaker"),
    nTrackHollowConeBarrel = cms.double(999999999),
    posCalc_t0_endcPresh = cms.double(3.6),
    nTrackSolidConeEndcap = cms.double(999999999),
    minR9Endcap = cms.double(0.95),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_w0 = cms.double(4.2),
    mipVariableSet = cms.PSet(
        XRangeFit = cms.double(180.0),
        ResidualWidth = cms.double(0.23),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0)
    ),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    nTrackHollowConeEndcap = cms.double(999999999),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minSCEtEndcap = cms.double(10.0),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hbheModule = cms.string('hbhereco'),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    maxHoverEBarrel = cms.double(0.5),
    highEt = cms.double(100.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hbheInstance = cms.string(''),
    hOverEConeSize = cms.double(0.15),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    posCalc_x0 = cms.double(0.89),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationSumsCalculatorSet = cms.PSet(
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        trackProducer = cms.InputTag("generalTracks"),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        longImpactParameterA_Barrel = cms.double(0.2),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        transImpactParameterA_Barrel = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        transImpactParameterA_Endcap = cms.double(0.1),
        ComponentName = cms.string('isolationSumsCalculator'),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        longImpactParameterB_Endcap = cms.double(0.2),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        transImpactParameterB_Endcap = cms.double(0.1),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        vetoClustered = cms.bool(False),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        modulePhiBoundary = cms.double(0.0087),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        transImpactParameterB_Barrel = cms.double(0.1),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
    ),
    photonCoreProducer = cms.InputTag("photonCore"),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    posCalc_t0_endc = cms.double(6.3),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999)
)


process.pixelLessStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("mixedTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("mixedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelLessStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("pixelLessStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelLessStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelLessStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(False),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(2.0),
            ptMin = cms.double(0.7),
            originHalfLength = cms.double(10.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelLessStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("pixelLessStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(3),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(4),
        chi2n_par = cms.double(0.5),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.3, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(1.3, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('pixelLessStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        d0_par2 = cms.vdouble(1.3, 4.0),
        d0_par1 = cms.vdouble(1.3, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.35),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelLessStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('pixelLessStepLoose'),
            d0_par2 = cms.vdouble(1.1, 4.0),
            d0_par1 = cms.vdouble(1.1, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.9, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelLessStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.9, 4.0),
            d0_par1 = cms.vdouble(0.9, 4.0),
            preFilterName = cms.string('pixelLessStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.pixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("pixelLessStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    numHitsForSeedCleaner = cms.int32(50),
    TrajectoryBuilder = cms.string('pixelLessStepTrajectoryBuilder')
)


process.pixelLessStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("pixelLessStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter5'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.pixelPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelPairElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.015),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.03),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(1.0),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelPairStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("lowPtTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("lowPtTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelPairStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("pixelPairStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("initialStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelPairStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelPairStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False),
        FilterAtHelixStage = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.015),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.03),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(0.6),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.pixelPairStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("pixelPairStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('pixelPairStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelPairStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('pixelPairStepLoose'),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelPairStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('pixelPairStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.pixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("pixelPairStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('pixelPairStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.pixelPairStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("pixelPairStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.pixelTracks = cms.EDProducer("PixelTrackProducer",
    useFilterWithES = cms.bool(False),
    FilterPSet = cms.PSet(
        chi2 = cms.double(1000.0),
        nSigmaTipMaxTolerance = cms.double(0.0),
        ComponentName = cms.string('PixelTrackFilterByKinematics'),
        nSigmaInvPtTolerance = cms.double(0.0),
        ptMin = cms.double(0.1),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.9)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    passLabel = cms.string('pixelTracks')
)


process.pixelVertices = cms.EDProducer("PrimaryVertexProducer",
    vertexCollections = cms.VPSet(cms.PSet(
        maxDistanceToBeam = cms.double(2.0),
        useBeamConstraint = cms.bool(False),
        minNdof = cms.double(2.0),
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string('')
    )),
    verbose = cms.untracked.bool(False),
    TkFilterParameters = cms.PSet(
        maxNormalizedChi2 = cms.double(100.0),
        minPt = cms.double(0.0),
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(100.0),
        trackQuality = cms.string('any'),
        minPixelLayersWithHits = cms.int32(3),
        minSiliconLayersWithHits = cms.int32(3)
    ),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    TrackLabel = cms.InputTag("pixelTracks"),
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(0.1)
        ),
        algorithm = cms.string('gap')
    )
)


process.positiveCombinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveCombinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveOnlyJetBProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveOnlyJetProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.recoTauAK5PFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("ak5PFJets"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("particleFlow")
)


process.recoTauDiscriminantCutMultiplexer = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.0),
            Producer = cms.InputTag("fixme")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.2)
        )),
    key = cms.InputTag("fixme"),
    PFTauProducer = cms.InputTag("fixme")
)


process.reducedEcalRecHitsEB = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEB"), cms.InputTag("interestingEcalDetIdEBU"), cms.InputTag("interestingEleIsoDetIdEB"), cms.InputTag("interestingGamIsoDetIdEB"), cms.InputTag("pfElectronInterestingEcalDetIdEB"), 
        cms.InputTag("pfPhotonInterestingEcalDetIdEB"), cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsEE = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEE"), cms.InputTag("interestingEleIsoDetIdEE"), cms.InputTag("interestingGamIsoDetIdEE"), cms.InputTag("pfElectronInterestingEcalDetIdEE"), cms.InputTag("pfPhotonInterestingEcalDetIdEE"), 
        cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsES = cms.EDProducer("ReducedESRecHitCollectionProducer",
    interestingDetIds = cms.VInputTag(),
    EndcapSuperClusterCollection = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    scEtThreshold = cms.double(15),
    OutputLabel_ES = cms.string(''),
    EcalRecHitCollectionES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.reducedHcalRecHits = cms.EDProducer("HcalHitSelection",
    interestingDetIds = cms.VInputTag(),
    hfTag = cms.InputTag("hfreco"),
    hoTag = cms.InputTag("horeco"),
    hbheTag = cms.InputTag("hbhereco"),
    hoSeverityLevel = cms.int32(13)
)


process.refittedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("ancientMuonSeed"),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    STATrajBuilderParameters = cms.PSet(
        DoRefit = cms.bool(True),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            FitDirection = cms.string('insideOut'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        NavigationType = cms.string('Standard'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(100.0)
        ),
        DoBackwardFilter = cms.bool(True),
        SeedPosition = cms.string('in'),
        BWFilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            BWSeedType = cms.string('fromGenerator'),
            FitDirection = cms.string('outsideIn'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            MaxFractionOfLostHits = cms.double(0.05),
            ForceAllIterations = cms.bool(False),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        )
    ),
    MuonTrajectoryBuilder = cms.string('Exhaustive')
)


process.regionalCosmicCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("regionalCosmicTrackerSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.regionalCosmicTrackerSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(10000),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        doClusterCheck = cms.bool(False)
    ),
    RegionFactoryPSet = cms.PSet(
        CollectionsPSet = cms.PSet(
            recoMuonsCollection = cms.InputTag(""),
            recoTrackMuonsCollection = cms.InputTag("cosmicMuons"),
            recoL2MuonsCollection = cms.InputTag("")
        ),
        ComponentName = cms.string('CosmicRegionalSeedGenerator'),
        RegionInJetsCheckPSet = cms.PSet(
            recoCaloJetsCollection = cms.InputTag("ak5CaloJets"),
            deltaRExclusionSize = cms.double(0.3),
            jetsPtMin = cms.double(5),
            doJetsExclusionCheck = cms.bool(True)
        ),
        ToolsPSet = cms.PSet(
            regionBase = cms.string('seedOnCosmicMuon'),
            thePropagatorName = cms.string('AnalyticalPropagator')
        ),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            deltaPhiRegion = cms.double(0.1),
            measurementTrackerName = cms.string(''),
            zVertex = cms.double(5),
            deltaEtaRegion = cms.double(0.1),
            ptMin = cms.double(1.0),
            rVertex = cms.double(5)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('CosmicSeedCreator'),
        maxseeds = cms.int32(10000),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('GenericPairGenerator'),
        LayerPSet = cms.PSet(
            TOB = cms.PSet(
                TTRHBuilder = cms.string('WithTrackAngle')
            ),
            TEC = cms.PSet(
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                minRing = cms.int32(6),
                maxRing = cms.int32(7)
            ),
            layerList = cms.vstring('TOB6+TOB5', 
                'TOB6+TOB4', 
                'TOB6+TOB3', 
                'TOB5+TOB4', 
                'TOB5+TOB3', 
                'TOB4+TOB3', 
                'TEC1_neg+TOB6', 
                'TEC1_neg+TOB5', 
                'TEC1_neg+TOB4', 
                'TEC1_pos+TOB6', 
                'TEC1_pos+TOB5', 
                'TEC1_pos+TOB4')
        )
    ),
    TTRHBuilder = cms.string('WithTrackAngle')
)


process.regionalCosmicTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("regionalCosmicCkfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.roadSearchClouds = cms.EDProducer("RoadSearchCloudMaker",
    MinimalFractionOfUsedLayersPerCloud = cms.double(0.5),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    MergingFraction = cms.double(0.8),
    MaxDetHitsInCloudPerDetId = cms.uint32(8),
    SeedProducer = cms.InputTag("roadSearchSeeds"),
    DoCloudCleaning = cms.bool(True),
    IncreaseMaxNumberOfConsecutiveMissedLayersPerCloud = cms.uint32(4),
    rphiStripRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    UseStereoRecHits = cms.bool(False),
    ZPhiRoadSize = cms.double(0.06),
    MaximalFractionOfConsecutiveMissedLayersPerCloud = cms.double(0.15),
    stereoStripRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    MaximalFractionOfMissedLayersPerCloud = cms.double(0.3),
    scalefactorRoadSeedWindow = cms.double(1.5),
    UsePixelsinRS = cms.bool(True),
    IncreaseMaxNumberOfMissedLayersPerCloud = cms.uint32(3),
    RoadsLabel = cms.string(''),
    MaxRecHitsInCloud = cms.int32(100),
    UseRphiRecHits = cms.bool(False),
    StraightLineNoBeamSpotCloud = cms.bool(False),
    RPhiRoadSize = cms.double(0.02),
    matchedStripRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    MinimumHalfRoad = cms.double(0.55)
)


process.roadSearchSeeds = cms.EDProducer("RoadSearchSeedFinder",
    OuterSeedRecHitAccessMode = cms.string('RPHI'),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    MaximalEndcapImpactParameter = cms.double(1.2),
    MergeSeedsCenterCut_C = cms.double(0.4),
    MergeSeedsCenterCut_B = cms.double(0.25),
    MergeSeedsCenterCut_A = cms.double(0.05),
    MergeSeedsDifferentHitsCut = cms.uint32(1),
    rphiStripRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    MaximalBarrelImpactParameter = cms.double(0.2),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    MaxNumberOfSeeds = cms.int32(-1),
    doClusterCheck = cms.bool(False),
    stereoStripRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    OuterSeedRecHitAccessUseStereo = cms.bool(False),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MinimalReconstructedTransverseMomentum = cms.double(1.5),
    PhiRangeForDetIdLookupInRings = cms.double(0.5),
    Mode = cms.string('STANDARD'),
    MaxNumberOfPixelClusters = cms.uint32(300),
    AllNegativeOnly = cms.bool(False),
    RoadsLabel = cms.string(''),
    InnerSeedRecHitAccessMode = cms.string('RPHI'),
    InnerSeedRecHitAccessUseStereo = cms.bool(False),
    OuterSeedRecHitAccessUseRPhi = cms.bool(False),
    MergeSeedsRadiusCut_B = cms.double(0.25),
    MergeSeedsRadiusCut_C = cms.double(0.4),
    matchedStripRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    MergeSeedsRadiusCut_A = cms.double(0.05),
    InnerSeedRecHitAccessUseRPhi = cms.bool(False),
    AllPositiveOnly = cms.bool(False)
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    rpcDigiLabel = cms.InputTag("muonRPCDigis"),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgoConfig = cms.PSet(

    ),
    deadSource = cms.string('File'),
    maskSource = cms.string('File')
)


process.rsTrackCandidates = cms.EDProducer("RoadSearchTrackCandidateMaker",
    NumHitCut = cms.int32(5),
    InitialVertexErrorXY = cms.double(0.2),
    HitChi2Cut = cms.double(30.0),
    StraightLineNoBeamSpotCloud = cms.bool(False),
    nFoundMin = cms.int32(4),
    MinimumChunkLength = cms.int32(7),
    TTRHBuilder = cms.string('WithTrackAngle'),
    CosmicTrackMerging = cms.bool(False),
    MeasurementTrackerName = cms.string(''),
    CloudProducer = cms.InputTag("roadSearchClouds"),
    CosmicSeedPt = cms.double(5.0),
    SplitMatchedHits = cms.bool(False)
)


process.rsWithMaterialTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("rsTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('RKFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('rs'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.sc5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("sisCone5CaloJets")
)


process.sc7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("sisCone7CaloJets")
)


process.secondaryVertexNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(-0.01),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(-0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(-99999.9),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(-3.0),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(-2.5),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosV2 = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.seedClusterRemover = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("initialStepSeeds"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.selectDigi = cms.EDProducer("EcalDigiSelector",
    EcalEBDigiTag = cms.InputTag("ecalDigis","ebDigis"),
    nclus_sel = cms.int32(2),
    EcalEEDigiTag = cms.InputTag("ecalDigis","eeDigis"),
    barrelSuperClusterProducer = cms.InputTag("uncleanedHybridSuperClusters"),
    selectedEcalEBDigiCollection = cms.string('selectedEcalEBDigiCollection'),
    selectedEcalEEDigiCollection = cms.string('selectedEcalEEDigiCollection'),
    endcapSuperClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    EcalEBRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EcalEERecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    single_cluster_thresh = cms.double(15.0),
    cluster_pt_thresh = cms.double(10.0)
)


process.shrinkingConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("shrinkingConePFTauDecayModeProducer")
)


process.shrinkingConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.shrinkingConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByTaNC = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(

    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('OneProngNoPiZero'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('OneProngOnePiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('OneProngTwoPiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('ThreeProngNoPiZero'),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('ThreeProngOnePiZero'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    prefailValue = cms.double(-2.0),
    dbLabel = cms.string('')
)


process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9087875)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.8707145)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.921793)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9451915)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9488565)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.7649845)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.699697)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.772231)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.905071)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9238995)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9539685)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.940843)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9645195)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.960407)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.994065)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.959384)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.991353)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9712775)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9875015)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(1.0234655)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("shrinkingConePFTauProducerSansRefs"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyTaNCPiZeros")
)


process.shrinkingConePFTauProducerSansRefs = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.siPixelClusters = cms.EDProducer("SiPixelClusterProducer",
    src = cms.InputTag("siPixelDigis"),
    ChannelThreshold = cms.int32(1000),
    maxNumberOfClusters = cms.int32(-1),
    SplitClusters = cms.bool(False),
    MissCalibrate = cms.untracked.bool(True),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    payloadType = cms.string('Offline'),
    SeedThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters"),
    CPE = cms.string('PixelCPEGeneric')
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    Clusterizer = cms.PSet(
        ChannelThreshold = cms.double(2.0),
        MaxSequentialBad = cms.uint32(1),
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        MaxSequentialHoles = cms.uint32(0),
        MaxAdjacentBad = cms.uint32(0),
        QualityLabel = cms.string(''),
        SeedThreshold = cms.double(3.0),
        RemoveApvShots = cms.bool(True),
        ClusterThreshold = cms.double(5.0)
    )
)


process.siStripElectronToTrackAssociator = cms.EDProducer("SiStripElectronAssociator",
    siStripElectronCollection = cms.InputTag("siStripElectrons"),
    trackCollection = cms.InputTag("egammaCTFFinalFitWithMaterial"),
    electronsLabel = cms.InputTag("siStripElectrons")
)


process.siStripElectrons = cms.EDProducer("SiStripElectronProducer",
    siStereoHitCollection = cms.string('stereoRecHit'),
    maxHitsOnDetId = cms.int32(4),
    minHits = cms.int32(5),
    trackCandidatesLabel = cms.string(''),
    superClusterProducer = cms.string('correctedHybridSuperClusters'),
    phiBandWidth = cms.double(0.01),
    siStripElectronsLabel = cms.string(''),
    maxNormResid = cms.double(10.0),
    siHitProducer = cms.string('siStripMatchedRecHits'),
    maxReducedChi2 = cms.double(10000.0),
    siRphiHitCollection = cms.string('rphiRecHit'),
    originUncertainty = cms.double(15.0),
    siMatchedHitCollection = cms.string('matchedRecHit'),
    superClusterCollection = cms.string('')
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    Regional = cms.bool(False),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False),
    matchedRecHits = cms.string('matchedRecHit'),
    LazyGetterProducer = cms.InputTag("SiStripRawToClustersFacility"),
    ClusterProducer = cms.InputTag("siStripClusters"),
    VerbosityLevel = cms.untracked.int32(1),
    rphiRecHits = cms.string('rphiRecHit'),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    siStripQualityLabel = cms.ESInputTag(""),
    MaskBadAPVFibers = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    fixCM = cms.bool(False),
    DigisToMergeVR = cms.InputTag("siStripVRDigis","VirginRaw"),
    produceCalculatedBaseline = cms.bool(False),
    produceRawDigis = cms.bool(True),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    storeInZScollBadAPV = cms.bool(True),
    mergeCollections = cms.bool(False),
    Algorithms = cms.PSet(
        CutToAvoidSignal = cms.double(2.0),
        slopeY = cms.int32(4),
        slopeX = cms.int32(3),
        PedestalSubtractionFedMode = cms.bool(False),
        Fraction = cms.double(0.2),
        minStripsToFit = cms.uint32(4),
        consecThreshold = cms.uint32(5),
        hitStripThreshold = cms.uint32(40),
        Deviation = cms.uint32(25),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        ApplyBaselineCleaner = cms.bool(True),
        doAPVRestore = cms.bool(True),
        TruncateInSuppressor = cms.bool(True),
        restoreThreshold = cms.double(0.5),
        APVInspectMode = cms.string('BaselineFollower'),
        ForceNoRestore = cms.bool(False),
        useRealMeanCM = cms.bool(False),
        ApplyBaselineRejection = cms.bool(True),
        DeltaCMThreshold = cms.uint32(20),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        useCMMeanMap = cms.bool(False),
        SelfSelectRestoreAlgo = cms.bool(False),
        distortionThreshold = cms.uint32(20),
        filteredBaselineMax = cms.double(6),
        Iterations = cms.int32(3),
        CleaningSequence = cms.uint32(1),
        nSmooth = cms.uint32(9),
        APVRestoreMode = cms.string('BaselineFollower'),
        MeanCM = cms.int32(0)
    ),
    DigisToMergeZS = cms.InputTag("siStripDigis","ZeroSuppressed"),
    storeCM = cms.bool(True),
    produceBaselinePoints = cms.bool(False)
)


process.simpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexNegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.simpleSecondaryVertexNegativeHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.simpleSecondaryVertexNegativeHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.sisCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5),
    restrictInputs = cms.bool(True),
    maxInputs = cms.uint32(1000)
)


process.sisCone5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    restrictInputs = cms.bool(True),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.sisCone5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("sisCone5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("sisCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("sisCone5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.sisCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("sisCone5CaloJets")
)


process.sisCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("sisCone5CaloJets")
)


process.sisCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    restrictInputs = cms.bool(True),
    maxInputs = cms.uint32(1000)
)


process.sisCone7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    restrictInputs = cms.bool(True),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.sisCone7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.softMuonTagInfos = cms.EDProducer("SoftLepton",
    muonSelection = cms.uint32(1),
    leptons = cms.InputTag("muons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    leptonCands = cms.InputTag(""),
    leptonId = cms.InputTag(""),
    refineJetAxis = cms.uint32(0),
    jets = cms.InputTag("ak5CaloJets"),
    leptonDeltaRCut = cms.double(0.4),
    leptonChi2Cut = cms.double(9999.0)
)


process.softPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronsTagInfos = cms.EDProducer("SoftPFElectronTagInfoProducer",
    jets = cms.InputTag("ak5PFJets"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.softPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonsTagInfos = cms.EDProducer("SoftPFMuonTagInfoProducer",
    MuonId = cms.int32(0),
    jets = cms.InputTag("ak5PFJets"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            FitDirection = cms.string('insideOut'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        NavigationType = cms.string('Standard'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(100.0)
        ),
        DoBackwardFilter = cms.bool(True),
        SeedPosition = cms.string('in'),
        BWFilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            BWSeedType = cms.string('fromGenerator'),
            FitDirection = cms.string('outsideIn'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            MaxFractionOfLostHits = cms.double(0.05),
            ForceAllIterations = cms.bool(False),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        )
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(1.0)
        )
    )
)


process.stripPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('stripPairElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.4),
            ptMin = cms.double(1.0),
            originHalfLength = cms.double(12.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.tauGenJetMatch = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("hpsPFTauProducer"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.1),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("tauGenJetsSelectorAllHadrons")
)


process.tauGenJets = cms.EDProducer("TauGenJetProducer",
    includeNeutrinos = cms.bool(False),
    GenParticles = cms.InputTag("genParticles"),
    verbose = cms.untracked.bool(False)
)


process.tauIsoDepositPFCandidates = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("particleFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFChargedHadrons = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllChargedHadrons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFGammas = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllPhotons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFNeutralHadrons = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllNeutralHadrons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("hpsPFTauProducer"),
    maxDPtRel = cms.double(999.9),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(2),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(999.9),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.tcMet = cms.EDProducer("METProducer",
    vertexRho = cms.double(2.0),
    eVetoDeltaPhi = cms.double(100.0),
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    dupMinPt = cms.double(0.0),
    usedeltaRRejection = cms.bool(False),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    corner = cms.double(1.479),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    eta_max = cms.double(2.65),
    METType = cms.string('TCMET'),
    eVetoDeltaCotTheta = cms.double(100.0),
    tcmetDepValueMap = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    maxd0cut = cms.double(0.3),
    alias = cms.string('TCMET'),
    d0cutb = cms.double(0.5),
    trackInputTag = cms.InputTag("generalTracks"),
    usePFClusters = cms.bool(False),
    vertexMaxDZ = cms.double(0.2),
    deltaRShower = cms.double(0.01),
    chi2_max = cms.double(5),
    zdist = cms.double(314.0),
    noHF = cms.bool(False),
    track_algos = cms.vint32(),
    ptErr_tight_max = cms.double(0.2),
    InputType = cms.string('CaloMET:Electron:Muon:Track'),
    maxTrackAlgo = cms.int32(8),
    nLayers = cms.int32(0),
    muonInputTag = cms.InputTag("muons"),
    correctShowerTracks = cms.bool(False),
    vetoDuplicates = cms.bool(False),
    pt_max = cms.double(100.0),
    nhits_tight_min = cms.double(9),
    nMinOuterHits = cms.int32(2),
    globalThreshold = cms.double(0.0),
    chi2_tight_max = cms.double(5.0),
    src = cms.InputTag("towerMaker"),
    checkTrackPropagation = cms.bool(False),
    dupDPhi = cms.double(0.03),
    electronInputTag = cms.InputTag("gsfElectrons"),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    d0cuta = cms.double(0.015),
    hOverECut = cms.double(0.1),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    electronVetoCone = cms.bool(True),
    muonDepValueMap = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metInputTag = cms.InputTag("met"),
    usePvtxd0 = cms.bool(False),
    dupDCotTh = cms.double(0.0006),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    maxpt_eta25 = cms.double(0.0),
    nhits_min = cms.double(6),
    eVetoDeltaR = cms.double(0.015),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    rf_type = cms.int32(1),
    radius = cms.double(130.0),
    track_quality = cms.vint32(2),
    isCosmics = cms.bool(False),
    eVetoMinElectronPt = cms.double(10.0)
)


process.tcMetWithPFclusters = cms.EDProducer("METProducer",
    vertexRho = cms.double(2.0),
    eVetoDeltaPhi = cms.double(100.0),
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    dupMinPt = cms.double(0.0),
    chi2_tight_max = cms.double(5.0),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    corner = cms.double(1.479),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    eta_max = cms.double(2.65),
    muonInputTag = cms.InputTag("muons"),
    eVetoDeltaCotTheta = cms.double(100.0),
    maxd0cut = cms.double(0.3),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    d0cutb = cms.double(0.5),
    checkTrackPropagation = cms.bool(False),
    usePFClusters = cms.bool(True),
    vertexMaxDZ = cms.double(0.2),
    deltaRShower = cms.double(0.01),
    chi2_max = cms.double(5),
    maxpt_eta25 = cms.double(0.0),
    noHF = cms.bool(False),
    track_algos = cms.vint32(),
    ptErr_tight_max = cms.double(0.2),
    InputType = cms.string('CaloMET:Electron:Muon:Track'),
    maxTrackAlgo = cms.int32(8),
    nLayers = cms.int32(0),
    METType = cms.string('TCMET'),
    correctShowerTracks = cms.bool(False),
    vetoDuplicates = cms.bool(False),
    pt_max = cms.double(100.0),
    radius = cms.double(130.0),
    nhits_tight_min = cms.double(9),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    dupDCotTh = cms.double(0.0006),
    globalThreshold = cms.double(0.0),
    usedeltaRRejection = cms.bool(False),
    src = cms.InputTag("towerMaker"),
    trackInputTag = cms.InputTag("generalTracks"),
    dupDPhi = cms.double(0.03),
    electronInputTag = cms.InputTag("gsfElectrons"),
    tcmetDepValueMap = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    d0cuta = cms.double(0.015),
    hOverECut = cms.double(0.1),
    electronVetoCone = cms.bool(True),
    muonDepValueMap = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metInputTag = cms.InputTag("met"),
    usePvtxd0 = cms.bool(False),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    alias = cms.string('TCMET'),
    zdist = cms.double(314.0),
    nhits_min = cms.double(6),
    eVetoDeltaR = cms.double(0.015),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    rf_type = cms.int32(1),
    nMinOuterHits = cms.int32(2),
    track_quality = cms.vint32(2),
    isCosmics = cms.bool(False),
    eVetoMinElectronPt = cms.double(10.0)
)


process.tcRecoTauProducer = cms.EDProducer("TCRecoTauProducer",
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        DYTthrs = cms.vint32(10, 5),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(30.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    MuonCollectionLabel = cms.InputTag("globalMuons")
)


process.tobTecStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("pixelLessStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("pixelLessStepSelector","pixelLessStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.tobTecStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('tobTecStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(6.0),
            ptMin = cms.double(0.6),
            originHalfLength = cms.double(30.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.tobTecStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("tobTecStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(2),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(5),
        chi2n_par = cms.double(0.4),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.8, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        dz_par1 = cms.vdouble(1.8, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('tobTecStepLoose'),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        d0_par2 = cms.vdouble(2.0, 4.0),
        d0_par1 = cms.vdouble(2.0, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.3),
            dz_par1 = cms.vdouble(1.4, 4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('tobTecStepTight'),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('tobTecStepLoose'),
            d0_par2 = cms.vdouble(1.5, 4.0),
            d0_par1 = cms.vdouble(1.5, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.3, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            dz_par1 = cms.vdouble(1.3, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('tobTecStep'),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            d0_par2 = cms.vdouble(1.4, 4.0),
            d0_par1 = cms.vdouble(1.4, 4.0),
            preFilterName = cms.string('tobTecStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.tobTecStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("tobTecStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('tobTecStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.tobTecStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("tobTecStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('tobTecFlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('iter6'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HBThreshold = cms.double(0.7),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.8),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    EBThreshold = cms.double(0.07),
    UseRejectedHitsOnly = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.towerMakerPF = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HBThreshold = cms.double(0.4),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.4),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(1.8),
    HcalAcceptSeverityLevel = cms.uint32(11),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(0.8),
    HOThresholdPlus2 = cms.double(0.8),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(1.2),
    HOThresholdMinus1 = cms.double(0.8),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.4),
    EBThreshold = cms.double(0.07),
    UseRejectedHitsOnly = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(0.8),
    HOThreshold0 = cms.double(0.2),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Weight = cms.double(1.0),
    HBThreshold = cms.double(0.7),
    EBThreshold = cms.double(0.07),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    UseRejectedHitsOnly = cms.bool(False),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.trackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackExtrapolator = cms.EDProducer("TrackExtrapolator",
    trackQuality = cms.string('goodIterative'),
    trackSrc = cms.InputTag("generalTracks")
)


process.trackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    src = cms.InputTag("trackWithVertexRefSelector"),
    particleType = cms.string('pi+')
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    HOverPLead_maxValue = cms.double(0.05),
    MaxEOverP = cms.double(3.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    UseQuality = cms.bool(True),
    EOverPLead_minValue = cms.double(0.95),
    ProducePreId = cms.untracked.bool(True),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    ApplyIsolation = cms.bool(False),
    TMVAMethod = cms.string('BDT'),
    MaxEta = cms.double(2.4),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    PreCkfLabel = cms.string('SeedsForCkf'),
    NHitsInSeed = cms.int32(3),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    UsePreShower = cms.bool(False),
    MinEOverP = cms.double(0.3),
    PreIdLabel = cms.string('preid'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EcalStripSumE_deltaEta = cms.double(0.03),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    MinPt = cms.double(2.0),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    UseTMVA = cms.untracked.bool(True),
    HcalWindow = cms.double(0.184),
    TrackQuality = cms.string('highPurity'),
    Weights = cms.string('RecoParticleFlow/PFTracking/data/BDT_weights_21.txt'),
    MaxPt = cms.double(50.0),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    ClusterThreshold = cms.double(0.5)
)


process.tripletElectronClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("tripletElectronSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.tripletElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('tripletElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(20000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(1.0)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    )
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vstring(),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    HybridBarrelSeedThr = cms.double(1.0),
    dynamicPhiRoad = cms.bool(False),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    useEtForXi = cms.bool(True),
    step = cms.int32(17),
    eThreshB = cms.double(0.1),
    xi = cms.double(0.0),
    eseed = cms.double(0.35),
    ecalhitproducer = cms.string('ecalRecHit'),
    dynamicEThresh = cms.bool(False),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    excludeFlagged = cms.bool(False),
    superclusterCollection = cms.string('')
)


process.uncleanedOnlyAllConversions = cms.EDProducer("ConversionProducer",
    bypassPreselGsf = cms.bool(True),
    AllowD0 = cms.bool(True),
    dEtaTrackBC = cms.double(0.2),
    convertedPhotonCollection = cms.string(''),
    AllowRightBC = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    scEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    MaxChi2Right = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    vtxChi2 = cms.double(0.0005),
    maxTrackRho = cms.double(120.0),
    d0 = cms.double(0.0),
    bypassPreselEcal = cms.bool(False),
    dPhicutForSCmatching = cms.double(0.05),
    AllowOppCharge = cms.bool(True),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    deltaEta = cms.double(0.4),
    maxDelta = cms.double(0.01),
    HalfwayEta = cms.double(0.1),
    MinApproachLow = cms.double(-0.25),
    AllowDeltaPhi = cms.bool(False),
    maxReducedChiSq = cms.double(225.0),
    maxTrackZ = cms.double(300.0),
    maxNumOfTrackInPU = cms.int32(999999),
    MinApproachHigh = cms.double(1.0),
    AllowSingleLeg = cms.bool(False),
    AllowVertex = cms.bool(True),
    dEtacutForSCmatching = cms.double(0.03),
    DeltaPhi = cms.double(0.2),
    MinHitsRight = cms.int32(2),
    dz = cms.double(5.0),
    maxNbrOfIterations = cms.int32(40),
    AllowDeltaCot = cms.bool(True),
    EnergyBC = cms.double(0.3),
    MinHitsLeft = cms.int32(4),
    DeltaCotTheta = cms.double(0.1),
    src = cms.InputTag("uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger"),
    EnergyTotalBC = cms.double(0.3),
    UsePvtx = cms.bool(True),
    bypassPreselEcalEcal = cms.bool(True),
    minSCEt = cms.double(10.0),
    AllowTrackBC = cms.bool(False),
    rCut = cms.double(2.0),
    minChiSqImprovement = cms.double(50.0),
    dPhiTrackBC = cms.double(1.0),
    MaxChi2Left = cms.double(10.0),
    AlgorithmName = cms.string('mixed'),
    scBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    AllowMinApproach = cms.bool(True)
)


process.uncleanedOnlyCkfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","inOutTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    ComponentName = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection')
)


process.uncleanedOnlyCkfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","outInTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    Fitter = cms.string('KFFitterForOutIn'),
    ComponentName = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('outInEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection')
)


process.uncleanedOnlyConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    scHybridBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    useHitsSplitting = cms.bool(False),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    ValidHitBonus = cms.double(5.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    vetoClusteredHits = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    ecalIsoCut_offset = cms.double(999999999),
    hcalTowers = cms.InputTag("towerMaker"),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    isoEMin = cms.double(0.08),
    isoEtaSlice = cms.double(2.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsOutIn = cms.int32(50),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    useNumXstals = cms.bool(True),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    ecalIsoCut_slope = cms.double(0.0),
    maxNumOfSeedsInOut = cms.int32(50),
    isoEtMin = cms.double(0.0),
    fractionShared = cms.double(0.5),
    minSCEt = cms.double(20.0),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    hOverEConeSize = cms.double(0.15),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isoInnerConeR = cms.double(3.5),
    isoConeR = cms.double(0.4),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    allowSharedFirstHit = cms.bool(True)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(True),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    applyCrackCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(1.1),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181),
        brLinearHighThr = cms.double(8.0),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(False),
    rawSuperClusterProducer = cms.InputTag("uncleanedOnlyMulti5x5SuperClustersWithPreshower"),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    fix_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.9),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93),
        brLinearHighThr = cms.double(6.0),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221)
    ),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.uncleanedOnlyElectronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("uncleanedOnlyElectronSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(1000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForElectrons')
)


process.uncleanedOnlyElectronGsfTracks = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("uncleanedOnlyElectronCkfTrackCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('gsf'),
    Propagator = cms.string('fwdGsfElectronPropagator')
)


process.uncleanedOnlyElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    endcapSuperClusters = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    SeedConfiguration = cms.PSet(
        PhiMax2B = cms.double(0.002),
        hOverEPtMin = cms.double(0.0),
        PhiMax2F = cms.double(0.003),
        searchInTIDTEC = cms.bool(True),
        PhiMin2F = cms.double(-0.003),
        deltaZ1WithVertex = cms.double(25.0),
        HighPtThreshold = cms.double(35.0),
        r2MinF = cms.double(-0.15),
        maxHBarrel = cms.double(0.0),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi1High = cms.double(0.08),
        ePhiMin1 = cms.double(-0.125),
        hcalTowers = cms.InputTag("towerMaker"),
        LowPtThreshold = cms.double(5.0),
        maxHOverEBarrel = cms.double(0.15),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        measurementTrackerName = cms.string(''),
        SizeWindowENeg = cms.double(0.675),
        nSigmasDeltaZ1 = cms.double(5.0),
        rMaxI = cms.double(0.2),
        maxHEndcaps = cms.double(0.0),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        pPhiMin1 = cms.double(-0.075),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        pPhiMax1 = cms.double(0.125),
        SCEtCut = cms.double(4.0),
        z2MaxB = cms.double(0.09),
        fromTrackerSeeds = cms.bool(True),
        hcalRecHits = cms.InputTag("hbhereco"),
        z2MinB = cms.double(-0.09),
        rMinI = cms.double(-0.2),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        useRecoVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        DeltaPhi2F = cms.double(0.012),
        applyHOverECut = cms.bool(True),
        hOverEHFMinE = cms.double(0.8),
        DeltaPhi2B = cms.double(0.008),
        PhiMin2B = cms.double(-0.002)
    ),
    barrelSuperClusters = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters")
)


process.uncleanedOnlyGeneralConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('generalTracks'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(3),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    TrackProducer2 = cms.string('uncleanedOnlyGeneralConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyInOutOutInConversionTrackMerger')
)


process.uncleanedOnlyGsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyElectronGsfTracks'),
    filterOnConvTrackHyp = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.uncleanedOnlyGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfTracks = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    gsfPfRecTracks = cms.InputTag("uncleanedOnlyPfTrackElec"),
    useGsfPfRecTracks = cms.bool(True)
)


process.uncleanedOnlyGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("uncleanedOnlyPfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(False),
    minMVAPflow = cms.double(-0.4),
    ctfTracksTag = cms.InputTag("generalTracks"),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kSaturated', 
        'kLeadingEdgeRecovered', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag(""),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.4),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.4),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("uncleanedOnlyGsfElectronCores"),
    isFiducialPflow = cms.bool(False),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("uncleanedOnlyElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kPoorCalib', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(2),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('uncleanedOnlyGsfConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyGeneralInOutOutInConversionTrackMerger')
)


process.uncleanedOnlyInOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.uncleanedOnlyInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(3),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('uncleanedOnlyOutInConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyInOutConversionTrackProducer')
)


process.uncleanedOnlyMulti5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshStripEnergyCut = cms.double(0.0),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapSuperClusters"),
    preshNclust = cms.int32(4),
    preshClusterEnergyCut = cms.double(0.0),
    preshSeededNstrip = cms.int32(15)
)


process.uncleanedOnlyOutInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.uncleanedOnlyPfConversions = cms.EDProducer("PFConversionProducer",
    conversionCollection = cms.InputTag("allConversions"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices")
)


process.uncleanedOnlyPfTrack = cms.EDProducer("PFTrackProducer",
    TrajInEvents = cms.bool(False),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    GsfTracksInEvents = cms.bool(True),
    UseQuality = cms.bool(True),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    TrackQuality = cms.string('highPurity'),
    MuColl = cms.InputTag("muons1stStep")
)


process.uncleanedOnlyPfTrackElec = cms.EDProducer("PFElecTkProducer",
    TrajInEvents = cms.bool(False),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    PFConversions = cms.InputTag("uncleanedOnlyPfConversions"),
    useConversions = cms.bool(False),
    MinSCEnergy = cms.double(4.0),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    ModeMomentum = cms.bool(True),
    Propagator = cms.string('fwdElectronPropagator'),
    useV0 = cms.bool(False),
    pf_convBremFinderID_mvaWeightFile = cms.string('RecoParticleFlow/PFTracking/data/MVAnalysis_BDT.weights_convBremFinder_19Apr_IntToFloat.txt'),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    MinDPhiGsfSC = cms.double(0.15),
    applyEGSelection = cms.bool(False),
    useNuclear = cms.bool(False),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    applyGsfTrackCleaning = cms.bool(True),
    MinDEtaGsfSC = cms.double(0.06),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    useConvBremFinder = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    PFV0 = cms.InputTag("pfV0"),
    pf_convBremFinderID_mvaCut = cms.double(0.2),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    MaxConvBremRecoPT = cms.double(49.0),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    TTRHBuilder = cms.string('WithTrackAngle'),
    PFRecTrackLabel = cms.InputTag("uncleanedOnlyPfTrack")
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    lowGainOffset = cms.int32(1),
    lowGainFrac = cms.double(8.15),
    correctionPhaseNS = cms.double(0.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setHSCPFlags = cms.bool(True),
    Subdetector = cms.string('ZDC'),
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    setTimingTrustFlags = cms.bool(False),
    recoMethod = cms.int32(2),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.bVertexFilter = cms.EDFilter("BVertexFilter",
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    minVertices = cms.int32(0),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.1),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    secondaryVertices = cms.InputTag("secondaryVertices")
)


process.countPatElectrons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("cleanPatElectrons"),
    minNumber = cms.uint32(0)
)


process.countPatJets = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("cleanPatJets"),
    minNumber = cms.uint32(0)
)


process.countPatLeptons = cms.EDFilter("PATLeptonCountFilter",
    maxNumber = cms.uint32(999999),
    countElectrons = cms.bool(True),
    muonSource = cms.InputTag("cleanPatMuons"),
    minNumber = cms.uint32(0),
    electronSource = cms.InputTag("cleanPatElectrons"),
    tauSource = cms.InputTag("cleanPatTaus"),
    countTaus = cms.bool(False),
    countMuons = cms.bool(True)
)


process.countPatMuons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("cleanPatMuons"),
    minNumber = cms.uint32(0)
)


process.countPatPhotons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("cleanPatPhotons"),
    minNumber = cms.uint32(0)
)


process.countPatTaus = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("cleanPatTaus"),
    minNumber = cms.uint32(0)
)


process.electronsWithPresel = cms.EDFilter("GsfElectronSelector",
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    cut = cms.string('pt > 5 && ecalDrivenSeed && passingCutBasedPreselection')
)


process.goodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('!isFake && ndof > 4 && abs(z) <= 24 && position.rho < 2')
)


process.hltFilter = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring('HLT_Jet*', 
        'HLT_DiJetAve*'),
    throw = cms.bool(False),
    andOr = cms.bool(True)
)


process.inclusiveSecondaryVerticesFiltered = cms.EDFilter("BVertexFilter",
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    minVertices = cms.int32(0),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.1),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    secondaryVertices = cms.InputTag("inclusiveSecondaryVertices")
)


process.mvaElectrons = cms.EDFilter("ElectronIdMVABased",
    electronTag = cms.InputTag("electronsWithPresel"),
    thresholdIsoDR03Barrel = cms.double(10.0),
    thresholdEndcap = cms.double(-0.1075),
    thresholdIsoDR03Endcap = cms.double(10.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    HZZmvaWeightFile = cms.string('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    thresholdBarrel = cms.double(-0.1875)
)


process.offlinePrimaryVerticesWithBS = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices","WithBS"),
    cut = cms.string('')
)


process.pfAllChargedHadrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticles = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllElectrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuon")
)


process.pfAllMuons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUp")
)


process.pfAllNeutralHadrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIso")
)


process.pfSelectedElectrons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("particleFlowTmp"),
    cut = cms.string('abs(pdgId())==11')
)


process.pfSelectedPhotons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("particleFlowTmp"),
    cut = cms.string('pdgId()==22 && mva_nothing_gamma>0')
)


process.recoTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.selectedPatElectrons = cms.EDFilter("PATElectronSelector",
    src = cms.InputTag("patElectrons"),
    cut = cms.string('')
)


process.selectedPatJets = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJets"),
    cut = cms.string('')
)


process.selectedPatJetsAK5PFCorr = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsAK5PFCorr"),
    cut = cms.string('')
)


process.selectedPatJetsAK7PFCorr = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsAK7PFCorr"),
    cut = cms.string('')
)


process.selectedPatMuons = cms.EDFilter("PATMuonSelector",
    src = cms.InputTag("patMuons"),
    cut = cms.string('')
)


process.selectedPatPhotons = cms.EDFilter("PATPhotonSelector",
    src = cms.InputTag("patPhotons"),
    cut = cms.string('')
)


process.selectedPatTaus = cms.EDFilter("PATTauSelector",
    src = cms.InputTag("patTaus"),
    cut = cms.string('')
)


process.tauGenJetsSelectorAllHadrons = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    src = cms.InputTag("tauGenJets"),
    select = cms.vstring('oneProng0Pi0', 
        'oneProng1Pi0', 
        'oneProng2Pi0', 
        'oneProngOther', 
        'threeProng0Pi0', 
        'threeProng1Pi0', 
        'threeProngOther', 
        'rare')
)


process.trackWithVertexRefSelector = cms.EDFilter("TrackWithVertexRefSelector",
    normalizedChi2 = cms.double(999999.0),
    d0Max = cms.double(999.0),
    numberOfValidHits = cms.uint32(0),
    vtxFallback = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    quality = cms.string('highPurity'),
    nVertices = cms.uint32(0),
    copyTrajectories = cms.untracked.bool(False),
    ptMax = cms.double(500.0),
    zetaVtx = cms.double(1.0),
    numberOfLostHits = cms.uint32(999),
    etaMin = cms.double(0.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    ptErrorCut = cms.double(0.2),
    ptMin = cms.double(0.3),
    numberOfValidPixelHits = cms.uint32(0),
    rhoVtx = cms.double(0.2),
    dzMax = cms.double(999.0),
    src = cms.InputTag("generalTracks"),
    etaMax = cms.double(5.0),
    useVtx = cms.bool(True)
)


process.trackingFailureFilter = cms.EDFilter("TrackingFailureFilter",
    JetSource = cms.InputTag("ak5PFJets"),
    MinSumPtOverHT = cms.double(0.1),
    TrackSource = cms.InputTag("generalTracks"),
    DxyTrVtxMax = cms.double(0.2),
    taggingMode = cms.bool(False),
    debug = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    VertexSource = cms.InputTag("goodOfflinePrimaryVertices")
)


process.ak5ak7 = cms.EDAnalyzer("OpenDataTreeProducer",
    pfak7jets = cms.InputTag("selectedPatJetsAK7PFCorr"),
    minPFPt = cms.double(15),
    maxY = cms.double(5.0),
    isMCarlo = cms.untracked.bool(False),
    minJJMass = cms.double(-1),
    triggerNames = cms.vstring('HLT_Jet30', 
        'HLT_Jet60', 
        'HLT_Jet80', 
        'HLT_Jet110', 
        'HLT_Jet150', 
        'HLT_Jet190', 
        'HLT_Jet240', 
        'HLT_Jet370'),
    pfmet = cms.InputTag("pfMET5"),
    minNPFJets = cms.int32(1),
    offlineVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    processName = cms.string('HLT'),
    goodVtxNdof = cms.double(4),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    printTriggerMenu = cms.untracked.bool(True),
    srcPFRho = cms.InputTag("kt6PFJets","rho"),
    pfak5jets = cms.InputTag("selectedPatJetsAK5PFCorr"),
    goodVtxZ = cms.double(24)
)


process.cleanPatCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('cleanPatCandidates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("cleanPatElectrons"), cms.InputTag("cleanPatMuons"), cms.InputTag("cleanPatTaus"), cms.InputTag("cleanPatPhotons"), cms.InputTag("cleanPatJets"))
)


process.patCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('patCandidates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("patElectrons"), cms.InputTag("patMuons"), cms.InputTag("patTaus"), cms.InputTag("patPhotons"), cms.InputTag("patJets"), 
        cms.InputTag("patMETs"), cms.InputTag("patMETsPF"))
)


process.selectedPatCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('selectedPatCanddiates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("selectedPatElectrons"), cms.InputTag("selectedPatMuons"), cms.InputTag("selectedPatTaus"), cms.InputTag("selectedPatPhotons"), cms.InputTag("selectedPatJets"))
)


process.out = cms.OutputModule("PoolOutputModule",
    fileName = cms.untracked.string('patTuple.root'),
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('p')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_selectedPatJets*_*_*', 
        'drop patJets_selectedPatJets*_*_*', 
        'drop *_selectedPatJets_pfCandidates_*', 
        'drop *_*PF_caloTowers_*', 
        'drop *_*JPT_pfCandidates_*', 
        'drop *_*Calo_pfCandidates_*', 
        'keep *_cleanPatPhotons*_*_*', 
        'keep *_cleanPatElectrons*_*_*', 
        'keep *_cleanPatMuons*_*_*', 
        'keep *_cleanPatTaus*_*_*', 
        'keep *_cleanPatJets*_*_*', 
        'keep *_patMETs*_*_*', 
        'keep *_cleanPatHemispheres*_*_*', 
        'keep *_cleanPatPFParticles*_*_*', 
        'keep *_cleanPatTrackCands*_*_*', 
        'drop *_selectedPatJets*_genJets_*', 
        'drop *_selectedPatJets*_genJets_*', 
        'drop *_selectedPatJetsAK5PFCorr_tagInfos_*', 
        'drop *_selectedPatJetsAK7PFCorr_tagInfos_*')
)


process.regionalCosmicTracksSeq = cms.Sequence(process.regionalCosmicTrackerSeeds+process.regionalCosmicCkfTrackCandidates+process.regionalCosmicTracks)


process.ak7JTA = cms.Sequence(process.ak7JetTracksAssociatorAtVertex+process.ak7JetTracksAssociatorAtCaloFace+process.ak7JetExtender)


process.recopixelvertexing = cms.Sequence(process.pixelTracks+process.pixelVertices)


process.patShrinkingConePFTauDiscrimination = cms.Sequence()


process.btagging = cms.Sequence(process.impactParameterTagInfos+process.trackCountingHighEffBJetTags+process.trackCountingHighPurBJetTags+process.jetProbabilityBJetTags+process.jetBProbabilityBJetTags+process.secondaryVertexTagInfos+process.simpleSecondaryVertexHighEffBJetTags+process.simpleSecondaryVertexHighPurBJetTags+process.combinedSecondaryVertexBJetTags+process.combinedSecondaryVertexMVABJetTags+process.ghostTrackVertexTagInfos+process.ghostTrackBJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags)


process.uncleanedOnlyElectrons = cms.Sequence(process.uncleanedOnlyGsfElectronCores+process.uncleanedOnlyGsfElectrons)


process.iterativeCone5JTA = cms.Sequence(process.iterativeCone5JetTracksAssociatorAtVertex+process.iterativeCone5JetTracksAssociatorAtCaloFace+process.iterativeCone5JetExtender)


process.recoTauCommonSequence = cms.Sequence(process.ak5PFJetTracksAssociatorAtVertex+process.recoTauAK5PFJets08Region+process.recoTauPileUpVertices+process.pfRecoTauTagInfoProducer)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt4DCosmicSegments)


process.patElectronId = cms.Sequence(process.eidRobustHighEnergy)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClusters+process.siPixelRecHits)


process.RunTanc = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.JetPlusTrackCorrectionsAntiKt5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetAntiKt5)


process.beamhaloTracksSeq = cms.Sequence(process.beamhaloTrackerSeeds+process.beamhaloTrackCandidates+process.beamhaloTracks)


process.PixelPairStep = cms.Sequence(process.pixelPairStepClusters+process.pixelPairStepSeeds+process.pixelPairStepTrackCandidates+process.pixelPairStepTracks+process.pixelPairStepSelector)


process.hpsPFTauDiscriminationByChargedIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolation+process.hpsPFTauDiscriminationByLooseChargedIsolation+process.hpsPFTauDiscriminationByMediumChargedIsolation+process.hpsPFTauDiscriminationByTightChargedIsolation)


process.hpsTancTauInitialSequence = cms.Sequence(process.combinatoricRecoTausDiscriminationByLeadingPionPtCut+process.combinatoricRecoTausHPSSelector+process.hpsTancTausSansRefs+process.hpsTancTaus+process.hpsTancTausDiscriminationByLeadingTrackFinding+process.hpsTancTausDiscriminationByLeadingPionPtCut+process.hpsTancTausDiscriminationByLeadingTrackPtCut+process.hpsTancTausDiscriminationByDecayModeSelection)


process.patCaloTauDiscrimination = cms.Sequence()


process.pfSortByTypeSequence = cms.Sequence(process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons)


process.particleFlowTrackWithNuclear = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfNuclear)


process.vertexreco = cms.Sequence(process.offlinePrimaryVertices+process.offlinePrimaryVerticesWithBS+process.generalV0Candidates)


process.dtlocalreco_with_2DSegments = cms.Sequence(process.dt1DRecHits+process.dt2DSegments+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt2DCosmicSegments+process.dt4DCosmicSegments)


process.particleFlowTrackWithV0 = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfV0)


process.patJetFlavourId = cms.Sequence(process.patJetPartons)


process.CastorFullReco = cms.Sequence(process.CastorTowerReco+process.ak7BasicJets+process.ak7CastorJetID)


process.ctfTracksCombinedSeeds = cms.Sequence(process.globalSeedsFromPairsWithVertices+process.globalSeedsFromTriplets+process.globalCombinedSeeds+process.ckfTrackCandidatesCombinedSeeds+process.ctfCombinedSeeds)


process.hpsTancTauDiscriminantSequence = cms.Sequence(process.hpsTancTausDiscriminationByTancRaw+process.hpsTancTausDiscriminationByTanc+process.hpsTancTausDiscriminationByTancVLoose+process.hpsTancTausDiscriminationByTancLoose+process.hpsTancTausDiscriminationByTancMedium+process.hpsTancTausDiscriminationByTancTight+process.hpsTancTausDiscriminationByVLooseIsolation+process.hpsTancTausDiscriminationByLooseIsolation+process.hpsTancTausDiscriminationByMediumIsolation+process.hpsTancTausDiscriminationByTightIsolation+process.hpsTancTausDiscriminationByLooseElectronRejection+process.hpsTancTausDiscriminationByMediumElectronRejection+process.hpsTancTausDiscriminationByTightElectronRejection+process.hpsTancTausDiscriminationByLooseMuonRejection+process.hpsTancTausDiscriminationByTightMuonRejection)


process.TobTecStep = cms.Sequence(process.tobTecStepClusters+process.tobTecStepSeeds+process.tobTecStepTrackCandidates+process.tobTecStepTracks+process.tobTecStepSelector)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits = cms.Sequence(process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits)


process.patPFTauIsolation = cms.Sequence(process.tauIsoDepositPFCandidates+process.tauIsoDepositPFChargedHadrons+process.tauIsoDepositPFNeutralHadrons+process.tauIsoDepositPFGammas)


process.muonSelectionTypeSequence = cms.Sequence(process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight)


process.patPhotonTrackIsolation = cms.Sequence(process.gamIsoDepositTk+process.gamIsoFromDepsTk)


process.MixedTripletStep = cms.Sequence(process.mixedTripletStepClusters+process.mixedTripletStepSeedsA+process.mixedTripletStepSeedsB+process.mixedTripletStepSeeds+process.mixedTripletStepTrackCandidates+process.mixedTripletStepTracks+process.mixedTripletStepSelector+process.mixedTripletStep)


process.ak5JTAExplicit = cms.Sequence(process.ak5JetTracksAssociatorExplicit)


process.allConversionSequence = cms.Sequence(process.allConversions)


process.seldigis = cms.Sequence(process.selectDigi)


process.eIdSequence = cms.Sequence(process.eidRobustLoose+process.eidRobustTight+process.eidRobustHighEnergy+process.eidLoose+process.eidTight)


process.muoncosmicreco1legSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons1Leg)


process.recoAllJetIds = cms.Sequence(process.ak5JetID+process.ak7JetID+process.sc5JetID+process.sc7JetID+process.ic5JetID+process.kt4JetID+process.kt6JetID+process.ca4JetID+process.ca6JetID+process.gk5JetID+process.gk7JetID)


process.reducedHcalRecHitsSequence = cms.Sequence(process.reducedHcalRecHits)


process.patPhotonHcalIsolation = cms.Sequence(process.gamIsoDepositHcalFromTowers+process.gamIsoFromDepsHcalFromTowers)


process.produceShrinkingConeDiscriminationByTauNeuralClassifier = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNC+process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.siStripElectronSequence = cms.Sequence(process.siStripElectrons+process.egammaCTFFinalFitWithMaterial+process.siStripElectronToTrackAssociator)


process.hpsPFTauDiscriminationByIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation)


process.interestingEgammaIsoDetIds = cms.Sequence(process.interestingEleIsoDetIdEB+process.interestingEleIsoDetIdEE+process.interestingGamIsoDetIdEB+process.interestingGamIsoDetIdEE)


process.uncleanedOnlyCkfTracksFromConversions = cms.Sequence(process.uncleanedOnlyConversionTrackCandidates+process.uncleanedOnlyCkfOutInTracksFromConversions+process.uncleanedOnlyCkfInOutTracksFromConversions)


process.recoJetIds = cms.Sequence(process.ak5JetID+process.ak7JetID+process.ic5JetID+process.kt4JetID+process.kt6JetID)


process.caloTowersRec = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.produceAndDiscriminateShrinkingConePFTaus = cms.Sequence(process.shrinkingConePFTauProducerSansRefs+process.shrinkingConePFTauProducer+process.shrinkingConePFTauDiscriminationByLeadingTrackFinding+process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut+process.shrinkingConePFTauDiscriminationByLeadingPionPtCut+process.shrinkingConePFTauDiscriminationByIsolation+process.shrinkingConePFTauDiscriminationByTrackIsolation+process.shrinkingConePFTauDiscriminationByECALIsolation+process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationAgainstElectron+process.shrinkingConePFTauDiscriminationAgainstMuon)


process.makePatPhotons = cms.Sequence(process.photonMatch+process.patPhotons)


process.pfClusteringPS = cms.Sequence(process.particleFlowRecHitPS+process.particleFlowClusterPS)


process.uncleanedOnlyTracking = cms.Sequence(process.uncleanedOnlyElectronSeeds+process.uncleanedOnlyElectronCkfTrackCandidates+process.uncleanedOnlyElectronGsfTracks)


process.electronSeeds = cms.Sequence(process.trackerDrivenElectronSeeds+process.ecalDrivenElectronSeeds+process.electronMergedSeeds)


process.muIsoDeposits_ParamGlobalMuonsOld = cms.Sequence(process.muParamGlobalIsoDepositGsTk+process.muParamGlobalIsoDepositCalEcal+process.muParamGlobalIsoDepositCalHcal)


process.uncleanedOnlyPfTracking = cms.Sequence(process.uncleanedOnlyPfTrack+process.uncleanedOnlyPfConversions+process.uncleanedOnlyPfTrackElec)


process.gsfEcalDrivenElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons)


process.DetachedTripletStep = cms.Sequence(process.detachedTripletStepClusters+process.detachedTripletStepSeeds+process.detachedTripletStepTrackCandidates+process.detachedTripletStepTracks+process.detachedTripletStepSelector+process.detachedTripletStep)


process.uncleanedOnlyConversionTrackMergers = cms.Sequence(process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger+process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger)


process.standAloneMuonSeeds = cms.Sequence(process.ancientMuonSeed)


process.selectedPatCandidates = cms.Sequence(process.selectedPatElectrons+process.selectedPatMuons+process.selectedPatTaus+process.selectedPatPhotons+process.selectedPatJets+process.selectedPatCandidateSummary)


process.countPatCandidates = cms.Sequence(process.countPatElectrons+process.countPatMuons+process.countPatTaus+process.countPatLeptons+process.countPatPhotons+process.countPatJets)


process.photonPFIsolationDepositsSequence = cms.Sequence(process.phPFIsoDepositCharged+process.phPFIsoDepositChargedAll+process.phPFIsoDepositGamma+process.phPFIsoDepositNeutral+process.phPFIsoDepositPU)


process.electronSeedsSeq = cms.Sequence(process.initialStepSeedClusterMask+process.pixelPairStepSeedClusterMask+process.mixedTripletStepSeedClusterMask+process.pixelLessStepSeedClusterMask+process.tripletElectronSeeds+process.tripletElectronClusterMask+process.pixelPairElectronSeeds+process.stripPairElectronSeeds+process.newCombinedSeeds)


process.hpsPFTauDiscriminationByMVAIsolationSeq = cms.Sequence(process.kt6PFJetsForRhoComputationVoronoi+process.hpsPFTauDiscriminationByIsolationMVAraw+process.hpsPFTauDiscriminationByLooseIsolationMVA+process.hpsPFTauDiscriminationByMediumIsolationMVA+process.hpsPFTauDiscriminationByTightIsolationMVA+process.hpsPFTauDiscriminationByIsolationMVA2raw+process.hpsPFTauDiscriminationByLooseIsolationMVA2+process.hpsPFTauDiscriminationByMediumIsolationMVA2+process.hpsPFTauDiscriminationByTightIsolationMVA2)


process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr)


process.muoncosmicreco2legsSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons)


process.ctfTracksPixelLess = cms.Sequence(process.globalPixelLessSeeds+process.ckfTrackCandidatesPixelLess+process.ctfPixelLess)


process.ckfTracksFromConversions = cms.Sequence(process.conversionTrackCandidates+process.ckfOutInTracksFromConversions+process.ckfInOutTracksFromConversions)


process.pfGsfElectronMVASelectionSequence = cms.Sequence(process.electronsWithPresel+process.mvaElectrons)


process.recoAllTrackJets = cms.Sequence(process.trackWithVertexRefSelector+process.trackRefsForJets+process.sisCone5TrackJets+process.sisCone7TrackJets+process.kt4TrackJets+process.kt6TrackJets+process.iterativeCone5TrackJets+process.ak5TrackJets+process.ak7TrackJets+process.gk5TrackJets+process.gk7TrackJets+process.ca4TrackJets+process.ca6TrackJets)


process.LowPtTripletStep = cms.Sequence(process.lowPtTripletStepClusters+process.lowPtTripletStepSeeds+process.lowPtTripletStepTrackCandidates+process.lowPtTripletStepTracks+process.lowPtTripletStepSelector)


process.hcalGlobalRecoSequence = cms.Sequence(process.hbhereco)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.patJetCorrections = cms.Sequence(process.patJetCorrFactors)


process.recoJets = cms.Sequence(process.kt4CaloJets+process.kt6CaloJets+process.kt6CaloJetsCentral+process.iterativeCone5CaloJets+process.ak5CaloJets+process.ak7CaloJets)


process.ConvStep = cms.Sequence(process.convClusters+process.photonConvTrajSeedFromSingleLeg+process.convTrackCandidates+process.convStepTracks+process.convStepSelector)


process.InitialStep = cms.Sequence(process.initialStepSeeds+process.initialStepTrackCandidates+process.initialStepTracks+process.initialStepSelector)


process.reducedEcalRecHitsSequence = cms.Sequence(process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.seldigis+process.reducedEcalRecHitsES)


process.BeamHaloId = cms.Sequence(process.CSCHaloData+process.EcalHaloData+process.HcalHaloData+process.GlobalHaloData+process.BeamHaloSummary)


process.recoAllPFJets = cms.Sequence(process.sisCone5PFJets+process.sisCone7PFJets+process.kt4PFJets+process.kt6PFJets+process.kt6PFJetsCentralChargedPileUp+process.kt6PFJetsCentralNeutral+process.kt6PFJetsCentralNeutralTight+process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets+process.ak5PFJetsTrimmed+process.ak5PFJetsPruned+process.ak5PFJetsFiltered+process.ak5PFJetsMassDropFiltered+process.gk5PFJets+process.gk7PFJets+process.ca4PFJets+process.ca6PFJets)


process.ecalLocalRecoSequence_nopreshower = cms.Sequence(process.ecalGlobalUncalibRecHit+process.ecalRecHit)


process.TCTau = cms.Sequence(process.caloRecoTauProducer+process.caloRecoTauDiscriminationByLeadingTrackFinding+process.caloRecoTauDiscriminationByLeadingTrackPtCut+process.caloRecoTauDiscriminationByTrackIsolation+process.caloRecoTauDiscriminationByECALIsolation+process.caloRecoTauDiscriminationByIsolation+process.caloRecoTauDiscriminationAgainstElectron+process.caloRecoTauDiscriminationAgainstMuon)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsVetoSeeds+process.cosmicsVetoTrackCandidates+process.cosmicsVetoTracksRaw+process.cosmicsVetoTracks+process.cosmicsVeto)


process.patElectronTrackIsolation = cms.Sequence(process.eleIsoDepositTk+process.eleIsoFromDepsTk)


process.recoTrackJets = cms.Sequence(process.trackWithVertexRefSelector+process.trackRefsForJets+process.ak5TrackJets+process.kt4TrackJets)


process.hcalLocalRecoSequence = cms.Sequence(process.hbheprereco+process.hfreco+process.horeco+process.zdcreco)


process.JetPlusTrackCorrectionsSisCone5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetSiscone5)


process.PixelLessStep = cms.Sequence(process.pixelLessStepClusters+process.pixelLessStepSeeds+process.pixelLessStepTrackCandidates+process.pixelLessStepTracks+process.pixelLessStepSelector)


process.electronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.gsfElectronCores+process.gsfElectrons)


process.tcMetSequence = cms.Sequence(process.tcMet+process.tcMetWithPFclusters)


process.csclocalreco = cms.Sequence(process.csc2DRecHits+process.cscSegments)


process.hcalLocalRecoSequenceNZS = cms.Sequence(process.hbherecoMB+process.hfrecoMB+process.horecoMB)


process.photonSequence = cms.Sequence(process.photonCore+process.photons)


process.makePatElectrons = cms.Sequence(process.electronMatch+process.patElectrons)


process.particleFlowLinks = cms.Sequence(process.particleFlow)


process.conversionSequence = cms.Sequence(process.conversions)


process.muIsoDeposits_ParamGlobalMuons = cms.Sequence(process.muParamGlobalIsoDepositTk+process.muParamGlobalIsoDepositCalByAssociatorTowers+process.muParamGlobalIsoDepositJets)


process.jptRecoTauProducer = cms.Sequence(process.JPTeidTight+process.TCTauJetPlusTrackZSPCorJetAntiKt5+process.JPTAntiKt5JetTracksAssociatorAtVertex+process.caloRecoTauTagInfoProducer+process.JPTCaloRecoTauProducer)


process.jetPlusTrackZSPCorJetAntiKt5 = cms.Sequence(process.JetPlusTrackCorrectionsAntiKt5)


process.pfClusteringECAL = cms.Sequence(process.particleFlowRecHitECAL+process.particleFlowClusterECAL)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression+process.siStripClusters+process.siStripMatchedRecHits)


process.recoPFMET = cms.Sequence(process.pfMet)


process.recoPFJets = cms.Sequence(process.kt4PFJets+process.kt6PFJets+process.kt6PFJetsCentralChargedPileUp+process.kt6PFJetsCentralNeutral+process.kt6PFJetsCentralNeutralTight+process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets)


process.caloglobalreco = cms.Sequence(process.hcalGlobalRecoSequence)


process.muoncosmicreco2legsHighLevel = cms.Sequence(process.globalCosmicMuons+process.muonsFromCosmics)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr)


process.makePatMuons = cms.Sequence(process.muonMatch+process.patMuons)


process.produceAK5PFMETCorrections = cms.Sequence(process.AK5PFCandsNotInJet+process.AK5PFJetMETcorr+process.AK5PFCandMETcorr+process.pfchsMETcorr+process.AK5PFType1CorMet+process.AK5PFType1p2CorMet)


process.uncleanedOnlyConversionTrackProducers = cms.Sequence(process.uncleanedOnlyGeneralConversionTrackProducer+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyGsfConversionTrackProducer)


process.recoJPTJets = cms.Sequence(process.jetPlusTrackZSPCorJetAntiKt5)


process.produceCaloMETCorrections = cms.Sequence(process.caloJetMETcorr+process.muonCaloMETcorr+process.caloType1CorrectedMet+process.caloType1p2CorrectedMet)


process.muoncosmicreco1legHighLevel = cms.Sequence(process.globalCosmicMuons1Leg+process.muonsFromCosmics1Leg)


process.patPhotonEcalIsolation = cms.Sequence(process.gamIsoDepositEcalFromHits+process.gamIsoFromDepsEcalFromHits)


process.patFixedConePFTauDiscrimination = cms.Sequence()


process.photonIDSequence = cms.Sequence(process.PhotonIDProd)


process.produceAndDiscriminateFixedConePFTaus = cms.Sequence(process.fixedConePFTauProducer+process.fixedConePFTauDiscriminationByLeadingTrackFinding+process.fixedConePFTauDiscriminationByLeadingTrackPtCut+process.fixedConePFTauDiscriminationByLeadingPionPtCut+process.fixedConePFTauDiscriminationByIsolation+process.fixedConePFTauDiscriminationByTrackIsolation+process.fixedConePFTauDiscriminationByECALIsolation+process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationAgainstElectron+process.fixedConePFTauDiscriminationAgainstMuon)


process.ak5JTA = cms.Sequence(process.ak5JetTracksAssociatorAtVertex+process.ak5JetTracksAssociatorAtCaloFace+process.ak5JetExtender)


process.egammareco_woConvPhotons = cms.Sequence(process.electronSequence+process.photonSequence)


process.electronGsfTracking = cms.Sequence(process.electronSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks)


process.recoAllJetsPUOffsetCorr = cms.Sequence(process.sisCone5CaloJetsPUCorr+process.sisCone7CaloJetsPUCorr+process.kt4CaloJetsPUCorr+process.kt6CaloJetsPUCorr+process.kt6CaloJetsCentralPUCorr+process.iterativeCone5CaloJetsPUCorr+process.ak5CaloJetsPUCorr+process.ak7CaloJetsPUCorr+process.gk5CaloJetsPUCorr+process.gk7CaloJetsPUCorr+process.ca4CaloJetsPUCorr+process.ca6CaloJetsPUCorr)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec)


process.gsfElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.gsfElectronCores+process.gsfElectrons)


process.makePatMHTs = cms.Sequence(process.patMHTs)


process.patElectronEcalIsolation = cms.Sequence(process.eleIsoDepositEcalFromHits+process.eleIsoFromDepsEcalFromHitsByCrystal)


process.pfClusteringHCALall = cms.Sequence(process.particleFlowClusterHCAL+process.particleFlowClusterHFHAD+process.particleFlowClusterHFEM)


process.egammaIsolationSequence = cms.Sequence(process.electronEcalRecHitIsolationLcone+process.electronEcalRecHitIsolationScone+process.electronHcalTowerIsolationLcone+process.electronHcalDepth1TowerIsolationLcone+process.electronHcalDepth2TowerIsolationLcone+process.electronHcalTowerIsolationScone+process.electronHcalDepth1TowerIsolationScone+process.electronHcalDepth2TowerIsolationScone+process.electronTrackIsolationLcone+process.electronTrackIsolationScone)


process.conversionTrackMergers = cms.Sequence(process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.generalInOutOutInConversionTrackMerger+process.gsfGeneralInOutOutInConversionTrackMerger)


process.JetPlusTrackCorrections = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetIcone5)


process.conversionTrackProducers = cms.Sequence(process.generalConversionTrackProducer+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.gsfConversionTrackProducer)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalGlobalUncalibRecHit+process.ecalDetIdToBeRecovered+process.ecalRecHit+process.ecalCompactTrigPrim+process.ecalTPSkim+process.ecalPreshowerRecHit)


process.kt4JTA = cms.Sequence(process.kt4JetTracksAssociatorAtVertex+process.kt4JetTracksAssociatorAtCaloFace+process.kt4JetExtender)


process.pfTrackingGlobalReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.correctedMulti5x5SuperClustersWithPreshower+process.multi5x5PreshowerClusterShape+process.uncleanedOnlyMulti5x5SuperClustersWithPreshower+process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower)


process.patElectronHcalIsolation = cms.Sequence(process.eleIsoDepositHcalFromTowers+process.eleIsoFromDepsHcalFromTowers)


process.particleFlowTrack = cms.Sequence(process.pfTrack+process.pfTrackElec)


process.recoAllJets = cms.Sequence(process.sisCone5CaloJets+process.sisCone7CaloJets+process.kt4CaloJets+process.kt6CaloJets+process.kt6CaloJetsCentral+process.iterativeCone5CaloJets+process.ak5CaloJets+process.ak7CaloJets+process.gk5CaloJets+process.gk7CaloJets+process.ca4CaloJets+process.ca6CaloJets)


process.JPTJetsCollectionForTCTaus = cms.Sequence(process.jptRecoTauProducer)


process.sisCone5JTA = cms.Sequence(process.sisCone5JetTracksAssociatorAtVertex+process.sisCone5JetTracksAssociatorAtCaloFace+process.sisCone5JetExtender)


process.cleanPatCandidates = cms.Sequence(process.cleanPatMuons+process.cleanPatElectrons+process.cleanPatPhotons+process.cleanPatTaus+process.cleanPatJets+process.cleanPatCandidateSummary)


process.patElectronIsolation = cms.Sequence(process.patElectronTrackIsolation+process.patElectronEcalIsolation+process.patElectronHcalIsolation)


process.muontracking_with_SET = cms.Sequence(process.SETMuonSeed+process.standAloneSETMuons+process.globalSETMuons)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfPileUpIso+process.pfNoPileUpIso)


process.hfEMClusteringSequence = cms.Sequence(process.hfEMClusters+process.hfRecoEcalCandidate)


process.egammareco = cms.Sequence(process.electronSequence+process.conversionSequence+process.photonSequence)


process.patJetFlavourIdLegacy = cms.Sequence(process.patJetPartonsLegacy+process.patJetPartonAssociationLegacy+process.patJetFlavourAssociationLegacy)


process.produceHPSPFTaus = cms.Sequence(process.hpsSelectionDiscriminator+process.hpsPFTauProducerSansRefs+process.hpsPFTauProducer)


process.GsfGlobalElectronTestSequence = cms.Sequence(process.CkfElectronCandidates+process.GsfGlobalElectronTest)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5BasicClustersCleaned+process.multi5x5SuperClustersCleaned+process.multi5x5BasicClustersUncleaned+process.multi5x5SuperClustersUncleaned+process.multi5x5SuperClusters+process.multi5x5SuperClustersWithPreshower)


process.jetGlobalReco = cms.Sequence(process.recoJets+process.recoJetIds+process.recoTrackJets)


process.muIsolation_ParamGlobalMuonsOld = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsOld)


process.muontracking = cms.Sequence(process.standAloneMuonSeeds+process.standAloneMuons+process.globalMuons+process.refittedStandAloneMuons)


process.muonIdProducerSequence = cms.Sequence(process.glbTrackQual+process.muons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation)


process.ctfTracksNoOverlaps = cms.Sequence(process.ckfTrackCandidatesNoOverlaps+process.ctfNoOverlaps)


process.rstracks = cms.Sequence(process.roadSearchSeeds+process.roadSearchClouds+process.rsTrackCandidates+process.rsWithMaterialTracks)


process.produceAK7PFMETCorrections = cms.Sequence(process.AK7PFCandsNotInJet+process.AK7PFJetMETcorr+process.AK7PFCandMETcorr+process.pfchsMETcorr+process.AK7PFType1CorMet+process.AK7PFType1p2CorMet)


process.JetPlusTrackCorrectionsIcone5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetIcone5)


process.pfClusteringHO = cms.Sequence(process.particleFlowRecHitHO+process.particleFlowClusterHO)


process.conversionTrackSequenceNoEcalSeeded = cms.Sequence(process.generalConversionTrackProducer+process.gsfConversionTrackProducer+process.gsfGeneralConversionTrackMerger)


process.producePFMETCorrections = cms.Sequence(process.pfCandsNotInJet+process.pfJetMETcorr+process.pfCandMETcorr+process.pfchsMETcorr+process.pfType1CorrectedMet+process.pfType1p2CorrectedMet)


process.gsfElectronMergingSequence = cms.Sequence(process.gsfElectronCores+process.gsfElectrons)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters+process.uncleanedHybridSuperClusters+process.hybridSuperClusters+process.correctedHybridSuperClusters+process.uncleanedOnlyCorrectedHybridSuperClusters)


process.recoTauHPSTancSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.hpsTancTauInitialSequence+process.hpsTancTauDiscriminantSequence)


process.doAlldEdXEstimators = cms.Sequence(process.dedxTruncated40+process.dedxHarmonic2+process.dedxDiscrimASmi)


process.muonPFIsolationDepositsSequence = cms.Sequence(process.muPFIsoDepositCharged+process.muPFIsoDepositChargedAll+process.muPFIsoDepositGamma+process.muPFIsoDepositNeutral+process.muPFIsoDepositPU)


process.electronPFIsolationDepositsSequence = cms.Sequence(process.elPFIsoDepositCharged+process.elPFIsoDepositChargedAll+process.elPFIsoDepositGamma+process.elPFIsoDepositNeutral+process.elPFIsoDepositPU)


process.doAlldEdXDiscriminators = cms.Sequence(process.dedxDiscrimProd+process.dedxDiscrimBTag+process.dedxDiscrimSmi+process.dedxDiscrimASmi)


process.uncleanedOnlyConversions = cms.Sequence(process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyConversionTrackProducers+process.uncleanedOnlyConversionTrackMergers+process.uncleanedOnlyAllConversions)


process.muIsolation_ParamGlobalMuons = cms.Sequence(process.muIsoDeposits_ParamGlobalMuons)


process.muonreco = cms.Sequence(process.muontracking+process.muonIdProducerSequence)


process.egammarecoFull = cms.Sequence(process.egammareco+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence)


process.recoTauClassicShrinkingConeMVASequence = cms.Sequence(process.produceShrinkingConeDiscriminationByTauNeuralClassifier)


process.muoncosmichighlevelreco = cms.Sequence(process.muoncosmicreco2legsHighLevel+process.muoncosmicreco1legHighLevel+process.cosmicsMuonIdSequence)


process.iterTracking = cms.Sequence(process.InitialStep+process.LowPtTripletStep+process.PixelPairStep+process.DetachedTripletStep+process.MixedTripletStep+process.PixelLessStep+process.TobTecStep+process.generalTracks+process.ConvStep+process.conversionStepTracks)


process.patPFCandidateIsoDepositSelection = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfSortByTypeSequence)


process.egammarecoFull_woHFElectrons = cms.Sequence(process.egammareco+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence)


process.egammarecoWithID = cms.Sequence(process.egammareco+process.photonIDSequence+process.eIdSequence)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco+process.striptrackerlocalreco+process.clusterSummaryProducer)


process.pfClusteringHCAL = cms.Sequence(process.particleFlowRecHitHCAL+process.pfClusteringHCALall)


process.patPhotonIsolation = cms.Sequence(process.patPhotonTrackIsolation+process.patPhotonEcalIsolation+process.patPhotonHcalIsolation)


process.egammareco_withPhotonID = cms.Sequence(process.egammareco+process.photonIDSequence)


process.reducedRecHits = cms.Sequence(process.reducedEcalRecHitsSequence+process.reducedHcalRecHitsSequence)


process.muontracking_with_TeVRefinement = cms.Sequence(process.muontracking+process.tevMuons)


process.egammaHighLevelRecoPostPF = cms.Sequence(process.gsfElectronMergingSequence+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence)


process.conversionTrackSequence = cms.Sequence(process.ckfTracksFromConversions+process.conversionTrackProducers+process.conversionTrackMergers)


process.updateHPSPFTaus = cms.Sequence(process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByMVAIsolationSeq+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation+process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVAElectronRejection+process.hpsPFTauDiscriminationByMVA2rawElectronRejection+process.hpsPFTauDiscriminationByMVA2LooseElectronRejection+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA2MediumElectronRejection+process.hpsPFTauDiscriminationByMVA2TightElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3+process.hpsPFTauDiscriminationByMVA3rawElectronRejection+process.hpsPFTauDiscriminationByMVA3LooseElectronRejection+process.hpsPFTauDiscriminationByMVA3VTightElectronRejection+process.hpsPFTauDiscriminationByMVA3MediumElectronRejection+process.hpsPFTauDiscriminationByMVA3TightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection)


process.muonPFIsolationSequence = cms.Sequence(process.muonPFIsolationDepositsSequence+process.muPFIsoValueCharged03+process.muPFIsoValueChargedAll03+process.muPFIsoValueGamma03+process.muPFIsoValueNeutral03+process.muPFIsoValueGammaHighThreshold03+process.muPFIsoValueNeutralHighThreshold03+process.muPFIsoValuePU03+process.muPFIsoValueCharged04+process.muPFIsoValueChargedAll04+process.muPFIsoValueGamma04+process.muPFIsoValueNeutral04+process.muPFIsoValueGammaHighThreshold04+process.muPFIsoValueNeutralHighThreshold04+process.muPFIsoValuePU04)


process.recoJetAssociations = cms.Sequence(process.ic5JetTracksAssociatorAtVertex+process.iterativeCone5JTA+process.kt4JTA+process.ak5JTA+process.ak7JTA)


process.ckftracks = cms.Sequence(process.iterTracking+process.electronSeedsSeq+process.doAlldEdXEstimators)


process.produceAndDiscriminateHPSPFTaus = cms.Sequence(process.produceHPSPFTaus+process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByMVAIsolationSeq+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVAElectronRejection+process.hpsPFTauDiscriminationByMVA2rawElectronRejection+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA2LooseElectronRejection+process.hpsPFTauDiscriminationByMVA2MediumElectronRejection+process.hpsPFTauDiscriminationByMVA2TightElectronRejection+process.hpsPFTauDiscriminationByMVA3rawElectronRejection+process.hpsPFTauDiscriminationByMVA3LooseElectronRejection+process.hpsPFTauDiscriminationByMVA3MediumElectronRejection+process.hpsPFTauDiscriminationByMVA3TightElectronRejection+process.hpsPFTauDiscriminationByMVA3VTightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.ckftracks_wodEdX = cms.Sequence(process.iterTracking+process.electronSeedsSeq)


process.trackingGlobalReco = cms.Sequence(process.ckftracks+process.trackExtrapolator)


process.recoTauClassicShrinkingConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateShrinkingConePFTaus)


process.calolocalreco = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence)


process.calolocalrecoNZS = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence+process.hcalLocalRecoSequenceNZS)


process.metreco = cms.Sequence(process.met+process.metNoHF+process.metHO+process.metNoHFHO+process.calotoweroptmaker+process.metOpt+process.metOptNoHF+process.calotoweroptmakerWithHO+process.metOptHO+process.metOptNoHFHO+process.htMetKT4+process.htMetKT6+process.htMetIC5+process.htMetAK5+process.htMetAK7+process.muonMETValueMapProducer+process.corMetGlobalMuons+process.muonTCMETValueMapProducer+process.tcMetSequence+process.BeamHaloId)


process.pfParticleSelectionSequence = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfSortByTypeSequence)


process.particleFlowCluster = cms.Sequence(process.towerMakerPF+process.pfClusteringECAL+process.pfClusteringHCAL+process.pfClusteringHO+process.pfClusteringPS)


process.muonlocalreco_with_2DSegments = cms.Sequence(process.dtlocalreco_with_2DSegments+process.csclocalreco+process.rpcRecHits)


process.ecalClusters = cms.Sequence(process.hybridClusteringSequence+process.multi5x5ClusteringSequence+process.multi5x5PreshowerClusteringSequence)


process.egammareco_withIsolation_woConvPhotons = cms.Sequence(process.egammareco_woConvPhotons+process.egammaIsolationSequence)


process.patJetMETCorrections = cms.Sequence(process.patJetCorrections)


process.jetPlusTrackZSPCorJetSiscone5 = cms.Sequence(process.JetPlusTrackCorrectionsSisCone5)


process.tautagging = cms.Sequence(process.JPTJetsCollectionForTCTaus+process.TCTau)


process.jetPlusTrackZSPCorJetIcone5 = cms.Sequence(process.JetPlusTrackCorrectionsIcone5)


process.pfBasedElectronPhotonIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.pfSelectedElectrons+process.electronPFIsolationDepositsSequence+process.elPFIsoValueCharged03PFId+process.elPFIsoValueChargedAll03PFId+process.elPFIsoValueGamma03PFId+process.elPFIsoValueNeutral03PFId+process.elPFIsoValuePU03PFId+process.elPFIsoValueCharged04PFId+process.elPFIsoValueChargedAll04PFId+process.elPFIsoValueGamma04PFId+process.elPFIsoValueNeutral04PFId+process.elPFIsoValuePU04PFId+process.elPFIsoValueCharged03NoPFId+process.elPFIsoValueChargedAll03NoPFId+process.elPFIsoValueGamma03NoPFId+process.elPFIsoValueNeutral03NoPFId+process.elPFIsoValuePU03NoPFId+process.elPFIsoValueCharged04NoPFId+process.elPFIsoValueChargedAll04NoPFId+process.elPFIsoValueGamma04NoPFId+process.elPFIsoValueNeutral04NoPFId+process.elPFIsoValuePU04NoPFId+process.pfSelectedPhotons+process.photonPFIsolationDepositsSequence+process.phPFIsoValueCharged03PFId+process.phPFIsoValueChargedAll03PFId+process.phPFIsoValueGamma03PFId+process.phPFIsoValueNeutral03PFId+process.phPFIsoValuePU03PFId+process.phPFIsoValueCharged04PFId+process.phPFIsoValueChargedAll04PFId+process.phPFIsoValueGamma04PFId+process.phPFIsoValueNeutral04PFId+process.phPFIsoValuePU04PFId)


process.egammareco_withElectronID = cms.Sequence(process.egammareco+process.eIdSequence)


process.uncleanedOnlyElectronSequence = cms.Sequence(process.uncleanedOnlyTracking+process.uncleanedOnlyConversions+process.uncleanedOnlyPfTracking+process.uncleanedOnlyElectrons)


process.makePatJets = cms.Sequence(process.patJetCorrections+process.patJetCharge+process.patJetPartonMatch+process.patJetGenJetMatch+process.patJetFlavourIdLegacy+process.patJetFlavourId+process.patJets)


process.ckftracks_plus_pixelless = cms.Sequence(process.ckftracks+process.ctfTracksPixelLess)


process.pfPhotonTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfPhotonTranslator+process.pfPhotonInterestingEcalDetIdEB+process.pfPhotonInterestingEcalDetIdEE)


process.recoTauClassicFixedConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateFixedConePFTaus)


process.muoncosmicreco = cms.Sequence(process.muoncosmicreco2legsSTA+process.muoncosmicreco1legSTA)


process.egammaHighLevelRecoPrePF = cms.Sequence(process.gsfEcalDrivenElectronSequence+process.uncleanedOnlyElectronSequence+process.conversionSequence+process.photonSequence)


process.particleFlowClusterWithoutHO = cms.Sequence(process.towerMakerPF+process.pfClusteringECAL+process.pfClusteringHCAL+process.pfClusteringPS)


process.egammareco_withIsolation = cms.Sequence(process.egammareco+process.egammaIsolationSequence)


process.muonreco_with_SET = cms.Sequence(process.muontracking_with_SET)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.patMETCorrections = cms.Sequence(process.produceCaloMETCorrections+process.producePFMETCorrections)


process.muonrecowith_TeVRefinemen = cms.Sequence(process.muontracking_with_TeVRefinement+process.muonIdProducerSequence)


process.muonreco_plus_isolation_plus_SET = cms.Sequence(process.muonrecowith_TeVRefinemen+process.muonreco_with_SET+process.muIsolation)


process.muonreco_plus_isolation_plus_SET_plus_muIDmaps = cms.Sequence(process.muonreco_plus_isolation_plus_SET+process.muonSelectionTypeSequence)


process.pfElectronTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfElectronTranslator+process.pfElectronInterestingEcalDetIdEB+process.pfElectronInterestingEcalDetIdEE)


process.ckftracks_woBH = cms.Sequence(process.iterTracking+process.electronSeedsSeq+process.doAlldEdXEstimators)


process.jetHighLevelReco = cms.Sequence(process.recoJetAssociations+process.recoPFJets+process.recoJPTJets)


process.muonrecoComplete = cms.Sequence(process.muonreco_plus_isolation_plus_SET+process.muonSelectionTypeSequence)


process.metrecoPlusHCALNoise = cms.Sequence(process.metreco+process.hcalnoise)


process.muonshighlevelreco = cms.Sequence(process.muonPFIsolationSequence+process.muons)


process.muonreco_plus_isolation = cms.Sequence(process.muonrecowith_TeVRefinemen+process.muIsolation)


process.egammaGlobalReco = cms.Sequence(process.electronGsfTracking+process.conversionTrackSequence+process.allConversionSequence)


process.recoTauClassicHPSSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.produceAndDiscriminateHPSPFTaus)


process.patHPSPFTauDiscriminationUpdate = cms.Sequence(process.updateHPSPFTaus)


process.localreco_HcalNZS = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.calolocalrecoNZS+process.castorreco)


process.localreco = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.calolocalreco+process.castorreco)


process.muonrecoComplete_minus_SET_minus_muIDmaps = cms.Sequence(process.muonrecowith_TeVRefinemen+process.muIsolation)


process.makePatMETs = cms.Sequence(process.patMETCorrections+process.patMETs)


process.muonrecoComplete_minus_muIDmaps = cms.Sequence(process.muonreco_plus_isolation_plus_SET)


process.particleFlowReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex+process.pfGsfElectronMVASelectionSequence+process.particleFlowBlock+process.particleFlowTmp+process.pfElectronTranslatorSequence+process.pfPhotonTranslatorSequence+process.pfParticleSelectionSequence)


process.patDefaultSequence = cms.Sequence(process.patElectrons+process.patMuons+process.patHPSPFTauDiscriminationUpdate+process.patPFCandidateIsoDepositSelection+process.patPFTauIsolation+process.patTaus+process.patPhotons+process.patJetCorrFactors+process.patJetCorrFactorsAK7PFCorr+process.patJetCorrFactorsAK5PFCorr+process.jetTracksAssociatorAtVertexAK5PFCorr+process.jetTracksAssociatorAtVertexAK7PFCorr+process.patJetCharge+process.patJetChargeAK7PFCorr+process.patJetChargeAK5PFCorr+process.patJets+process.patJetsAK7PFCorr+process.patJetsAK5PFCorr+process.patMETCorrections+process.patMETs+process.patMETsPF+process.patCandidateSummary+process.selectedPatElectrons+process.selectedPatMuons+process.selectedPatTaus+process.selectedPatPhotons+process.selectedPatJets+process.selectedPatJetsAK7PFCorr+process.selectedPatJetsAK5PFCorr+process.selectedPatCandidateSummary+process.cleanPatMuons+process.cleanPatElectrons+process.cleanPatPhotons+process.cleanPatTaus+process.cleanPatJets+process.cleanPatJetsAK7PFCorr+process.cleanPatJetsAK5PFCorr+process.cleanPatCandidateSummary+process.countPatCandidates)


process.makePatTaus = cms.Sequence(process.patHPSPFTauDiscriminationUpdate+process.patPFCandidateIsoDepositSelection+process.patPFTauIsolation+process.tauMatch+process.tauGenJets+process.tauGenJetsSelectorAllHadrons+process.tauGenJetMatch+process.patTaus)


process.globalreco = cms.Sequence(process.offlineBeamSpot+process.recopixelvertexing+process.trackingGlobalReco+process.hcalGlobalRecoSequence+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonrecoComplete+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco)


process.patCandidates = cms.Sequence(process.makePatElectrons+process.makePatMuons+process.makePatTaus+process.makePatPhotons+process.makePatJets+process.makePatMETs+process.patCandidateSummary)


process.globalreco_plusPL = cms.Sequence(process.globalreco+process.ctfTracksPixelLess)


process.globalreco_plusRS = cms.Sequence(process.globalreco+process.rstracks)


process.PFTau = cms.Sequence(process.recoTauCommonSequence+process.recoTauClassicHPSSequence)


process.reconstruction_noTracking = cms.Sequence(process.clusterSummaryProducer+process.muonlocalreco+process.calolocalreco+process.castorreco+process.offlineBeamSpot+process.pixelVertices+process.trackExtrapolator+process.hcalGlobalRecoSequence+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.ckfTracksFromConversions+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.jetGlobalReco+process.muonrecoComplete+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.ecalDrivenGsfElectronCores+process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyPfConversions+process.conversionSequence+process.photonSequence+process.particleFlowReco+process.gsfElectronCores+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metrecoPlusHCALNoise+process.btagging+process.recoPFMET+process.PFTau+process.reducedRecHits+process.logErrorHarvester)


process.highlevelreco = cms.Sequence(process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metrecoPlusHCALNoise+process.btagging+process.recoPFMET+process.PFTau+process.reducedRecHits)


process.reconstruction_standard_candle = cms.Sequence(process.localreco+process.globalreco+process.vertexreco+process.recoJetAssociations+process.btagging+process.electronSequence+process.photonSequence)


process.reconstruction_fromRECO_noTrackingTest = cms.Sequence(process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.pixelVertices+process.trackExtrapolator+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonrecoComplete+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.logErrorHarvester)


process.reconstruction_withRS = cms.Sequence(process.localreco+process.globalreco_plusRS+process.highlevelreco+process.logErrorHarvester)


process.reconstruction_fromRECO = cms.Sequence(process.siPixelRecHits+process.siStripMatchedRecHits+process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.recopixelvertexing+process.trackingGlobalReco+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonrecoComplete+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.logErrorHarvester)


process.reconstruction_withPixellessTk = cms.Sequence(process.localreco+process.globalreco_plusPL+process.highlevelreco+process.logErrorHarvester)


process.reconstruction_woCosmicMuons = cms.Sequence(process.localreco+process.globalreco+process.highlevelreco+process.logErrorHarvester)


process.reconstruction = cms.Sequence(process.localreco+process.globalreco+process.highlevelreco+process.logErrorHarvester)


process.reconstruction_fromRECO_noTracking = cms.Sequence(process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.pixelVertices+process.trackExtrapolator+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.ckfTracksFromConversions+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.jetGlobalReco+process.muonrecoComplete+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.ecalDrivenGsfElectronCores+process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyPfConversions+process.conversionSequence+process.photonSequence+process.particleFlowReco+process.gsfElectronCores+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.logErrorHarvester)


process.reconstruction_HcalNZS = cms.Sequence(process.localreco_HcalNZS+process.globalreco+process.highlevelreco+process.logErrorHarvester)


process.p = cms.Path(process.goodOfflinePrimaryVertices+process.hltFilter+process.trackingFailureFilter+process.patDefaultSequence+process.ak5ak7)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore",
    verboseQT = cms.untracked.int32(0),
    referenceFileName = cms.untracked.string(''),
    verbose = cms.untracked.int32(0),
    collateHistograms = cms.untracked.bool(False)
)


process.MessageLogger = cms.Service("MessageLogger",
    suppressInfo = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    suppressDebug = cms.untracked.vstring(),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    cerr_stats = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        output = cms.untracked.string('cerr'),
        optionalPSet = cms.untracked.bool(True)
    ),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    cerr = cms.untracked.PSet(
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        noTimeStamps = cms.untracked.bool(False),
        FwkReport = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(20),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        threshold = cms.untracked.string('INFO'),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        FwkSummary = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    FrameworkJobReport = cms.untracked.PSet(
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        )
    ),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    debugModules = cms.untracked.vstring(),
    infos = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        placeholder = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport')
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    horeco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    paramMuons = cms.PSet(
        initialSeed = cms.untracked.uint32(54525),
        engineName = cms.untracked.string('TRandom3')
    ),
    saveFileName = cms.untracked.string(''),
    hbhereco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    externalLHEProducer = cms.PSet(
        initialSeed = cms.untracked.uint32(234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    AftBurner = cms.PSet(
        initialSeed = cms.untracked.uint32(7410904),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    famosPileUp = cms.PSet(
        initialSeed = cms.untracked.uint32(918273),
        engineName = cms.untracked.string('TRandom3')
    ),
    simMuonDTDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    siTrackerGaussianSmearingRecHits = cms.PSet(
        initialSeed = cms.untracked.uint32(24680),
        engineName = cms.untracked.string('TRandom3')
    ),
    ecalPreshowerRecHit = cms.PSet(
        initialSeed = cms.untracked.uint32(6541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    generator = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonRPCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignal = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simCastorDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(12345678),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    mix = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    VtxSmeared = cms.PSet(
        initialSeed = cms.untracked.uint32(98765432),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    LHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(87654321),
        engineName = cms.untracked.string('TRandom3')
    ),
    ecalRecHit = cms.PSet(
        initialSeed = cms.untracked.uint32(654321),
        engineName = cms.untracked.string('TRandom3')
    ),
    hfreco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    simSiStripDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simEcalUnsuppressedDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignalG4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    famosSimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(13579),
        engineName = cms.untracked.string('TRandom3')
    ),
    MuonSimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(987346),
        engineName = cms.untracked.string('TRandom3')
    ),
    g4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignalLHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(88776655),
        engineName = cms.untracked.string('TRandom3')
    ),
    mixGenPU = cms.PSet(
        initialSeed = cms.untracked.uint32(918273),
        engineName = cms.untracked.string('TRandom3')
    ),
    l1ParamMuons = cms.PSet(
        initialSeed = cms.untracked.uint32(6453209),
        engineName = cms.untracked.string('TRandom3')
    ),
    simBeamSpotFilter = cms.PSet(
        initialSeed = cms.untracked.uint32(87654321),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simHcalUnsuppressedDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(11223344),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonCSCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(11223344),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    mixData = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simSiPixelDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    )
)


process.TFileService = cms.Service("TFileService",
    fileName = cms.string('OpenDataTree_data.root')
)


process.UpdaterService = cms.Service("UpdaterService")


process.AK5PFCombinedCorrector = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('AK5PFL1FastJet', 
        'AK5PFL2Relative', 
        'AK5PFL3Absolute', 
        'AK5PFL2L3Residual')
)


process.AK5PFL1FastJet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJetsAK5PFCorr","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.AK5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.AK5PFL2L3Residual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.AK5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2Relative')
)


process.AK5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L3Absolute')
)


process.AK7PFCombinedCorrector = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('AK7PFL1FastJet', 
        'AK7PFL2Relative', 
        'AK7PFL3Absolute', 
        'AK7PFL2L3Residual')
)


process.AK7PFL1FastJet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJetsAK7PFCorr","rho"),
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1FastJet')
)


process.AK7PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1Offset')
)


process.AK7PFL2L3Residual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2L3Residual')
)


process.AK7PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2Relative')
)


process.AK7PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L3Absolute')
)


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    PropagationDirection = cms.string('anyDirection')
)


process.BeamHaloMPropagatorAlong = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('BeamHaloMPropagatorAlong'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(10000),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloMPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('BeamHaloMPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(10000),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloPropagatorAlong = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAlong'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong')
)


process.BeamHaloPropagatorAny = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAny'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAny'),
    PropagationDirection = cms.string('anyDirection'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong')
)


process.BeamHaloPropagatorOpposite = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorOpposite'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorOpposite')
)


process.BeamHaloSHPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAlong'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.BeamHaloSHPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAny'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.BeamHaloSHPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorOpposite'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string(''),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string(''),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(True)
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz')
)


process.CaloTowerHardcodeGeometryEP = cms.ESProducer("CaloTowerHardcodeGeometryEP")


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorHardcodeGeometryEP = cms.ESProducer("CastorHardcodeGeometryEP")


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuRefit')
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader')
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForRefit')
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2')
)


process.Chi2MeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2ForInOut')
)


process.Chi2MeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(500.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2ForOutIn')
)


process.CkfElectronTrajectoryBuilder = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('fwdElectronPropagator'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfElectronTrajectoryBuilder'),
    propagatorOpposite = cms.string('bwdElectronPropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('electronChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CkfTrajectoryBuilder = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('Chi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CkfTrajectoryBuilderBeamHalo = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('BeamHaloPropagatorAlong'),
    trajectoryFilterName = cms.string('ckfTrajectoryFilterBeamHaloMuon'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfTrajectoryBuilderBH'),
    propagatorOpposite = cms.string('BeamHaloPropagatorOpposite'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('Chi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    MaxComponents = cms.int32(12),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D')
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    MaxComponents = cms.int32(4),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D')
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter')
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryEP = cms.ESProducer("EcalBarrelGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryEP = cms.ESProducer("EcalEndcapGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryEP = cms.ESProducer("EcalPreshowerGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(2000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('ElectronChi2')
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator'),
    Mass = cms.double(0.000511),
    BetheHeitlerCorrection = cms.int32(2)
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator'),
    Mass = cms.double(0.000511),
    BetheHeitlerCorrection = cms.int32(2)
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(1000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2STA')
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(4),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    looperFitter = cms.string('LooperFittingSmoother')
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GroupedCkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GroupedCkfTrajectoryBuilderP5 = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilterP5'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilderP5'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('GsfTrajectoryFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('GsfTrajectorySmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    Merger = cms.string('CloseComponentsMerger5D'),
    ComponentName = cms.string('GsfTrajectoryFitter'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator')
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ErrorRescaling = cms.double(100.0),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Merger = cms.string('CloseComponentsMerger5D'),
    ComponentName = cms.string('GsfTrajectorySmoother'),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ErrorRescaling = cms.double(100.0),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId')
)


process.HcalHardcodeGeometryEP = cms.ESProducer("HcalHardcodeGeometryEP")


process.HcalTopologyIdealEP = cms.ESProducer("HcalTopologyIdealEP")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterSTA'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmootherSTA'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherBeamHalo = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterBH'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmootherBH'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherBH'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherForInOut = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterForInOut'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('KFSmootherForInOut'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherForInOut'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterBeamHalo = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterBH'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForInOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('alongMomElePropagator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForOutIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForOutIn'),
    Estimator = cms.string('Chi2ForOutIn'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('alongMomElePropagator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherBeamHalo = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherBH'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherForInOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('oppositeToMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('LooperFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('LooperSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    PixelCPE = cms.string('PixelCPEGeneric'),
    stripLazyGetterProducer = cms.string(''),
    OnDemand = cms.bool(False),
    Regional = cms.bool(False),
    UsePixelModuleQualityDB = cms.bool(True),
    pixelClusterProducer = cms.string('siPixelClusters'),
    switchOffPixelsIfEmpty = cms.bool(True),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    MaskBadAPVFibers = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    UseStripAPVFiberQualityDB = cms.bool(True),
    stripClusterProducer = cms.string('siStripClusters'),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    SiStripQualityLabel = cms.string(''),
    badStripCuts = cms.PSet(
        TOB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TID = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TEC = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TIB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        )
    ),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    skipClusters = cms.InputTag(""),
    UseStripModuleQualityDB = cms.bool(True)
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.ParametrizedMagneticFieldProducer = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_8T')
    ),
    label = cms.untracked.string('parametrizedField')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    EdgeClusterErrorX = cms.double(50.0),
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    TruncatePixelCharge = cms.bool(True),
    size_cutY = cms.double(3.0),
    size_cutX = cms.double(3.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    IrradiationBiasCorrection = cms.bool(False),
    TanLorentzAnglePerTesla = cms.double(0.106),
    inflate_errors = cms.bool(False),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_highY = cms.double(1.0),
    ClusterProbComputationFlag = cms.int32(0),
    EdgeClusterErrorY = cms.double(85.0),
    ComponentName = cms.string('PixelCPEGeneric'),
    eff_charge_cut_lowY = cms.double(0.0),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    Alpha2Order = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    useOldAnalPropLogic = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    ptMin = cms.double(-1),
    MaxDPhi = cms.double(4.0),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    useOldAnalPropLogic = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    ptMin = cms.double(-1),
    MaxDPhi = cms.double(4.0),
    useRungeKutta = cms.bool(False)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    useDDD = cms.untracked.bool(True),
    compatibiltyWith11 = cms.untracked.bool(True)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0)
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagator')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAny')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRK')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorRK')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorRKOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE')
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle')
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    ComponentName = cms.string('WithAngleAndTemplate')
)


process.TrackerDigiGeometryESModule = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.TrackerGeometricDetESModule = cms.ESProducer("TrackerGeometricDetESModule",
    fromDDD = cms.bool(True)
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TrajectoryBuilderForConversions = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('alongMomElePropagator'),
    trajectoryFilterName = cms.string('TrajectoryFilterForConversions'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('TrajectoryBuilderForConversions'),
    propagatorOpposite = cms.string('oppositeToMomElePropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('eleLooseChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.TrajectoryBuilderForElectrons = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    trajectoryFilterName = cms.string('TrajectoryFilterForElectrons'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('TrajectoryBuilderForElectrons'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('ElectronChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0)
)


process.TrajectoryCleanerBySharedHitsForConversions = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHitsForConversions'),
    fractionShared = cms.double(0.5),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.TrajectoryFilterForConversions = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minimumNumberOfHits = cms.int32(3),
        minHitsMinPt = cms.int32(-1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(-1),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minPt = cms.double(0.9)
    ),
    ComponentName = cms.string('TrajectoryFilterForConversions')
)


process.TrajectoryFilterForElectrons = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minimumNumberOfHits = cms.int32(5),
        minHitsMinPt = cms.int32(-1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(-1),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minPt = cms.double(2.0)
    ),
    ComponentName = cms.string('TrajectoryFilterForElectrons')
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991),
    overrideMasterSector = cms.bool(False),
    useParametrizedTrackerField = cms.bool(True),
    label = cms.untracked.string(''),
    version = cms.string('grid_1103l_090322_3_8t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('parametrizedField'),
    geometryVersion = cms.int32(90322),
    cacheLastVolume = cms.untracked.bool(True)
)


process.ZdcHardcodeGeometryEP = cms.ESProducer("ZdcHardcodeGeometryEP")


process.ak5CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloL6SLB')
)


process.ak5CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak5CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Offset', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Offset', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.ak5CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloL6SLB')
)


process.ak5CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak5CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak5CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak5CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak5CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak5CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak5JPTL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5JPTL1Fastjet', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5JPTL1Fastjet', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak5JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1Offset')
)


process.ak5JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2Relative')
)


process.ak5JPTL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L3Absolute')
)


process.ak5JPTResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2L3Residual')
)


process.ak5L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    offsetService = cms.string('ak5CaloL1Offset'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset')
)


process.ak5PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFL6SLB')
)


process.ak5PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.ak5PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Offset', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Offset', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.ak5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFL6SLB')
)


process.ak5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2Relative')
)


process.ak5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L3Absolute')
)


process.ak5PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak5PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak5PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.ak5TrackL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5TrackL2Relative', 
        'ak5TrackL3Absolute')
)


process.ak5TrackL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5TrackL2Relative', 
        'ak5TrackL3Absolute')
)


process.ak5TrackL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L2Relative')
)


process.ak5TrackL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L3Absolute')
)


process.ak7CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L1FastJet')
)


process.ak7CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L1Offset')
)


process.ak7CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L2Relative')
)


process.ak7CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L3Absolute')
)


process.ak7CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak7CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak7CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L2L3Residual')
)


process.ak7JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Fastjet', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK7JPT'),
    level = cms.string('L1FastJet')
)


process.ak7JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK7JPT'),
    level = cms.string('L1Offset')
)


process.ak7JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    offsetService = cms.string('ak5CaloL1Offset'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset')
)


process.ak7PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1FastJet')
)


process.ak7PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1Offset')
)


process.ak7PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2Relative')
)


process.ak7PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L3Absolute')
)


process.ak7PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak7PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak7PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2L3Residual')
)


process.alongMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('alongMomElePropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool')
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.bwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('bwdElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.bwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('bwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.chi2CutForConversionTrajectoryBuilder = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('eleLooseChi2')
)


process.ckfBaseInOutTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseInOutTrajectoryFilter')
)


process.ckfBaseTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilter')
)


process.ckfBaseTrajectoryFilterP5 = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.5),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(4),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilterP5')
)


process.ckfTrajectoryFilterBeamHaloMuon = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(3),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(2),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(4)
    ),
    ComponentName = cms.string('ckfTrajectoryFilterBeamHaloMuon')
)


process.combinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('jetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertex')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFElectron')
        ))
)


process.combinedSecondaryVertex = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexMVA = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexNegative = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(True)
)


process.combinedSecondaryVertexPositive = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)


process.combinedSecondaryVertexSoftLepton = cms.ESProducer("CombinedSecondaryVertexSoftLeptonESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(2),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRecoVertexNoSoftLepton', 
        'CombinedSVPseudoVertexNoSoftLepton', 
        'CombinedSVNoVertexNoSoftLepton', 
        'CombinedSVRecoVertexSoftMuon', 
        'CombinedSVPseudoVertexSoftMuon', 
        'CombinedSVNoVertexSoftMuon', 
        'CombinedSVRecoVertexSoftElectron', 
        'CombinedSVPseudoVertexSoftElectron', 
        'CombinedSVNoVertexSoftElectron'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexLeptonCategory')
)


process.combinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('jetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFElectron')
        ))
)


process.combinedSecondaryVertexV1 = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexV1Negative = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(True)
)


process.combinedSecondaryVertexV1Positive = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)


process.combinedSecondaryVertexV2 = cms.ESProducer("CombinedSecondaryVertexESProducerV2",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(2),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexV2Negative = cms.ESProducer("CombinedSecondaryVertexESProducerV2",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(2),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(True)
)


process.combinedSecondaryVertexV2Positive = cms.ESProducer("CombinedSecondaryVertexESProducerV2",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(2),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('any'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)


process.compositeTrajectoryFilterESProducer = cms.ESProducer("CompositeTrajectoryFilterESProducer",
    filterNames = cms.vstring(),
    ComponentName = cms.string('compositeTrajectoryFilter')
)


process.convCkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('convCkfTrajectoryFilter'),
    maxCand = cms.int32(2),
    ComponentName = cms.string('convCkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    clustersToSkip = cms.InputTag("convClusters"),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(3),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.convCkfTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('convCkfTrajectoryFilter')
)


process.convLayerPairs = cms.ESProducer("SeedingLayersESProducer",
    TOB5 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TIB1 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB6 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB3 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID3 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    TOB2 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    ComponentName = cms.string('convLayerPairs'),
    TEC = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(7),
        minRing = cms.int32(1)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'BPix3+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB2+TID2_pos', 
        'TIB2+TID2_neg', 
        'TIB2+TIB3', 
        'TIB2+TIB4', 
        'TIB3+TIB4', 
        'TIB3+TOB1', 
        'TIB3+TID1_pos', 
        'TIB3+TID1_neg', 
        'TIB4+TOB1', 
        'TIB4+TOB2', 
        'TOB1+TOB2', 
        'TOB1+TOB3', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TOB2+TOB3', 
        'TOB2+TOB4', 
        'TOB2+TEC1_pos', 
        'TOB2+TEC1_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC1_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg'),
    TID2 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("convClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    TIB2 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TIB4 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID1 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("convClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    TIB3 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    )
)


process.convStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('convStepRKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('convStepFitterSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.convStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('convStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    noPXB = cms.bool(False),
    noTID = cms.bool(False),
    noPXF = cms.bool(False),
    noTIB = cms.bool(False),
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noTEC = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.detachedTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('detachedTripletStepChi2Est')
)


process.detachedTripletStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    ComponentName = cms.string('detachedTripletStepSeedLayers')
)


process.detachedTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('detachedTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("detachedTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('detachedTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('detachedTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.detachedTripletStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.075),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(0.701),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('detachedTripletStepTrajectoryFilter')
)


process.doubleVertex2Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    minVertices = cms.uint32(2),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalNextToDeadChannelESProducer = cms.ESProducer("EcalNextToDeadChannelESProducer",
    channelStatusThresholdForDead = cms.int32(12)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kRecovered = cms.vuint32(),
        kGood = cms.vuint32(0),
        kTime = cms.vuint32(),
        kWeird = cms.vuint32(),
        kBad = cms.vuint32(11, 12, 13, 14, 15, 
            16),
        kProblematic = cms.vuint32(1, 2, 3, 4, 5, 
            6, 7, 8, 9, 10)
    ),
    timeThresh = cms.double(2.0),
    flagMask = cms.PSet(
        kRecovered = cms.vstring('kLeadingEdgeRecovered', 
            'kTowerRecovered'),
        kGood = cms.vstring('kGood'),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring('kWeird', 
            'kDiWeird'),
        kBad = cms.vstring('kFaultyHardware', 
            'kDead', 
            'kKilled'),
        kProblematic = cms.vstring('kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated')
    )
)


process.electronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('electronChi2')
)


process.electronTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('electronTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.19),
    ValidHitBonus = cms.double(1000.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    allowSharedFirstHit = cms.bool(True)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('fwdElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.ghostTrack = cms.ESProducer("GhostTrackESProducer",
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        RecHitFlags = cms.vstring(''),
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0)
    ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(5)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETriangleNoise', 
                'HBHETS4TS5Noise'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HFLongShort', 
                'HFPET', 
                'HFS8S1Ratio'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20)
        )),
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    file = cms.untracked.string(''),
    dump = cms.untracked.vstring('')
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.ic5CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L1FastJet')
)


process.ic5CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L1Offset')
)


process.ic5CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L2Relative')
)


process.ic5CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L3Absolute')
)


process.ic5CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ic5CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ic5CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L2L3Residual')
)


process.ic5PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('IC5PF'),
    level = cms.string('L1FastJet')
)


process.ic5PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('IC5PF'),
    level = cms.string('L1Offset')
)


process.ic5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L2Relative')
)


process.ic5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L3Absolute')
)


process.ic5PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ic5PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ic5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L2L3Residual')
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string('fakeForIdeal'),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(False)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('ImpactParameterMVA')
)


process.initialStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('initialStepChi2Est')
)


process.initialStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('initialStepTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('initialStepTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    maxPtForLooperReconstruction = cms.double(0.7),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.initialStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.2),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('initialStepTrajectoryFilter')
)


process.jetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.jetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.kt4CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L1FastJet')
)


process.kt4CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L1Offset')
)


process.kt4CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L2Relative')
)


process.kt4CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L3Absolute')
)


process.kt4CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt4CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L2L3Residual')
)


process.kt4PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('KT4PF'),
    level = cms.string('L1FastJet')
)


process.kt4PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('KT4PF'),
    level = cms.string('L1Offset')
)


process.kt4PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L2Relative')
)


process.kt4PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L3Absolute')
)


process.kt4PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt4PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L2L3Residual')
)


process.kt6CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L1FastJet')
)


process.kt6CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L1Offset')
)


process.kt6CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L2Relative')
)


process.kt6CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L3Absolute')
)


process.kt6CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt6CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt6CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L2L3Residual')
)


process.kt6PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('KT6PF'),
    level = cms.string('L1FastJet')
)


process.kt6PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('KT6PF'),
    level = cms.string('L1Offset')
)


process.kt6PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L2Relative')
)


process.kt6PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L3Absolute')
)


process.kt6PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt6PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt6PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L2L3Residual')
)


process.lowPtTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('lowPtTripletStepChi2Est')
)


process.lowPtTripletStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    ComponentName = cms.string('lowPtTripletStepSeedLayers')
)


process.lowPtTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('lowPtTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(3),
    clustersToSkip = cms.InputTag("lowPtTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('lowPtTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('lowPtTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.lowPtTripletStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.075),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('lowPtTripletStepTrajectoryFilter')
)


process.mixedTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('mixedTripletStepChi2Est')
)


process.mixedTripletStepPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('mixedTripletStepPropagator'),
    Mass = cms.double(0.105),
    ptMin = cms.double(0.1),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('mixedTripletStepPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(0.1),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepSeedLayersA = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix2_pos+TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC2_neg+TEC3_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        maxRing = cms.int32(1)
    ),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('mixedTripletStepSeedLayersA')
)


process.mixedTripletStepSeedLayersB = cms.ESProducer("SeedingLayersESProducer",
    ComponentName = cms.string('mixedTripletStepSeedLayersB'),
    layerList = cms.vstring('BPix2+BPix3+TIB1', 
        'BPix2+BPix3+TIB2'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.mixedTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    trajectoryFilterName = cms.string('mixedTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("mixedTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('mixedTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('mixedTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.mixedTripletStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('mixedTripletStepTrajectoryFilter')
)


process.mixedlayerpairs = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix2_pos+TEC1_pos', 
        'FPix2_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC1_neg', 
        'FPix2_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg'),
    TEC = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        minRing = cms.int32(1),
        maxRing = cms.int32(1)
    ),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('MixedLayerPairs')
)


process.mixedlayertriplets = cms.ESProducer("SeedingLayersESProducer",
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+TIB1', 
        'BPix1+BPix3+TIB1', 
        'BPix2+BPix3+TIB1', 
        'BPix1+FPix1_pos+TID1_pos', 
        'BPix1+FPix1_neg+TID1_neg', 
        'BPix1+FPix1_pos+TID2_pos', 
        'BPix1+FPix1_neg+TID2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix1_pos+FPix2_pos+TEC2_pos', 
        'FPix1_neg+FPix2_neg+TEC2_neg'),
    ComponentName = cms.string('MixedLayerTriplets'),
    TEC = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    TID = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    TIB = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    includeBadChambers = cms.bool(False),
    etaBinSize = cms.double(0.125),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.myTTRHBuilderWithoutAngle = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('PixelTTRHBuilderWithoutAngle')
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool')
)


process.negativeCombinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('negativeOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexNegative')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFElectron')
        ))
)


process.negativeCombinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('negativeOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1Negative')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFElectron')
        ))
)


process.negativeOnlyJetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(-1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.negativeOnlyJetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(-1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.negativeSoftPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeTrackCounting3D2nd = cms.ESProducer("NegativeTrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(2)
)


process.negativeTrackCounting3D3rd = cms.ESProducer("NegativeTrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(3)
)


process.oppositeToMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('oppositeToMomElePropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.pixelLessLayerPairs4PixelLessTracking = cms.ESProducer("SeedingLayersESProducer",
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TID1 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1)
    ),
    TID3 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1)
    ),
    TID2 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1)
    ),
    ComponentName = cms.string('pixelLessLayerPairs4PixelLessTracking'),
    TEC = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(2),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched")
    ),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TIB3', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg')
)


process.pixelLessStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('pixelLessStepChi2Est')
)


process.pixelLessStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TID = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        maxRing = cms.int32(2)
    ),
    ComponentName = cms.string('pixelLessStepSeedLayers'),
    layerList = cms.vstring('TIB1+TIB2', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC4_pos+TEC5_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg', 
        'TEC4_neg+TEC5_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        maxRing = cms.int32(2)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.pixelLessStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('pixelLessStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("pixelLessStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(4),
    ComponentName = cms.string('pixelLessStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('pixelLessStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.pixelLessStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(4),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('pixelLessStepTrajectoryFilter')
)


process.pixelPairElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('pixelPairElectronSeedLayers')
)


process.pixelPairStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('pixelPairStepChi2Est')
)


process.pixelPairStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('pixelPairStepSeedLayers')
)


process.pixelPairStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('pixelPairStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("pixelPairStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('pixelPairStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('pixelPairStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.pixelPairStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('pixelPairStepTrajectoryFilter')
)


process.pixellayerpairs = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('PixelLayerPairs')
)


process.pixellayertriplets = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('PixelLayerTriplets')
)


process.positiveCombinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('positiveOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexPositive')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFElectron')
        ))
)


process.positiveCombinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('positiveOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1Positive')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFElectron')
        ))
)


process.positiveOnlyJetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.positiveOnlyJetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.positiveSoftPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.rings = cms.ESProducer("RingMakerESProducer",
    DumpDetIds = cms.untracked.bool(False),
    ComponentName = cms.string(''),
    RingAsciiFileName = cms.untracked.string('rings.dat'),
    DetIdsDumpFileName = cms.untracked.string('tracker_detids.dat'),
    WriteOutRingsToAsciiFile = cms.untracked.bool(False),
    Configuration = cms.untracked.string('FULL')
)


process.roads = cms.ESProducer("RoadMapMakerESProducer",
    GeometryStructure = cms.string('FullDetector'),
    ComponentName = cms.string(''),
    RingsLabel = cms.string(''),
    WriteOutRoadMapToAsciiFile = cms.untracked.bool(False),
    SeedingType = cms.string('FourRingSeeds'),
    RoadMapAsciiFile = cms.untracked.string('roads.dat')
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    printDebug = cms.untracked.bool(False),
    appendToDataLabel = cms.string(''),
    APVGain = cms.VPSet(cms.PSet(
        Record = cms.string('SiStripApvGainRcd'),
        NormalizationFactor = cms.untracked.double(1.0),
        Label = cms.untracked.string('')
    ), 
        cms.PSet(
            Record = cms.string('SiStripApvGain2Rcd'),
            NormalizationFactor = cms.untracked.double(1.0),
            Label = cms.untracked.string('')
        )),
    AutomaticNormalization = cms.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        record = cms.string('SiStripLatencyRcd'),
        label = cms.untracked.string('')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('deconvolution')
    ),
    LorentzAnglePeakMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('peak')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    appendToDataLabel = cms.string(''),
    PrintDebugOutput = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        ))
)


process.simpleSecondaryVertex2Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.simpleSecondaryVertex3Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('any')
)


process.softPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('any')
)


process.softPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('any')
)


process.softPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('any')
)


process.softPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('any')
)


process.softPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('any')
)


process.softPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.stripPairElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TID = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        maxRing = cms.int32(2)
    ),
    ComponentName = cms.string('stripPairElectronSeedLayers'),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        maxRing = cms.int32(2)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    ComponentName = cms.string('PixelCPETemplateReco'),
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    speed = cms.int32(-2),
    UseClusterSplitter = cms.bool(False)
)


process.tobTecFlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('tobTecFlexibleKFFittingSmoother'),
    standardFitter = cms.string('tobTecStepFitterSmoother'),
    looperFitter = cms.string('tobTecStepFitterSmootherForLoopers')
)


process.tobTecStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('tobTecStepChi2Est')
)


process.tobTecStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('tobTecStepRKFitter'),
    MinNumberOfHits = cms.int32(8),
    Smoother = cms.string('tobTecStepRKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.tobTecStepFitterSmootherForLoopers = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('tobTecStepRKFitterForLoopers'),
    MinNumberOfHits = cms.int32(8),
    Smoother = cms.string('tobTecStepRKSmootherForLoopers'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmootherForLoopers'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.tobTecStepInOutTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(4),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('tobTecStepInOutTrajectoryFilter')
)


process.tobTecStepRKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('tobTecStepRKFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectoryFitterForLoopers = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('tobTecStepRKFitterForLoopers'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8),
    ComponentName = cms.string('tobTecStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.tobTecStepRKTrajectorySmootherForLoopers = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8),
    ComponentName = cms.string('tobTecStepRKSmootherForLoopers'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.tobTecStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TOB = cms.PSet(
        skipClusters = cms.InputTag("tobTecStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    ComponentName = cms.string('tobTecStepSeedLayers'),
    layerList = cms.vstring('TOB1+TOB2', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(5),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        maxRing = cms.int32(5)
    )
)


process.tobTecStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('tobTecStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(False),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("tobTecStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(4),
    ComponentName = cms.string('tobTecStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('tobTecStepInOutTrajectoryFilter'),
    estimator = cms.string('tobTecStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.tobTecStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(6),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('tobTecStepTrajectoryFilter')
)


process.trackCounting3D2nd = cms.ESProducer("TrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(2)
)


process.trackCounting3D3rd = cms.ESProducer("TrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(3)
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.19),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.tripletElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('tripletElectronSeedLayers')
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('Fake'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('Fake'),
    ComponentName = cms.string('WithoutRefit')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('WithTrackAngle')
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord'),
    firstValid = cms.vuint32(1)
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    ),
    BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService'),
    toGet = cms.VPSet(),
    connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
    globaltag = cms.string('FT_53_LV5_AN1::All')
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.XMLIdealGeometryESSource = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/materials.xml', 
        'Geometry/CMSCommonData/data/rotations.xml', 
        'Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMother.xml', 
        'Geometry/CMSCommonData/data/cmsTracker.xml', 
        'Geometry/CMSCommonData/data/caloBase.xml', 
        'Geometry/CMSCommonData/data/cmsCalo.xml', 
        'Geometry/CMSCommonData/data/muonBase.xml', 
        'Geometry/CMSCommonData/data/cmsMuon.xml', 
        'Geometry/CMSCommonData/data/mgnt.xml', 
        'Geometry/CMSCommonData/data/beampipe.xml', 
        'Geometry/CMSCommonData/data/cmsBeam.xml', 
        'Geometry/CMSCommonData/data/muonMB.xml', 
        'Geometry/CMSCommonData/data/muonMagnet.xml', 
        'Geometry/TrackerCommonData/data/pixfwdMaterials.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCommon.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x2.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x3.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x4.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanelBase.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanel.xml', 
        'Geometry/TrackerCommonData/data/pixfwdBlade.xml', 
        'Geometry/TrackerCommonData/data/pixfwdNipple.xml', 
        'Geometry/TrackerCommonData/data/pixfwdDisk.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCylinder.xml', 
        'Geometry/TrackerCommonData/data/pixfwd.xml', 
        'Geometry/TrackerCommonData/data/pixbarmaterial.xml', 
        'Geometry/TrackerCommonData/data/pixbarladder.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderfull.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderhalf.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer0.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer1.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer2.xml', 
        'Geometry/TrackerCommonData/data/pixbar.xml', 
        'Geometry/TrackerCommonData/data/tibtidcommonmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmodpar.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0a.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0b.xml', 
        'Geometry/TrackerCommonData/data/tibmodule2.xml', 
        'Geometry/TrackerCommonData/data/tibstringpar.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring0lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring0.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring1lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring1.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring2lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring2.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring3lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring3.xml', 
        'Geometry/TrackerCommonData/data/tiblayerpar.xml', 
        'Geometry/TrackerCommonData/data/tiblayer0.xml', 
        'Geometry/TrackerCommonData/data/tiblayer1.xml', 
        'Geometry/TrackerCommonData/data/tiblayer2.xml', 
        'Geometry/TrackerCommonData/data/tiblayer3.xml', 
        'Geometry/TrackerCommonData/data/tib.xml', 
        'Geometry/TrackerCommonData/data/tidmaterial.xml', 
        'Geometry/TrackerCommonData/data/tidmodpar.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule2.xml', 
        'Geometry/TrackerCommonData/data/tidringpar.xml', 
        'Geometry/TrackerCommonData/data/tidring0.xml', 
        'Geometry/TrackerCommonData/data/tidring0f.xml', 
        'Geometry/TrackerCommonData/data/tidring0b.xml', 
        'Geometry/TrackerCommonData/data/tidring1.xml', 
        'Geometry/TrackerCommonData/data/tidring1f.xml', 
        'Geometry/TrackerCommonData/data/tidring1b.xml', 
        'Geometry/TrackerCommonData/data/tidring2.xml', 
        'Geometry/TrackerCommonData/data/tid.xml', 
        'Geometry/TrackerCommonData/data/tidf.xml', 
        'Geometry/TrackerCommonData/data/tidb.xml', 
        'Geometry/TrackerCommonData/data/tibtidservices.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesf.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesb.xml', 
        'Geometry/TrackerCommonData/data/tobmaterial.xml', 
        'Geometry/TrackerCommonData/data/tobmodpar.xml', 
        'Geometry/TrackerCommonData/data/tobmodule0.xml', 
        'Geometry/TrackerCommonData/data/tobmodule2.xml', 
        'Geometry/TrackerCommonData/data/tobmodule4.xml', 
        'Geometry/TrackerCommonData/data/tobrodpar.xml', 
        'Geometry/TrackerCommonData/data/tobrod0c.xml', 
        'Geometry/TrackerCommonData/data/tobrod0l.xml', 
        'Geometry/TrackerCommonData/data/tobrod0h.xml', 
        'Geometry/TrackerCommonData/data/tobrod0.xml', 
        'Geometry/TrackerCommonData/data/tobrod1l.xml', 
        'Geometry/TrackerCommonData/data/tobrod1h.xml', 
        'Geometry/TrackerCommonData/data/tobrod1.xml', 
        'Geometry/TrackerCommonData/data/tobrod2c.xml', 
        'Geometry/TrackerCommonData/data/tobrod2l.xml', 
        'Geometry/TrackerCommonData/data/tobrod2h.xml', 
        'Geometry/TrackerCommonData/data/tobrod2.xml', 
        'Geometry/TrackerCommonData/data/tobrod3l.xml', 
        'Geometry/TrackerCommonData/data/tobrod3h.xml', 
        'Geometry/TrackerCommonData/data/tobrod3.xml', 
        'Geometry/TrackerCommonData/data/tobrod4c.xml', 
        'Geometry/TrackerCommonData/data/tobrod4l.xml', 
        'Geometry/TrackerCommonData/data/tobrod4h.xml', 
        'Geometry/TrackerCommonData/data/tobrod4.xml', 
        'Geometry/TrackerCommonData/data/tobrod5l.xml', 
        'Geometry/TrackerCommonData/data/tobrod5h.xml', 
        'Geometry/TrackerCommonData/data/tobrod5.xml', 
        'Geometry/TrackerCommonData/data/tob.xml', 
        'Geometry/TrackerCommonData/data/tecmaterial.xml', 
        'Geometry/TrackerCommonData/data/tecmodpar.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule2.xml', 
        'Geometry/TrackerCommonData/data/tecmodule3.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule5.xml', 
        'Geometry/TrackerCommonData/data/tecmodule6.xml', 
        'Geometry/TrackerCommonData/data/tecpetpar.xml', 
        'Geometry/TrackerCommonData/data/tecring0.xml', 
        'Geometry/TrackerCommonData/data/tecring1.xml', 
        'Geometry/TrackerCommonData/data/tecring2.xml', 
        'Geometry/TrackerCommonData/data/tecring3.xml', 
        'Geometry/TrackerCommonData/data/tecring4.xml', 
        'Geometry/TrackerCommonData/data/tecring5.xml', 
        'Geometry/TrackerCommonData/data/tecring6.xml', 
        'Geometry/TrackerCommonData/data/tecring0f.xml', 
        'Geometry/TrackerCommonData/data/tecring1f.xml', 
        'Geometry/TrackerCommonData/data/tecring2f.xml', 
        'Geometry/TrackerCommonData/data/tecring3f.xml', 
        'Geometry/TrackerCommonData/data/tecring4f.xml', 
        'Geometry/TrackerCommonData/data/tecring5f.xml', 
        'Geometry/TrackerCommonData/data/tecring6f.xml', 
        'Geometry/TrackerCommonData/data/tecring0b.xml', 
        'Geometry/TrackerCommonData/data/tecring1b.xml', 
        'Geometry/TrackerCommonData/data/tecring2b.xml', 
        'Geometry/TrackerCommonData/data/tecring3b.xml', 
        'Geometry/TrackerCommonData/data/tecring4b.xml', 
        'Geometry/TrackerCommonData/data/tecring5b.xml', 
        'Geometry/TrackerCommonData/data/tecring6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetalf.xml', 
        'Geometry/TrackerCommonData/data/tecpetalb.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8b.xml', 
        'Geometry/TrackerCommonData/data/tecwheel.xml', 
        'Geometry/TrackerCommonData/data/tecwheela.xml', 
        'Geometry/TrackerCommonData/data/tecwheelb.xml', 
        'Geometry/TrackerCommonData/data/tecwheelc.xml', 
        'Geometry/TrackerCommonData/data/tecwheeld.xml', 
        'Geometry/TrackerCommonData/data/tecwheel6.xml', 
        'Geometry/TrackerCommonData/data/tecservices.xml', 
        'Geometry/TrackerCommonData/data/tecbackplate.xml', 
        'Geometry/TrackerCommonData/data/tec.xml', 
        'Geometry/TrackerCommonData/data/trackermaterial.xml', 
        'Geometry/TrackerCommonData/data/tracker.xml', 
        'Geometry/TrackerCommonData/data/trackerpixbar.xml', 
        'Geometry/TrackerCommonData/data/trackerpixfwd.xml', 
        'Geometry/TrackerCommonData/data/trackertibtidservices.xml', 
        'Geometry/TrackerCommonData/data/trackertib.xml', 
        'Geometry/TrackerCommonData/data/trackertid.xml', 
        'Geometry/TrackerCommonData/data/trackertob.xml', 
        'Geometry/TrackerCommonData/data/trackertec.xml', 
        'Geometry/TrackerCommonData/data/trackerbulkhead.xml', 
        'Geometry/TrackerCommonData/data/trackerother.xml', 
        'Geometry/EcalCommonData/data/eregalgo.xml', 
        'Geometry/EcalCommonData/data/ebalgo.xml', 
        'Geometry/EcalCommonData/data/ebcon.xml', 
        'Geometry/EcalCommonData/data/ebrot.xml', 
        'Geometry/EcalCommonData/data/eecon.xml', 
        'Geometry/EcalCommonData/data/eefixed.xml', 
        'Geometry/EcalCommonData/data/eehier.xml', 
        'Geometry/EcalCommonData/data/eealgo.xml', 
        'Geometry/EcalCommonData/data/escon.xml', 
        'Geometry/EcalCommonData/data/esalgo.xml', 
        'Geometry/EcalCommonData/data/eeF.xml', 
        'Geometry/EcalCommonData/data/eeB.xml', 
        'Geometry/HcalCommonData/data/hcalrotations.xml', 
        'Geometry/HcalCommonData/data/hcalalgo.xml', 
        'Geometry/HcalCommonData/data/hcalbarrelalgo.xml', 
        'Geometry/HcalCommonData/data/hcalendcapalgo.xml', 
        'Geometry/HcalCommonData/data/hcalouteralgo.xml', 
        'Geometry/HcalCommonData/data/hcalforwardalgo.xml', 
        'Geometry/HcalCommonData/data/average/hcalforwardmaterial.xml', 
        'Geometry/MuonCommonData/data/mbCommon.xml', 
        'Geometry/MuonCommonData/data/mb1.xml', 
        'Geometry/MuonCommonData/data/mb2.xml', 
        'Geometry/MuonCommonData/data/mb3.xml', 
        'Geometry/MuonCommonData/data/mb4.xml', 
        'Geometry/MuonCommonData/data/muonYoke.xml', 
        'Geometry/MuonCommonData/data/mf.xml', 
        'Geometry/ForwardCommonData/data/forward.xml', 
        'Geometry/ForwardCommonData/data/bundle/forwardshield.xml', 
        'Geometry/ForwardCommonData/data/brmrotations.xml', 
        'Geometry/ForwardCommonData/data/brm.xml', 
        'Geometry/ForwardCommonData/data/totemMaterials.xml', 
        'Geometry/ForwardCommonData/data/totemRotations.xml', 
        'Geometry/ForwardCommonData/data/totemt1.xml', 
        'Geometry/ForwardCommonData/data/totemt2.xml', 
        'Geometry/ForwardCommonData/data/ionpump.xml', 
        'Geometry/MuonCommonData/data/muonNumbering.xml', 
        'Geometry/TrackerCommonData/data/trackerStructureTopology.xml', 
        'Geometry/TrackerSimData/data/trackersens.xml', 
        'Geometry/TrackerRecoData/data/trackerRecoMaterial.xml', 
        'Geometry/EcalSimData/data/ecalsens.xml', 
        'Geometry/HcalCommonData/data/hcalsenspmf.xml', 
        'Geometry/HcalSimData/data/hf.xml', 
        'Geometry/HcalSimData/data/hfpmt.xml', 
        'Geometry/HcalSimData/data/hffibrebundle.xml', 
        'Geometry/HcalSimData/data/CaloUtil.xml', 
        'Geometry/MuonSimData/data/muonSens.xml', 
        'Geometry/DTGeometryBuilder/data/dtSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecs.xml', 
        'Geometry/RPCGeometryBuilder/data/RPCSpecs.xml', 
        'Geometry/ForwardCommonData/data/brmsens.xml', 
        'Geometry/HcalSimData/data/HcalProdCuts.xml', 
        'Geometry/EcalSimData/data/EcalProdCuts.xml', 
        'Geometry/EcalSimData/data/ESProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCutsBEAM.xml', 
        'Geometry/MuonSimData/data/muonProdCuts.xml', 
        'Geometry/ForwardSimData/data/ForwardShieldProdCuts.xml', 
        'Geometry/CMSCommonData/data/FieldParameters.xml'),
    rootNodeName = cms.string('cms:OCMS')
)


process.eegeom = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd'),
    firstValid = cms.vuint32(1)
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    toGet = cms.untracked.vstring('GainWidths')
)


process.essourceEcalNextToDead = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalNextToDeadChannelRcd'),
    firstValid = cms.vuint32(1)
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd'),
    firstValid = cms.vuint32(1)
)


process.essourceSev = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd'),
    firstValid = cms.vuint32(1)
)


process.magfield = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMagneticField.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_1103l.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldParameters_07_2pi.xml', 
        'Geometry/CMSCommonData/data/materials.xml'),
    rootNodeName = cms.string('cmsMagneticField:MAGF')
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd'),
    firstValid = cms.vuint32(1)
)


process.prefer("magfield")

process.AnomalousCellParameters = cms.PSet(
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999)
)

process.CSCSegAlgoDF = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoDF'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1),
    algo_psets = cms.VPSet(cms.PSet(
        tanThetaMax = cms.double(1.2),
        maxRatioResidualPrune = cms.double(3.0),
        dPhiFineMax = cms.double(0.025),
        tanPhiMax = cms.double(0.5),
        dXclusBoxMax = cms.double(8.0),
        preClustering = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        minHitsPerSegment = cms.int32(3),
        minHitsForPreClustering = cms.int32(10),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        nHitsPerClusterIsShower = cms.int32(20),
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            tanThetaMax = cms.double(2.0),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.8),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(10),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(12.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(12.0)
        ), 
        cms.PSet(
            tanThetaMax = cms.double(1.2),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.5),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(30),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoSK = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoSK'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.025),
        verboseInfo = cms.untracked.bool(True),
        chi2Max = cms.double(99999.0),
        dPhiMax = cms.double(0.003),
        wideSeg = cms.double(3.0),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.025),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoST = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    algo_name = cms.string('CSCSegAlgoST'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        maxRatioResidualPrune = cms.double(3),
        yweightPenalty = cms.double(1.5),
        maxRecHitsInCluster = cms.int32(20),
        preClusteringUseChaining = cms.bool(True),
        ForceCovariance = cms.bool(False),
        hitDropLimit6Hits = cms.double(0.3333),
        NormChi2Cut2D = cms.double(20.0),
        BPMinImprovement = cms.double(10000.0),
        Covariance = cms.double(0.0),
        tanPhiMax = cms.double(0.5),
        onlyBestSegment = cms.bool(False),
        SeedBig = cms.double(0.0015),
        dRPhiFineMax = cms.double(8.0),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        dXclusBoxMax = cms.double(4.0),
        BrutePruning = cms.bool(True),
        curvePenaltyThreshold = cms.double(0.85),
        CorrectTheErrors = cms.bool(True),
        hitDropLimit4Hits = cms.double(0.6),
        useShowering = cms.bool(False),
        CSCDebug = cms.untracked.bool(False),
        yweightPenaltyThreshold = cms.double(1.0),
        tanThetaMax = cms.double(1.2),
        NormChi2Cut3D = cms.double(10.0),
        minHitsPerSegment = cms.int32(3),
        ForceCovarianceAll = cms.bool(False),
        dPhiFineMax = cms.double(0.025),
        prePrunLimit = cms.double(3.17),
        hitDropLimit5Hits = cms.double(0.8),
        preClustering = cms.bool(True),
        prePrun = cms.bool(True),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        Pruning = cms.bool(True),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            maxRatioResidualPrune = cms.double(3),
            yweightPenalty = cms.double(1.5),
            maxRecHitsInCluster = cms.int32(24),
            preClusteringUseChaining = cms.bool(True),
            ForceCovariance = cms.bool(False),
            hitDropLimit6Hits = cms.double(0.3333),
            NormChi2Cut2D = cms.double(20.0),
            BPMinImprovement = cms.double(10000.0),
            Covariance = cms.double(0.0),
            tanPhiMax = cms.double(0.5),
            onlyBestSegment = cms.bool(False),
            SeedBig = cms.double(0.0015),
            dRPhiFineMax = cms.double(8.0),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            dXclusBoxMax = cms.double(4.0),
            BrutePruning = cms.bool(True),
            curvePenaltyThreshold = cms.double(0.85),
            CorrectTheErrors = cms.bool(True),
            hitDropLimit4Hits = cms.double(0.6),
            useShowering = cms.bool(False),
            CSCDebug = cms.untracked.bool(False),
            yweightPenaltyThreshold = cms.double(1.0),
            tanThetaMax = cms.double(1.2),
            NormChi2Cut3D = cms.double(10.0),
            minHitsPerSegment = cms.int32(3),
            ForceCovarianceAll = cms.bool(False),
            dPhiFineMax = cms.double(0.025),
            prePrunLimit = cms.double(3.17),
            hitDropLimit5Hits = cms.double(0.8),
            preClustering = cms.bool(True),
            prePrun = cms.bool(True),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            Pruning = cms.bool(True),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoTC = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoTC'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.02),
        verboseInfo = cms.untracked.bool(True),
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        dPhiMax = cms.double(0.003),
        chi2ndfProbMin = cms.double(0.0001),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.013),
            verboseInfo = cms.untracked.bool(True),
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            dPhiMax = cms.double(0.00198),
            chi2ndfProbMin = cms.double(0.0001),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6)
        ))
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            DTradius = cms.double(0.01),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        CSCsegments = cms.InputTag("csc2DSegments"),
        CSCStripTimeOffset = cms.double(0.0),
        CSCStripError = cms.double(7.0),
        UseStripTime = cms.bool(True),
        debug = cms.bool(False),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        PruneCut = cms.double(9.0),
        UseWireTime = cms.bool(True)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minNumberOfHits = cms.int32(13),
    minHitsMinPt = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    maxLostHits = cms.int32(999),
    maxNumberOfHits = cms.int32(100),
    maxConsecLostHits = cms.int32(1),
    nSigmaMinPt = cms.double(5.0),
    minNumberOfHitsPerLoop = cms.int32(4),
    minimumNumberOfHits = cms.int32(5),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    chargeSignificance = cms.double(-1.0)
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    )
)

process.DF_ME1234_1 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DF_ME1234_2 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(2.0),
    tanPhiMax = cms.double(0.8),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(12.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(12.0)
)

process.DF_ME1A = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(30),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(100.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(100.0),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(True),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(2),
            perform_delta_rejecting = cms.bool(True),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        perform_delta_rejecting = cms.bool(True),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(False),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(1),
            perform_delta_rejecting = cms.bool(False),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    recAlgo = cms.string('DTLinearDriftAlgo')
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(True),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(False),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            DTradius = cms.double(0.01),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        HitError = cms.double(6.0),
        DoWireCorr = cms.bool(True),
        PruneCut = cms.double(10000.0),
        DTsegments = cms.InputTag("dt4DSegments"),
        DropTheta = cms.bool(True),
        RequireBothProjections = cms.bool(False),
        HitsMin = cms.int32(3),
        DTTimeOffset = cms.double(0.0),
        debug = cms.bool(False),
        UseSegmentT0 = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        )
    )
)

process.DefaultAlgorithms = cms.PSet(
    CutToAvoidSignal = cms.double(2.0),
    slopeY = cms.int32(4),
    slopeX = cms.int32(3),
    PedestalSubtractionFedMode = cms.bool(False),
    Fraction = cms.double(0.2),
    minStripsToFit = cms.uint32(4),
    consecThreshold = cms.uint32(5),
    hitStripThreshold = cms.uint32(40),
    Deviation = cms.uint32(25),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    ApplyBaselineCleaner = cms.bool(True),
    doAPVRestore = cms.bool(True),
    TruncateInSuppressor = cms.bool(True),
    restoreThreshold = cms.double(0.5),
    APVInspectMode = cms.string('BaselineFollower'),
    ForceNoRestore = cms.bool(False),
    useRealMeanCM = cms.bool(False),
    ApplyBaselineRejection = cms.bool(True),
    DeltaCMThreshold = cms.uint32(20),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    useCMMeanMap = cms.bool(False),
    SelfSelectRestoreAlgo = cms.bool(False),
    distortionThreshold = cms.uint32(20),
    filteredBaselineMax = cms.double(6),
    Iterations = cms.int32(3),
    CleaningSequence = cms.uint32(1),
    nSmooth = cms.uint32(9),
    APVRestoreMode = cms.string('BaselineFollower'),
    MeanCM = cms.int32(0)
)

process.DefaultClusterizer = cms.PSet(
    ChannelThreshold = cms.double(2.0),
    MaxSequentialBad = cms.uint32(1),
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    MaxSequentialHoles = cms.uint32(0),
    MaxAdjacentBad = cms.uint32(0),
    QualityLabel = cms.string(''),
    SeedThreshold = cms.double(3.0),
    RemoveApvShots = cms.bool(True),
    ClusterThreshold = cms.double(5.0)
)

process.GlobalMuonRefitter = cms.PSet(
    TrackerSkipSection = cms.int32(-1),
    MuonHitsOption = cms.int32(1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    RefitDirection = cms.string('insideOut'),
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    TrackerSkipSystem = cms.int32(-1),
    DoPredictionsOnly = cms.bool(False),
    Chi2ProbabilityCut = cms.double(30.0),
    PropDirForCosmics = cms.bool(False),
    HitThreshold = cms.int32(1),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutRPC = cms.double(1.0),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    DYTthrs = cms.vint32(10, 5),
    RefitRPCHits = cms.bool(True),
    Chi2CutDT = cms.double(30.0),
    PtCut = cms.double(1.0),
    SkipStation = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        Eta_fixed = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    ScaleTECyFactor = cms.double(-1.0),
    GlbRefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('GlbMuKFFitter'),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DYTthrs = cms.vint32(30, 15),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        RefitRPCHits = cms.bool(True),
        PtCut = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        SkipStation = cms.int32(-1),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ScaleTECxFactor = cms.double(-1.0),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    RefitRPCHits = cms.bool(True),
    PCut = cms.double(2.5),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True)
    ),
    PtCut = cms.double(1.0),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
)

process.HcalNoiseParameterSet = cms.PSet(
    lMinRatio = cms.double(-999.0),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    TS4TS5EnergyThreshold = cms.double(50),
    lMinHPDHits = cms.int32(17),
    tMinRBXHits = cms.int32(50),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    minEZeros = cms.double(10.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    minEEMF = cms.double(50.0),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    tMaxRatio = cms.double(999.0),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    pMinE = cms.double(40.0),
    pMaxHPDEMF = cms.double(0.02),
    tMinHighEHitTime = cms.double(-7.0),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    lMaxRatio = cms.double(999.0),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(-999.0),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    minERatio = cms.double(50.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMaxHighEHitTime = cms.double(6.0),
    tMinZeros = cms.int32(8),
    lMinHPDNoOtherHits = cms.int32(10),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    tMaxLowEHitTime = cms.double(9999.0),
    pMinHPDNoOtherHits = cms.int32(7),
    hlMaxHPDEMF = cms.double(-9999.0)
)

process.JPTZSPCorrectorICone5 = cms.PSet(
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(0),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True)
)

process.JetIDParams = cms.PSet(
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True)
)

process.METSignificance_params = cms.PSet(
    resolutionsEra = cms.string('Spring10'),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    PF_PhiResType1 = cms.vdouble(0.002),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    trackDepositName = cms.string('tracker'),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.1),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(True),
    Threshold_HO = cms.double(0.1),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.025)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.5),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(False),
    Threshold_HO = cms.double(0.5),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.2)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.5),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(0.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoJetExtractorBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    ExcludeMuonVeto = cms.bool(True),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    JetCollectionLabel = cms.InputTag("ak5CaloJets"),
    DR_Veto = cms.double(0.1),
    Threshold = cms.double(5.0)
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(1)
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    nSigmaMinPt = cms.double(5.0),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTsegments = cms.InputTag("dt4DSegments"),
        DTradius = cms.double(0.01),
        TightMatchDT = cms.bool(False),
        TightMatchCSC = cms.bool(True)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        SmoothTkTrack = cms.untracked.bool(False),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        VertexConstraint = cms.bool(False),
        DoSmoothing = cms.bool(True)
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        Eta_fixed = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.NoVertexGeneratorBlock = cms.PSet(
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    )
)

process.OneProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZero'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngTwoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZero'),
    decayModeIndices = cms.vint32(2)
)

process.OneProngTwoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZeroIso'),
    decayModeIndices = cms.vint32(2)
)

process.PFTauQualityCuts = cms.PSet(
    isolationQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(8),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(1.0),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(1.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    ),
    pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
    primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
    signalQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(3),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(0.5),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(0.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    )
)

process.PixelFitterByHelixProjections = cms.PSet(
    ComponentName = cms.string('PixelFitterByHelixProjections'),
    TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
)

process.PixelTrackReconstructionBlock = cms.PSet(
    useFilterWithES = cms.bool(False),
    FilterPSet = cms.PSet(
        chi2 = cms.double(1000.0),
        nSigmaTipMaxTolerance = cms.double(0.0),
        ComponentName = cms.string('PixelTrackFilterByKinematics'),
        nSigmaInvPtTolerance = cms.double(0.0),
        ptMin = cms.double(0.1),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.9)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    )
)

process.PixelTripletHLTGenerator = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.037),
    ComponentName = cms.string('PixelTripletHLTGenerator')
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.037),
    ComponentName = cms.string('PixelTripletHLTGenerator')
)

process.PixelTripletLargeTipGenerator = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    ComponentName = cms.string('PixelTripletLargeTipGenerator'),
    extraHitRPhitolerance = cms.double(0.0),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.0)
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        originHalfLength = cms.double(21.2),
        originZPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        ptMin = cms.double(0.9),
        originXPos = cms.double(0.0),
        originRadius = cms.double(0.2)
    )
)

process.RegionPSetWithVerticesBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        useFixedError = cms.bool(True),
        originRadius = cms.double(0.2),
        sigmaZVertex = cms.double(3.0),
        fixedError = cms.double(0.2),
        VertexCollection = cms.InputTag("pixelVertices"),
        ptMin = cms.double(0.9),
        useFoundVertices = cms.bool(True),
        nSigmaZ = cms.double(4.0)
    )
)

process.RegionPsetFomBeamSpotBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        ptMin = cms.double(0.9)
    )
)

process.RegionPsetFomBeamSpotBlockFixedZ = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        originRadius = cms.double(0.2),
        ptMin = cms.double(0.9),
        originHalfLength = cms.double(21.2)
    )
)

process.SK_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.003),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0)
)

process.SK_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.025),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0)
)

process.ST_ME1234 = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(20),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.ST_ME1A = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(24),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SingleNet = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.SingleNetIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNetIso'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.TC_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.02),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.003),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2)
)

process.TC_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.013),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.00198),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6)
)

process.TECi = cms.PSet(
    minRing = cms.int32(1),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    useRingSlector = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    maxRing = cms.int32(2)
)

process.ThreeProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZero'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZero'),
    decayModeIndices = cms.vint32(11)
)

process.ThreeProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(11)
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    nSigmaThresholdPt = cms.double(5.0),
    minHitsThresholdPt = cms.int32(3),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    dRHcal = cms.double(9999.0),
    dREcal = cms.double(9999.0),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    useEcal = cms.bool(True),
    dREcalPreselection = cms.double(0.05),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    dRMuon = cms.double(9999.0),
    propagateAllDirections = cms.bool(True),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    useHO = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    usePreshower = cms.bool(False),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    dRHcalPreselection = cms.double(0.2),
    useMuon = cms.bool(True),
    useCalo = cms.bool(False),
    accountForTrajectoryChangeCalo = cms.bool(False),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRMuonPreselection = cms.double(0.2),
    truthMatch = cms.bool(False),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    useHcal = cms.bool(True)
)

process.TrackJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    )
)

process.cleaningAlgoConfig = cms.PSet(
    e6e2thresh = cms.double(0.04),
    tightenCrack_e6e2_double = cms.double(3),
    tightenCrack_e4e1_single = cms.double(3),
    cThreshold_barrel = cms.double(4),
    e4e1Threshold_barrel = cms.double(0.08),
    tightenCrack_e1_single = cms.double(2),
    e4e1_b_barrel = cms.double(-0.024),
    e4e1_a_barrel = cms.double(0.04),
    cThreshold_double = cms.double(10),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    cThreshold_endcap = cms.double(15),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e4e1Threshold_endcap = cms.double(0.3),
    tightenCrack_e1_double = cms.double(2)
)

process.combinedSecondaryVertexCommon = cms.PSet(
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)

process.cscRecHitDParameters = cms.PSet(
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0)
)

process.cuts = cms.PSet(
    tightCut = cms.double(0.985),
    looseCut = cms.double(0.95),
    mediumCut = cms.double(0.97),
    vlooseCut = cms.double(0.9)
)

process.discriminantConfiguration = cms.PSet(
    BinnedMaskedHcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
    ),
    InvariantOpeningAngle = cms.PSet(
        defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
        plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(1),
            rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
            nCharged = cms.uint32(1),
            mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                rms = cms.string('0.38/max(pt, 1.0)'),
                nCharged = cms.uint32(3),
                mean = cms.string('0.87/max(pt, 1.0)')
            )),
        defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
    ),
    BinnedMaskedEcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                nPUVtx = cms.int32(4)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                nPUVtx = cms.int32(5)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                nPUVtx = cms.int32(6)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                nPUVtx = cms.int32(7)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                nPUVtx = cms.int32(8)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                nPUVtx = cms.int32(9)
            )),
        defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
    ),
    FlightPathSignificance = cms.PSet(
        plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
        discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
        maxValue = cms.double(25),
        minValue = cms.double(-25)
    ),
    BinnedTrackIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
        plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
    )
)

process.dphiScale = cms.PSet(
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0)
)

process.ecalDrivenElectronSeedsParameters = cms.PSet(
    PhiMax2B = cms.double(0.002),
    hOverEPtMin = cms.double(0.0),
    PhiMax2F = cms.double(0.003),
    searchInTIDTEC = cms.bool(True),
    pPhiMax1 = cms.double(0.125),
    HighPtThreshold = cms.double(35.0),
    r2MinF = cms.double(-0.15),
    maxHBarrel = cms.double(0.0),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi1High = cms.double(0.08),
    ePhiMin1 = cms.double(-0.125),
    hcalTowers = cms.InputTag("towerMaker"),
    LowPtThreshold = cms.double(5.0),
    maxHOverEBarrel = cms.double(0.15),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    measurementTrackerName = cms.string(''),
    SizeWindowENeg = cms.double(0.675),
    nSigmasDeltaZ1 = cms.double(5.0),
    rMaxI = cms.double(0.2),
    maxHEndcaps = cms.double(0.0),
    preFilteredSeeds = cms.bool(False),
    r2MaxF = cms.double(0.15),
    hOverEConeSize = cms.double(0.15),
    pPhiMin1 = cms.double(-0.075),
    initialSeeds = cms.InputTag("newCombinedSeeds"),
    deltaZ1WithVertex = cms.double(25.0),
    SCEtCut = cms.double(4.0),
    z2MaxB = cms.double(0.09),
    fromTrackerSeeds = cms.bool(True),
    hcalRecHits = cms.InputTag("hbhereco"),
    z2MinB = cms.double(-0.09),
    rMinI = cms.double(-0.2),
    maxHOverEEndcaps = cms.double(0.15),
    hOverEHBMinE = cms.double(0.7),
    useRecoVertex = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    applyHOverECut = cms.bool(True),
    DeltaPhi2F = cms.double(0.012),
    PhiMin2F = cms.double(-0.003),
    hOverEHFMinE = cms.double(0.8),
    DeltaPhi2B = cms.double(0.008),
    PhiMin2B = cms.double(-0.002)
)

process.fieldScaling = cms.PSet(
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991)
)

process.ghostTrackCommon = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5)
)

process.ghostTrackVertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    )
)

process.hpsTancRequireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
    )
)

process.isolationSumsCalculator = cms.PSet(
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    trackProducer = cms.InputTag("generalTracks"),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    longImpactParameterA_Barrel = cms.double(0.2),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    transImpactParameterA_Barrel = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    transImpactParameterA_Endcap = cms.double(0.1),
    ComponentName = cms.string('isolationSumsCalculator'),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    modulePhiBoundary = cms.double(0.0087),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    longImpactParameterB_Endcap = cms.double(0.2),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    transImpactParameterB_Endcap = cms.double(0.1),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    vetoClustered = cms.bool(False),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    transImpactParameterB_Barrel = cms.double(0.1),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
)

process.j2tParametersCALO = cms.PSet(
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator")
)

process.j2tParametersVX = cms.PSet(
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)

process.layerInfo = cms.PSet(
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TEC = cms.PSet(
        useRingSlector = cms.bool(False),
        TTRHBuilder = cms.string('WithTrackAngle'),
        minRing = cms.int32(6),
        maxRing = cms.int32(7)
    )
)

process.leadTrackFinding = cms.PSet(
    cut = cms.double(0.5),
    Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1000)
)

process.mipVariable = cms.PSet(
    XRangeFit = cms.double(180.0),
    ResidualWidth = cms.double(0.23),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0)
)

process.noPrediscriminants = cms.PSet(
    BooleanOperator = cms.string('and')
)

process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(False)
)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-1.0)
)

process.ptSeedParameterization = cms.PSet(
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874)
)

process.requireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
    )
)

process.requireLeadPion = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadPion = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrack = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrackCalo = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.shrinkingConeLeadTrackFinding = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
    )
)

process.standardDecayModeParams = cms.PSet(
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxNbrOfIterations = cms.int32(10),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionPiZeroes = cms.double(0.15),
    maxPhotonsToMerge = cms.uint32(2),
    filterTwoProngs = cms.bool(True),
    maxPiZeroMass = cms.double(0.2),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1)
)

process.tautagInfoModifer = cms.PSet(
    pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
    name = cms.string('TTIworkaround'),
    plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
)

process.tcTauAlgoParameters = cms.PSet(
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.trackWithVertexSelectorParams = cms.PSet(
    normalizedChi2 = cms.double(999999.0),
    d0Max = cms.double(999.0),
    numberOfValidHits = cms.uint32(0),
    vtxFallback = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    etaMax = cms.double(5.0),
    nVertices = cms.uint32(0),
    copyTrajectories = cms.untracked.bool(False),
    zetaVtx = cms.double(1.0),
    numberOfLostHits = cms.uint32(999),
    etaMin = cms.double(0.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    ptErrorCut = cms.double(0.2),
    ptMin = cms.double(0.3),
    numberOfValidPixelHits = cms.uint32(0),
    rhoVtx = cms.double(0.2),
    dzMax = cms.double(999.0),
    src = cms.InputTag("generalTracks"),
    ptMax = cms.double(500.0),
    quality = cms.string('highPurity'),
    useVtx = cms.bool(True)
)

process.vertexCutsBlock = cms.PSet(
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    )
)

process.vertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    )
)

process.vertexSelectionBlock = cms.PSet(
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)

process.vertexTrackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.MultiNetIso = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZeroIso'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZeroIso'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(11)
    ))

process.SingleNetBasedTauID = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
))

process.TaNC = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZero'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZero'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZero'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZero'),
        decayModeIndices = cms.vint32(11)
    ))

process.transforms = cms.VPSet(cms.PSet(
    nPiZeros = cms.uint32(0),
    transform = cms.PSet(
        max = cms.double(1.99833333333),
        transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
            0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
            0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
            0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
            0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
            0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
            0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
            0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
            0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
            0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
            0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
            0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
            0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
            0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
            0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
            0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
            0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
            0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
            0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
            0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
            0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
            0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
            0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
            0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
            0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
            0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
            0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
            0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
            0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
            0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
            0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
            0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
            0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
            0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
            0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
            0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
            0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
            0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
            0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
            0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
            0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
            0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
            0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
            0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
            0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
            0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
            0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
            0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
            0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
            0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
            0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
            0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
            0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
            0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
            0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
            0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
            0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
            0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
            0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
            0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
            0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
            0.9679163435, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0 ) ),
        min = cms.double(-0.998333333333)
    ),
    nCharged = cms.uint32(3)
), 
    cms.PSet(
        nPiZeros = cms.uint32(1),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(2),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ))

